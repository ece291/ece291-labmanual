<!--
     ECE 291 Lab Manual

     $IdPath$
-->

<chapter id="pmodelib-intro">
 <title>Introduction to PModeLib</title>


 <sect1 id="pmodelib-intro-description">
  <title>What is PModeLib?</title>

  <para>PModeLib is the standard protected mode library for ECE 291.
   It provides a much larger set of functions than the real mode
   library to make programming in protected mode easier.  Almost 100
   functions cover memory handling, file I/O, graphics files,
   interrupts and callbacks, text mode, graphics mode, networking,
   sound, and DMA in addition to some other general purpose functions.
   <xref linkend="pmodelib-ref"> contains a full reference to all of
   the functions inclued in PModeLib.</para>
 </sect1>

 <sect1 id="pmodelib-intro-proc-invoke">
  <title>The <literal>proc</literal> and <literal>invoke</literal>
   Macros</title>

  <para>PModeLib uses the 32-bit C calling convention.  See the first
   page of the PModeLib Reference (<xref linkend="pmodelib-ref">) for
   a quick overview, or <xref linkend="c-prog"> for a more detailed
   look at how this calling convention works.</para>

  <para>Because some of the functions in PModeLib can take many
   parameters, a set of macros which implement the C calling
   convention has been provided to make it easier to both write and
   use these functions.</para>

  <sect2 id="pmodelib-intro-proc-invoke-invoke">
   <title>Using <literal>invoke</literal></title>

   <para>We highly recommend using the <literal>invoke</literal> macro
    to call the library functions, as
   <xref linkend="pmodelib-intro-invoke-example"> demonstrates.</para>

   <example id="pmodelib-intro-invoke-example">
    <title>Using the <literal>invoke</literal> macro</title>

    <programlisting>
        invoke  <xref linkend="pmodelib-ref-findgraphicsmode">, word 640, word 480, word 32, dword 1
        invoke  <xref linkend="pmodelib-ref-setgraphicsmode">, ax
        invoke  <xref linkend="pmodelib-ref-copytoscreen">, dword Image, dword 320*4, dword 0, \
                               dword 0, dword 320, dword 240, dword 160, dword 120
        invoke  <xref linkend="pmodelib-ref-unsetgraphicsmode"></programlisting>
   </example>
  </sect2>

  <sect2 id="pmodelib-intro-proc-invoke-proc">
   <title>Writing Functions using <literal>proc</literal></title>

   <para>Using <literal>invoke</literal> makes
    <emphasis>calling</emphasis> functions using the C calling
    convention a lot easier, but what about the other side: what
    facility makes <emphasis>writing</emphasis> functions that use the
    C calling convention easier?  The answer is
    <literal>proc</literal> (and its companion
    <literal>endproc</literal>).  PModeLib itself uses the
    <literal>proc</literal> and <literal>endproc</literal> macros, so
    its source code (located in the <filename
     class="directory">src</filename> directory in <filename
     class="directory">V:\ece291\pmodelib</filename>) contains many
    examples of the use of these two macros.</para>

   <tip>
    <para>Look at the PModeLib source as a guide on writing code in
     protected mode, as well as a guide on how to write functions
     using the C calling convention!</para>
   </tip>

   <para>Let's examine a very simple function that takes two
    parameters.  We'll examine three versions: one uses registers to
    pass in the parameters, one uses the C calling convention but
    doesn't use the <literal>proc</literal> macro, and the last uses
    the C calling convention along with the <literal>proc</literal>
    and <literal>endproc</literal> macros.</para>

   <sect3 id="pmodelib-intro-proc-invoke-proc-diff-register">
    <title><function>Diff</function> with Register Inputs</title>

    <programlisting>GLOBAL _main

SECTION .text

_main:
        mov     eax, 5
        mov     ebx, 3
        call    Diff
        ; Result in eax (should be 2)
        ret

; Purpose: Subtracts ebx from eax.
; Inputs:  eax, number to be subtracted from
;          ebx, amount to subtract
; Outputs: eax, result of subtraction
Diff
        sub     eax, ebx
        ret</programlisting>
   </sect3>

   <sect3 id="pmodelib-intro-proc-invoke-proc-diff-noproc">
    <title><function>Diff</function> with C Calling Convention (but
     without <literal>proc</literal>)</title>

    <para>Suppose for a moment that <function>Diff</function> was a
     much more complex function with more arguments.  Or that it needs
     to be called from some C source code.  Or that it just needs to
     use the C calling convention because every other function in the
     program uses the C calling convention.  No matter the reason,
     let's rewrite <function>Diff</function> so that it uses the C
     calling convention instead of registers to get its parameters.
     Let's assume for the moment that we don't have the
     <literal>proc</literal> or <literal>invoke</literal> macros, and
     see what the code looks like.</para>

    <programlisting>GLOBAL _main

SECTION .text

_main:
        ; Parameters pushed in reverse order
        push    dword 3
        push    dword 5
        call    _Diff
        add     esp, 8          ; Throw away parameters (still on stack)
        ; Result in eax (should be 2)
        ret

; int Diff(int a, b);
; Purpose: Subtracts b from a.
; Inputs:  a, number to be subtracted from
;          b, amount to subtract
; Outputs: Returns a-b.
_Diff                           ; Prepended underscore to function name
        push    ebp             ; Save caller's stack frame
        mov     ebp, esp        ; Establish new stack frame
        mov     eax, [ebp+8]    ; Get the first parameter
        sub     eax, [ebp+12]   ; Subtract the second parameter
        pop     ebp             ; Restore the base pointer
        ret                     ; Return to caller, with result in eax</programlisting>
   </sect3>

   <sect3 id="pmodelib-intro-proc-invoke-proc-diff-proc">
    <title><function>Diff</function> Using
     <literal>proc</literal></title>

    <para>Whew!  That's quite a mess of code, and there's a lot for us
     to keep track of and remember, even for a function that just
     takes two parameters: the arguments have to be passed in reverse
     order, 8 needs to be added to &reg.esp; after the call, &reg.ebp;
     needs to be played with inside the function (pushed, modified,
     and popped), and the <quote>magic</quote> constants 8 and 12 need
     to be used to get the parameters off the stack!  Let's use the
     <literal>proc</literal>, <literal>endproc</literal>, and
     <literal>invoke</literal> macros to clean this code up, and make
     it easier to read, maintain, and write correctly in the first
     place!</para>

    <programlisting>%include "lib291.inc"   ; Defines proc, endproc, invoke

GLOBAL _main

SECTION .text

_main:
        invoke  _Diff, dword 5, dword 3
        ; Result in eax (should be 2)
        ret

; int Diff(int a, b);
; Purpose: Subtracts b from a.
; Inputs:  a, number to be subtracted from
;          b, amount to subtract
; Outputs: Returns a-b.
proc _Diff      ; "proc" followed by name prepended with underscore

.a      arg     4        ; First parameter, dword (4 bytes)
.b      arg     4        ; Second parameter, dword (4 bytes)

        mov     eax, [ebp+.a]    ; Get the first parameter
        sub     eax, [ebp+.b]    ; Subtract the second parameter
        ret                      ; Return to caller, with result in eax

endproc
_Diff_arglen    equ      8       ; Sum of all parameter sizes</programlisting>

    <para>That <emphasis>is</emphasis> a lot easier to read! Comparing
     it to the non-<literal>proc</literal> version, it's easy to see
     exactly what <literal>proc</literal>, <literal>endproc</literal>,
     and <literal>invoke</literal> do, and to a certain extent how
     they work.  For example, the <literal>invoke</literal> macro
     knows how much to add to &reg.esp; after the call by looking for
     <literal>_Diff_arglen</literal>, which is why it must be present
     and be equal to the sum of all parameter sizes.</para>
   </sect3>
  </sect2>

  <sect2 id="pmodelib-intro-proc-invoke-pointer">
   <title>Pointer Parameters</title>

   <para>Several of the PModeLib functions take
    <firstterm>pointer</firstterm> parameters.  A pointer paramter is
    simply a parameter that takes the <emphasis>address</emphasis> of
    a value rather than the value itself.  Let's rewrite
    <function>Diff</function> one more time, with a few
    changes:</para>

   <itemizedlist>
    <listitem>
     <para>It subtracts two 16-bit integers, not two 32-bit integers
      (in C parlance that means they're <quote>short</quote> instead
      of <quote>int</quote>).</para>
    </listitem>

    <listitem>
     <para>The two parameters are passed as pointers.</para>
    </listitem>

    <listitem>
     <para>The output is also passed as a pointer.</para>
    </listitem>
   </itemizedlist>

   <para>Wait a second!  The <emphasis>output</emphasis> is passed as
    a pointer!?  Yes, and in fact this is a common way for a function
    to return multiple values, or return a value as well as an error
    code.  As a pointer (or address) of the output is passed, the
    function knows <emphasis>where</emphasis> to store the result, and
    thus just stores the result to that address before returning.
    Let's take a look at the new <function>Diff</function>!</para>

   <programlisting>%include "lib291.inc"   ; Defines proc, endproc, invoke

GLOBAL _main

SECTION .data

; As we're passing addresses, the values (and result) have to be in memory.
val1    dw 5
val2    dw 3

SECTION .bss

result  resw 1          ; The result is unknown, so put it in .bss

SECTION .text

_main:
        ; Pass addresses of memory variables.  Even though the values are
        ;  words, their *addresses* are dwords!
        invoke  _Diff, dword result, dword val1, dword val2
        ; Result in result variable (should be 2)
        ; As it's a "void" function, disregard eax value
        ret

; void Diff(short *r, short *a, short *b);
; Purpose: Subtracts b from a.
; Inputs:  a, number to be subtracted from
;          b, amount to subtract
; Outputs: r, result of subtraction (a-b)
proc _Diff

.r      arg     4        ; Note that even though the parameters being
.a      arg     4        ;  pointed to are words (2 bytes), the pointers
.b      arg     4        ;  themselves (the parameters) are dwords!

        push    esi              ; We have to save esi and edi.
        push    edi              ; Yes, this function could be coded without
                                 ;  using them, but just as an example...

        ; Load values of a and b, and do subtraction.
        mov     esi, [ebp+.a]    ; Get "a" *offset*
        mov     cx, [esi]        ; Get "a" *value*
        mov     ebx, [ebp+.b]    ; Get "b" *offset*
        sub     cx, [ebx]        ; Subtract "b" *value* from "a" value

        ; Store result into variable pointed to by r.
        mov     edi, [ebp+.r]    ; Get "r" *offset*
        mov     [edi], cx        ; Store result

        pop     edi      ; Restore saved registers before ret
        pop     esi
        ret              ; Return to caller, eax can be anything

endproc
_Diff_arglen    equ      12      ; Sum of all parameter sizes</programlisting>

   <para>Passing pointers is inefficient for such a simple function,
    but is invaluable for functions that need to return more than one
    value (eg, return a value into one of the pointed-to parameters as
    well as return a value in the <quote>normal</quote> fashion in
    &reg.eax;) or that take entire structures as parameters (just the
    starting offset of the structure can be passed on the stack,
    rather than every variable in the structure).
    Pointers/offsets/addresses can be used in very powerful
    ways.</para>

   <tip>
    <para>For practice using and writing functions using
     <literal>proc</literal> and pointer parameters, rewrite the
     <quote>dspmsg</quote> example program (the one rewritten using
     PModeLib in <xref linkend="pmodelib-intro-using-interrupts">) to
     split the <quote>dspmsg</quote> functionality into a separate
     function that uses the C calling convention:</para>

    <funcsynopsis>
     <funcprototype>
      <funcdef>void <function>dspmsg</function></funcdef>
      <paramdef>char *<parameter>string</parameter></paramdef>
     </funcprototype>
    </funcsynopsis>

    <para>and then call the <function>dspmsg</function> function,
     using the <literal>invoke</literal> macro, from the main
     program.</para>
   </tip>
  </sect2>
 </sect1>

 <sect1 id="pmodelib-intro-using">
  <title>Using PModeLib: A Framework</title>

  <para>Any program that uses PModeLib should follow this basic
   framework.  It must also link with <filename
    class="libraryfile">lib291.a</filename> (this will be done by
   default in the protected mode MP).</para>

  <programlisting>%include "lib291.inc"

GLOBAL _main

...

SECTION .text

_main
        call    <xref linkend="pmodelib-ref-libinit">         ; You could use invoke here, too
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .initerror

... do stuff using PModeLib functions ...

        call    <xref linkend="pmodelib-ref-libexit">
.initerror:
        ret                      ; Return to DOS</programlisting>
 </sect1>

 <sect1 id="pmodelib-intro-using-interrupts">
  <title>Using Interrupts with PModeLib Functions</title>

  <para>In <xref linkend="realprot-diff-interrupts">, we looked at how
   interrupts are called from protected mode.  The concepts are still
   the same with PModeLib, but many of the details are integrated into
   PModeLib (such as the <xref
    linkend="pmodelib-ref-dpmi-regs">,
   <xref linkend="pmodelib-ref-transfer-buf">, and <xref
    linkend="pmodelib-ref-transfer-buf-seg"> variables).  Also,
   PModeLib provides a nice wrapper function around <dpmiref
    section="api" function="0300"></dpmiref>, aptly named <link
    linkend="pmodelib-ref-dpmi-int"><function>DPMI_Int</function></link>.</para>

  <para>Here is the same print string program we looked at in <xref
    linkend="realprot-diff-interrupts-examples-dspmsg">, written using
   PModeLib:</para>

  <example id="pmodelib-intro-using-interrupts-dspmsg-example">
   <title>PModeLib <quote>dspmsg</quote> Program</title>

   <programlisting width="90">%include "lib291.inc"

BITS 32

GLOBAL _main

SECTION .data

; String to print to screen
str     db 'Hello, World!',13,10,'$'

SECTION .text

_main

        call    <xref linkend="pmodelib-ref-libinit">         ; Initialize PModeLib

        ; PModeLib allocated the DOS memory for us; just
        ;  copy the string into it.  Note that while a loop is
        ;  used here, for larger amounts data (or data of fixed
        ;  size), it would probably make more sense to use a
        ;  string instruction such as rep movsd here.
        push    es
        mov     es, [<xref linkend="pmodelib-ref-transfer-buf">]     ; Put the selector into es.
        xor     ebx, ebx                ; Offset into string
.loop:
        mov     al, [str+ebx]   ; Copy from string
        mov     [es:ebx], al    ; Into DOS memory area, starting at offset 0
        cmp     al, '$'         ; Stop at the '$' marker.
        jne     .loop
        pop     es

        ; Set up the input registers for the DOS interrupt in the PModeLib
        ;  <xref linkend="pmodelib-ref-dpmi-regs"> structure.
        mov     word [<xref linkend="pmodelib-ref-dpmi-eax">], 0900h  ; Neat trick: even though DPMI_EAX
                                        ;  is a dword, thanks to little
                                        ;  endian storing just a word works.
                                        ; Note that AH=09h, not AL.
                                        ; mov byte [DPMI_EAX+1], 09h would
                                        ;  have worked here too.  Why? :)
        mov     word [<xref linkend="pmodelib-ref-dpmi-edx">], 0      ; Again, only care about the low 16
                                        ;  bits (DX).  Set to 0 because that's
                                        ;  where the string was copied to!
                                        ;  sees.
        ; It's not necessary to set <xref linkend="pmodelib-ref-dpmi-ds"> because LibInit sets it.

        ; Now simulate the interrupt using the PModeLib function DPMI_Int:
        mov     bx, 21h         ; Real mode interrupt number (DOS interrupt)
        call    <xref linkend="pmodelib-ref-dpmi-int">

        ; PModeLib's LibExit frees the DOS memory block.
        call    <xref linkend="pmodelib-ref-libexit">

        ; We're done, exit back to DOS.
        ret</programlisting>
  </example>
 </sect1>

 <sect1 id="pmodelib-intro-memory">
  <title>Allocating Memory</title>

  <para>Allocating memory is something that was never needed in the
   MP's up to this point.  So why is it necessary to learn about it
   now?  Primarily because we're going to start working with some
   <emphasis>really</emphasis> big (multi-megabyte) data such as
   images.  Once a program's memory usage goes beyond a few kilobytes,
   it's smart to dynamically allocate memory at run time, and PModeLib
   provides a function to make this task <emphasis>much</emphasis>
   easier.</para>

  <para><link
    linkend="pmodelib-ref-allocmem"><function>AllocMem()</function></link> 
   takes just a single parameter: <parameter>Size</parameter>, which
   specifies the number of bytes to allocate.  It returns the starting
   offset of the newly allocated block, which you can use just like
   any other offset (such as to a variable).  Generally it's a smart
   idea to store this offset in a variable, which adds a layer of
   indirection, but makes it easier to allocate and keep track of
   several memory blocks at once.  There is no way to free memory once
   it's allocated; the memory is freed when the program exits.</para>

  <example id="pmodelib-intro-memory-example">
   <title>Allocating Memory</title>

   <programlisting>
%include "lib291.inc"

GLOBAL _main

test1size equ 4*1024*1024       ; 4 MB
test2size equ 1*1024*1024       ; 1 MB

SECTION .bss    ; Uninitialized data

test1off        resd 1   ; stores offset of test1 data
test2off        resd 1   ; stores offset of test2 data

SECTION .text

_main
        push    esi              ; Save registers
        push    edi

        call    <xref linkend="pmodelib-ref-libinit">         ; You could use invoke here, too
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .initerror

        ; Allocate test1 memory block
        invoke  <xref linkend="pmodelib-ref-allocmem">, dword test1size
        cmp     eax, -1          ; Check for error (-1 return value)
        je      near .error
        mov     [test1off], eax  ; Save offset in variable

        ; Allocate test2 memory block
        invoke  <xref linkend="pmodelib-ref-allocmem">, dword test2size
        cmp     eax, -1          ; Check for error (-1 return value)
        je      near .error
        mov     [test2off], eax  ; Save offset in variable

        ; Fill the test1 block with 0's.
        ; We don't need to set es=ds, because it's that way at start.
        xor     eax, eax         ; Fill with 0
        mov     edi, [test1off]  ; Starting address (remember indirection)
        mov     ecx, test1size/4 ; Filling doublewords (4 bytes at a time)
        rep stosd                ; Fill!

        ; Copy from last meg of test1 to test2
        mov     esi, [test1off]  ; Starting address of source
        add     esi, test1size-1024*1024 ; Move offset to last meg
        mov     edi, [test2off]  ; Destination
        mov     ecx, test2size/4 ; Copying dwords
        rep movsd

.error:
        call    <xref linkend="pmodelib-ref-libexit">
.initerror:
        pop     edi              ; Restore registers
        pop     esi
        ret                      ; Return to DOS</programlisting>
  </example>
 </sect1>

 <sect1 id="pmodelib-intro-file">
  <title>File I/O</title>

  <para>Just filling memory with constant values isn't very
   interesting (or useful).  It's far more useful to be able to load
   in data from an external file: graphics being the most obvious
   example.  However, data such as maps, precalculated function
   tables, and even executable code can be loaded from disk.  The
   library itself loads executable code from disk for the graphics
   driver.</para>

  <para>The library has a set of <link
    linkend="pmodelib-ref-file">general file handling functions</link>
   that make opening, closing, reading, and writing files much easier.
   The <link
    linkend="pmodelib-ref-openfile"><function>OpenFile()</function></link> 
   function takes a pointer to (the address of) the filename to open,
   and returns an integer <firstterm>handle</firstterm>, which
   identifies the file for all of the other file functions.  It is
   therefore possible to have multiple files open at the same time,
   but be aware that there is a limit on the maximum number of open
   files, so it's smart to have as few open at the same time as
   possible: when loading multiple files, open, read, and close one
   before loading the next.</para>

  <para>As the library has a specialized set of functions for loading
   graphics files, it's wise to use those instead of the generic file
   functions for loading graphics files.  We'll use those when we
   cover high-resolution graphics using PModeLib.</para>

  <example id="pmodelib-intro-file-example">
   <title>File I/O</title>

   <programlisting>
%include "lib291.inc"

GLOBAL _main

mapsize equ 512*512     ; 512x512 map

SECTION .bss    ; Uninitialized data

mapoff  resd 1  ; Offset of the map data

SECTION .data   ; Initialized data

mapfn   db "mymap.dat",0        ; file to load data from (notice 0-terminated)

SECTION .text

_main
        push    esi              ; Save registers

        call    <xref linkend="pmodelib-ref-libinit">         ; You could use invoke here, too
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .initerror

        ; Allocate memory for map
        invoke  <xref linkend="pmodelib-ref-allocmem">, dword mapsize
        cmp     eax, -1          ; Check for error (-1 return value)
        je      near .error
        mov     [mapoff], eax    ; Save offset

        ; Open file for reading
        invoke  <xref linkend="pmodelib-ref-openfile">, dword mapfn, word 0
        cmp     eax, -1          ; Check for error (-1 return value)
        je      near .error
        mov     esi, eax         ; EAX will get overwritten by ReadFile so save

        ; Read mapsize bytes from the file.
        ; Note the indirection for the address of the buffer.
        invoke  <xref linkend="pmodelib-ref-readfile">, esi, dword [mapoff], dword mapsize
        cmp     eax, mapsize     ; Check to see if we actually read that much
        jne     .error

        ; Close the file
        invoke  <xref linkend="pmodelib-ref-closefile">, esi

.error:
        call    <xref linkend="pmodelib-ref-libexit">
.initerror:
        pop     esi              ; Restore registers
        ret                      ; Return to DOS</programlisting>
  </example>
 </sect1>

 <sect1 id="pmodelib-intro-interrupt">
  <title>Protected Mode Interrupt Handling</title>

  <para>We've previously covered real mode interrupt handling, calling
   DOS to change the interrupt table to point at our code, chaining to
   the old interrupt handler for timer interrupts, and other concepts.
   While the general concepts don't change when we go to protected
   mode, the implementation does, and there are <link
    linkend="pmodelib-ref-int">several functions in PModeLib</link> to
   make the transition less painful.</para>

  <para>The <link
    linkend="pmodelib-ref-install-int"><function>Install_Int()</function></link> 
   and <link
    linkend="pmodelib-ref-remove-int"><function>Remove_Int()</function></link> 
   PModeLib functions make it easy to install a standard interrupt
   handler in protected mode (eg, one for timer or keyboard).  The
   interrupt handler is just a normal subroutine (it should end with a
   <instruction>ret</instruction> instruction), and it should return a
   value in &reg.eax; to indicate whether the interrupt should be
   chained to the old handler or not: a zero value indicates the
   interrupt should just return (real-mode
   <instruction>iret</instruction>), a nonzero value indicates the
   interrupt should chain to the old handler (real-mode
   <instruction>jmp</instruction> or
   <instruction>call</instruction>).</para>

  <para>One thing that is important to remember is to
   <firstterm>lock</firstterm> the memory areas an interrupt handler
   will access; this includes any variables it uses and the interrupt
   handler code itself.  The reason we need to lock these areas is due
   to paging: any area of the program may be swapped out to disk by
   the operating system and replaced with another piece of code or
   data.  While it is automatically reloaded when accessed by the
   program, this can cause unacceptable delay for interrupt handlers,
   as it may take many milliseconds to load the code or data back from
   disk.  Locking prevents the operating system from paging out that
   area of memory.  So why don't we lock the whole program?  It's
   really unfriendly to do that in a multitasking environment,
   especially if your program takes up a lot of memory and it's a
   limited-memory system.  Locking is another reason to keep your
   interrupt handlers short and keep most of the processing in the
   main loop (which doesn't have to be locked).  The PModeLib function
   <link
    linkend="pmodelib-ref-lockarea"><function>LockArea()</function></link> 
   is used to lock memory areas.</para>

  <example id="pmodelib-intro-interrupt-timer-example">
   <title>Hooking the timer interrupt</title>

   <programlisting>
%include "lib291.inc"

GLOBAL _main

SECTION .bss

timercount resd 1        ; Number of ticks received

SECTION .text

; Timer interrupt handler
TimerDriver
        inc     dword [timercount]

        ; No PIC acknowledge (out 20h, 20h) required because we're chaining.
        mov     eax, 1           ; Chain to the previous handler
        ret                      ; Note it's ret, not iret!
TimerDriver_end

_main
        call    <xref linkend="pmodelib-ref-libinit">         ; You could use invoke here, too
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .initerror

        ; Lock up memory the interrupt will access
        invoke  <xref linkend="pmodelib-ref-lockarea">, ds, dword timercount, dword 4
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .error

        ; Lock the interrupt handler itself.
        ; Note that we use the TimerDriver_end label to calculate the length
        ;  of the code.
        invoke  <xref linkend="pmodelib-ref-lockarea">, cs, dword TimerDriver, \
                           dword TimerDriver_end-TimerDriver
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .error

        ; Install the timer handler
        invoke  <xref linkend="pmodelib-ref-install-int">, dword 8, dword TimerDriver
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .error

        ; Loop until we get a keypress, using int 16h
.loop:
        mov     ah, 1            ; BIOS check key pressed function
        int     16h
        jz      .loop            ; Loop while no keypress

        xor     eax, eax         ; BIOS get key pressed
        int     16h

        ; Uninstall the timer handler (don't forget this!)
        invoke  <xref linkend="pmodelib-ref-remove-int">, dword 8

.error:
        call    <xref linkend="pmodelib-ref-libexit">
.initerror:
        ret                      ; Return to DOS</programlisting>
  </example>

  <para>See the <filename class="directory">examples</filename>
   directory in <filename
    class="directory">V:\ece291\pmodelib</filename> for more
   examples.</para>
 </sect1>

 <sect1 id="pmodelib-intro-graphics">
  <title>High-Resolution Graphics</title>

  <para>Now for the fun stuff!  High-resolution graphics is where
   protected mode really shows off its full capabilities.  Most of
   what we'll do in this section is nearly impossible in real mode due
   to 64k segment limitations.  We're going to make a very short
   program which will load a 640x480 graphics file from disk and
   display it on the screen.</para>

  <sect2 id="pmodelib-intro-graphics-files">
   <title>Graphics Files</title>

   <para>We won't go into all the details of the various graphics file
    formats here, but let's briefly list the formats supported by
    PModeLib and its two graphics file libraries:</para>

   <itemizedlist>
    <listitem>
     <para>BMP - Windows Bitmap format.  Uncompressed, no alpha
      support.  This format is only provided for completeness, and for
      the ability to save images.  PNG and JPG provide compression and
      alpha channel support.  The PModeLib functions <link
       linkend="pmodelib-ref-loadbmp"><function>LoadBMP()</function></link> 
      and <link
       linkend="pmodelib-ref-savebmp"><function>SaveBMP()</function></link> 
      support loading and saving of 8-bit and 24-bit images.</para>
    </listitem>

    <listitem>
     <para>PNG - Portable Network Graphics format.  Non-lossy
      compression, alpha channel support, and many bit depths.  It's
      good for sprites and non-photographic images.  The PModeLib
      function <link
       linkend="pmodelib-ref-loadpng"><function>LoadPNG()</function></link> 
      can load any PNG image.</para>
    </listitem>

    <listitem>
     <para>JPG - JPEG image format.  Lossy compression, no alpha
      support, only 24-bit images.  It's excellent for photographic
      images, as very high compression rates can be achieved with
      little quality loss.  The PModeLib function <link
       linkend="pmodelib-ref-loadjpg"><function>LoadJPG()</function></link> 
      can load any JPG image.</para>
    </listitem>
   </itemizedlist>

   <para>All of these functions assume an internal pixel format of
    uncompressed 32-bit RGBA (the loaded A channel is 0 for formats
    that don't support it).  This may or may not be the same format as
    the video mode selected, so it may be necessary to write
    conversion functions to convert between the pixel format used by
    these functions and the pixel format of the display.</para>
  </sect2>

  <sect2 id="pmodelib-intro-graphics-video">
   <title>Video Graphics</title>

   <para>In real mode, we used BIOS Interrupt 10h to set graphics
    modes and segment B800h or A000h to address the graphics memory.
    In protected mode, we'll use <link
     linkend="pmodelib-ref-vbeaf">PModeLib functions</link> to both
    set the graphics mode and copy image data to the screen.  In fact,
    there isn't a way to directly access the graphics memory, so it's
    necessary to do double-buffering (although it's possible to
    double-buffer just regions of the screen rather than the entire
    display area).</para>

   <para>There's another issue with the graphics drivers we use: they
    require that the keyboard be remapped to a different IRQ and I/O
    port than the normal keyboard interface (which is at IRQ 1, I/O
    port 60h).  The <link
     linkend="pmodelib-ref-initgraphics"><function>InitGraphics()</function></link> 
    function returns the remapped values in the variables whose
    addresses are passed to it.  This will be clearer when we look at
    the code.</para>

   <para>Under Windows 2000/XP, we need to load a special graphics
    driver called <command>EX291</command> before running any program
    that uses PModeLib graphics.  Just enter
    <userinput>EX291</userinput> at the command prompt before running
    the program to load the driver.  Currently, PModeLib graphics
    <emphasis>require</emphasis> Windows 2000 or Windows XP, they
    cannot work on Windows 98 or Windows ME.</para>
  </sect2>

  <sect2 id="pmodelib-intro-graphics-screen-image">
   <title>Displaying an Image on the Screen</title>

   <para>Okay, here's the complete code to a simple program that loads
    a 640x480 image named <filename>image.jpg</filename> and displays
    it on the 640x480 display.  Since this program uses PModeLib
    graphics, we'll need to load the <command>EX291</command> driver
    before running it on Windows 2000/XP.</para>

   <para>This program combines all of the concepts earlier in this
    chapter, except we're using a specialized image loading function
    instead of general file I/O to load the image.</para>

   <example id="pmodelib-intro-graphics-screen-image-example">
    <title>Displaying an Image</title>

    <programlisting>
%include "lib291.inc"

GLOBAL _main

imagesize equ 640*480*4          ; 640x480 image, 32 bits per pixel

SECTION .bss    ; Uninitialized data

imageoff        resd 1  ; Offset of the image data

doneflag        resb 1  ; =1 when we're ready to exit (set by KeyboardHandler)

kbINT   resb 1  ; keyboard interrupt number (standard = 9)
kbIRQ   resb 1  ; keyboard IRQ (standard = 1)
kbPort  resw 1  ; keyboard port (standard = 60h)

SECTION .data   ; Initialized data

imagefn db "image.jpg",0         ; image file to read (notice 0-terminated)

SECTION .text

KeyboardHandler
        ; Indicate that we're finished on any keypress
        ; If we wanted to check the key, we'd need to use [kbPort], not 60h.
        mov     byte [doneflag], 1

        ; Acknowledge interrupt to PIC.
        ; As the IRQ might be >=8 (a high IRQ), we may need to
        ;  out A0h, 20h, in addition to the normal out 20h, 20h.
        mov     al, 20h
        cmp     byte [kbIRQ], 8
        jb      .lowirq
        out     0A0h, al
.lowirq:
        out     20h, al

        xor     eax, eax         ; Don't chain to old handler
        ret
KeyboardHandler_end

_main
        push    esi              ; Save registers

        call    <xref linkend="pmodelib-ref-libinit">         ; You could use invoke here, too
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .initerror

        ; Allocate memory for image
        invoke  <xref linkend="pmodelib-ref-allocmem">, dword imagesize
        cmp     eax, -1          ; Check for error (-1 return value)
        je      near .error
        mov     [imageoff], eax  ; Save offset

        ; Load image
        invoke  <xref linkend="pmodelib-ref-loadjpg">, dword imagefn, dword [imageoff], dword 0, dword 0
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .error

        ; Initialize graphics (and find remapped keyboard info)
        invoke  <xref linkend="pmodelib-ref-initgraphics">, dword kbINT, dword kbIRQ, dword kbPort
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .error

        ; Lock up memory the handler will access
        invoke  <xref linkend="pmodelib-ref-lockarea">, ds, dword doneflag, dword 1
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .exitgraphics

        invoke  <xref linkend="pmodelib-ref-lockarea">, ds, dword kbIRQ, dword 1
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .exitgraphics

        ; Lock the interrupt handler itself.
        invoke  <xref linkend="pmodelib-ref-lockarea">, cs, dword KeyboardHandler, \
                           dword KeyboardHandler_end-KeyboardHandler
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .exitgraphics

        ; Install the keyboard handler
        movzx   eax, byte [kbINT]
        invoke  <xref linkend="pmodelib-ref-install-int">, dword eax, dword KeyboardHandler
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .exitgraphics

        ; Find 640x480x32 graphics mode, allowing driver-emulated modes
        invoke  <xref linkend="pmodelib-ref-findgraphicsmode">, word 640, word 480, word 32, dword 1
        cmp     ax, -1           ; Did we find a mode?  If not, exit.
        jne     near .uninstallkb

        ; Go into graphics mode (finally :)
        invoke  <xref linkend="pmodelib-ref-setgraphicsmode">, ax
        test    eax, eax         ; Check for error (nonzero return value)
        jnz     near .uninstallkb

        ; Copy the image to the screen
        invoke  <xref linkend="pmodelib-ref-copytoscreen">, dword [imageoff], dword 640*4, \
                               dword 0, dword 0, dword 640, dword 480, dword 0, dword 0

        ; Wait for a keypress
.loop:
        cmp     byte [doneflag], 0
        jz      .loop

        ; Get out of graphics mode
        invoke  <xref linkend="pmodelib-ref-unsetgraphicsmode">

.uninstallkb:
        ; Uninstall the keyboard handler
        movzx   eax, byte [kbINT]
        invoke  <xref linkend="pmodelib-ref-remove-int">, dword eax

.exitgraphics:
        ; Shut down graphics driver
        invoke  <xref linkend="pmodelib-ref-exitgraphics">

.error:
        call    <xref linkend="pmodelib-ref-libexit">
.initerror:
        pop     esi              ; Restore registers
        ret                      ; Return to DOS</programlisting>
   </example>
  </sect2>
 </sect1>
</chapter>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-indent-step: 1
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
