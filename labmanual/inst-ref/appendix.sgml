<!--
     ECE 291 Lab Manual

     $Id: appendix.sgml,v 1.7 2001/09/15 04:44:26 pete Exp $
-->

<appendix id="inst-ref">
 <appendixinfo>
  <authorgroup>
   <author>
    <firstname>Julian</firstname>
    <surname>Hall</surname>
    <affiliation>
     <address><email>jules@acris.co.uk</email></address>
    </affiliation>
    <contrib>Originally written by </contrib>
   </author>

   <author>
    <firstname>Simon</firstname>
    <surname>Tantham</surname>
    <affiliation>
     <address><email>anakin@pobox.com</email></address>
    </affiliation>
   </author>
  </authorgroup>
<![%inst-ref.now3d;[
  <authorgroup>
   <author>
    <firstname>Frank</firstname>
    <surname>Kotler</surname>
    <affiliation>
     <address><email>fbkotler@nettaxi.com</email></address>
    </affiliation>
    <contrib><![%inst-ref.katmai;[<quote>KATMAI</quote> and
     ]]><quote>3DNow!</quote> instructions added by </contrib>
 </author>

   <author>
   <firstname>Stephen</firstname>
   <surname>Silver</surname>
   <affiliation>
    <address><email>nasm@argentum.freeserve.co.uk</email></address>
   </affiliation>
   </author>
  </authorgroup>
]]> </appendixinfo>

 <title>Intel x86 Instruction Reference</title>

 <para>This appendix provides a incomplete list of the machine
  instructions which NASM will assemble, and a short description of
  the function of each one.  SSE, SSE2, 3DNow!, Cyrix MMX, and some
  undocumented instructions are not included in this list due to space
  concerns in the lab manual.  See the NASM manual for a complete
  list of all the instructions NASM will assemble.</para>

 <para>It is not intended to be exhaustive documentation on the fine
  details of the instructions' function, such as which exceptions they
  can trigger: for such documentation, you should go to Intel's Web
  site, <ulink
   url="http://www.intel.com/">http://www.intel.com/</ulink>.</para>

 <para>Instead, this appendix is intended primarily to provide
  documentation on the way the instructions may be used within NASM.
  For example, looking up <literal>LOOP</literal> will tell you that
  NASM allows &reg.cx; or &reg.ecx; to be specified as an optional
  second argument to the <literal>LOOP</literal> instruction, to
  enforce which of the two possible counter registers should be used
  if the default is not the one desired.</para>

 <para>The instructions are not quite listed in alphabetical order,
  since groups of instructions with similar functions are lumped
  together in the same entry.  Most of them don't move very far from
  their alphabetic position because of this.</para>

 <sect1 id="inst-ref-operand-spec">
  <title>Key to Operand Specifications</title>

  <para>The instruction descriptions in this appendix specify their
   operands using the following notation:</para>

  <variablelist>
   <varlistentry>
    <term>Registers</term>

    <indexterm>
     <primary>general purpose register</primary>
    </indexterm>

    <listitem>
     <para><literal>reg8</literal> denotes an 8-bit general purpose
      register, <literal>reg16</literal> denotes a 16-bit general
      purpose register, and <literal>reg32</literal> a 32-bit one.
      <literal>fpureg</literal> denotes one of the eight FPU stack
      registers, <literal>mmxreg</literal> denotes one of the eight
      64-bit MMX registers, and <literal>segreg</literal> denotes a
      segment register. In addition, some registers (such as &reg.al;,
      &reg.dx; or &reg.ecx;) may be specified explicitly.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Immediate operands</term>

    <indexterm>
     <primary>immediate operand</primary>
    </indexterm>

    <listitem>
     <para><literal>imm</literal> denotes a generic immediate operand.
      <literal>imm8</literal>, <literal>imm16</literal> and
      <literal>imm32</literal> are used when the operand is intended
      to be a specific size. For some of these instructions, NASM
      needs an explicit specifier: for example, <literal>ADD
       ESP,16</literal> could be interpreted as either <literal>ADD
       r/m32,imm32</literal> or <literal>ADD r/m32,imm8</literal>.
      NASM chooses the former by default, and so you must specify
      <literal>ADD ESP,BYTE 16</literal> for the latter.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Memory references</term>

    <indexterm>
     <primary>memory reference</primary>
    </indexterm>

    <listitem>
     <para><literal>mem</literal> denotes a generic memory reference;
      <literal>mem8</literal>, <literal>mem16</literal>,
      <literal>mem32</literal>, <literal>mem64</literal> and
      <literal>mem80</literal> are used when the operand needs to be a
      specific size.  Again, a specifier is needed in some cases:
      <literal>DEC [address]</literal> is ambiguous and will be
      rejected by NASM.  You must specify <literal>DEC BYTE
       [address]</literal>, <literal>DEC WORD [address]</literal> or
      <literal>DEC DWORD [address]</literal> instead.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Restricted memory references</term>

    <indexterm>
     <primary>Restricted memory references</primary>
    </indexterm>

    <listitem>
     <para>One form of the <literal>MOV</literal> instruction allows a
      memory address to be specified <emphasis>without</emphasis>
      allowing the normal range of register combinations and effective
      address processing. This is denoted by
      <literal>memoffs8</literal>, <literal>memoffs16</literal> and
      <literal>memoffs32</literal>.</para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>Register or memory choices</term>

    <listitem>
     <para>Many instructions can accept either a register
      <emphasis>or</emphasis> a memory reference as an operand.
      <literal>r/m8</literal> is a shorthand for
      <literal>reg8/mem8</literal>; similarly <literal>r/m16</literal>
      and <literal>r/m32</literal>.  <literal>r/m64</literal> is
      MMX-related, and is a shorthand for
      <literal>mmxreg/mem64</literal>.</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 id="inst-ref-opcode-desc">
  <title>Key to Opcode Descriptions</title>

  <indexterm>
   <primary>ModR/M byte</primary>
  </indexterm>

  <indexterm>
   <primary>SIB byte</primary>
  </indexterm>

  <para>This appendix also provides the opcodes which NASM will
   generate for each form of each instruction. The opcodes are listed
   in the following way:</para>

  <itemizedlist>
   <listitem>
    <para>A hex number, such as <literal>3F</literal>, indicates a
     fixed byte containing that number.</para>
   </listitem>

   <listitem>
    <para>A hex number followed by <literal>+r</literal>, such as
     <literal>C8+r</literal>, indicates that one of the operands to
     the instruction is a register, and the `register value' of that
     register should be added to the hex number to produce the
     generated byte. For example, &reg.edx; has register value 2, so
     the code <literal>C8+r</literal>, when the register operand is
     &reg.edx;, generates the hex byte <literal>CA</literal>. Register
     values for specific registers are given in <xref
      linkend="inst-ref-opcode-desc-reg-values">.</para>
   </listitem>

   <listitem>
    <para>A hex number followed by <literal>+cc</literal>, such as
     <literal>40+cc</literal>, indicates that the instruction name has
     a condition code suffix, and the numeric representation of the
     condition code should be added to the hex number to produce the
     generated byte. For example, the code <literal>40+cc</literal>,
     when the instruction contains the <literal>NE</literal>
     condition, generates the hex byte <literal>45</literal>.
     Condition codes and their numeric representations are given in
     <xref
      linkend="inst-ref-opcode-desc-cond-codes">.</para>
   </listitem>

   <listitem>
    <para>A slash followed by a digit, such as <literal>/2</literal>,
     indicates that one of the operands to the instruction is a memory
     address or register (denoted <literal>mem</literal> or
     <literal>r/m</literal>, with an optional size). This is to be
     encoded as an effective address, with a ModR/M byte, an optional
     SIB byte, and an optional displacement, and the spare (register)
     field of the ModR/M byte should be the digit given (which will be
     from 0 to 7, so it fits in three bits). The encoding of effective
     addresses is given in <xref
      linkend="inst-ref-opcode-desc-eff-addr">.</para>
   </listitem>

   <listitem>
    <para>The code <literal>/r</literal> combines the above two: it
     indicates that one of the operands is a memory address or
     <literal>r/m</literal>, and another is a register, and that an
     effective address should be generated with the spare (register)
     field in the ModR/M byte being equal to the <quote>register
      value</quote> of the register operand. The encoding of effective
     addresses is given in <xref
      linkend="inst-ref-opcode-desc-eff-addr">; register values are
     given in <xref linkend="inst-ref-opcode-desc-reg-values">.</para>
   </listitem>

   <listitem>
    <para>The codes <literal>ib</literal>, <literal>iw</literal> and
     <literal>id</literal> indicate that one of the operands to the
     instruction is an immediate value, and that this is to be encoded
     as a byte, little-endian word or little-endian doubleword
     respectively.</para>
   </listitem>

   <listitem>
    <para>The codes <literal>rb</literal>, <literal>rw</literal> and
     <literal>rd</literal> indicate that one of the operands to the
     instruction is an immediate value, and that the
     <emphasis>difference</emphasis> between this value and the
     address of the end of the instruction is to be encoded as a byte,
     word or doubleword respectively. Where the form
     <literal>rw/rd</literal> appears, it indicates that either
     <literal>rw</literal> or <literal>rd</literal> should be used
     according to whether assembly is being performed in <literal>BITS
      16</literal> or <literal>BITS 32</literal> state
     respectively.</para>
   </listitem>

   <listitem>
    <para>The codes <literal>ow</literal> and <literal>od</literal>
     indicate that one of the operands to the instruction is a
     reference to the contents of a memory address specified as an
     immediate value: this encoding is used in some forms of the
     <literal>MOV</literal> instruction in place of the standard
     effective-address mechanism. The displacement is encoded as a
     word or doubleword. Again, <literal>ow/od</literal> denotes that
     <literal>ow</literal> or <literal>od</literal> should be chosen
     according to the <literal>BITS</literal> setting.</para>
   </listitem>

   <listitem>
    <para>The codes <literal>o16</literal> and <literal>o32</literal>
     indicate that the given form of the instruction should be
     assembled with operand size 16 or 32 bits. In other words,
     <literal>o16</literal> indicates a <literal>66</literal> prefix
     in <literal>BITS 32</literal> state, but generates no code in
     <literal>BITS 16</literal> state; and <literal>o32</literal>
     indicates a <literal>66</literal> prefix in <literal>BITS
      16</literal> state but generates nothing in <literal>BITS
      32</literal>.</para>
   </listitem>

   <listitem>
    <para>The codes <literal>a16</literal> and <literal>a32</literal>,
     similarly to <literal>o16</literal> and <literal>o32</literal>,
     indicate the address size of the given form of the instruction.
     Where this does not match the <literal>BITS</literal> setting, a
     <literal>67</literal> prefix is required.</para>
   </listitem>
  </itemizedlist>

  <sect2 id="inst-ref-opcode-desc-reg-values">
   <title>Register Values</title>

   <para>Where an instruction requires a register value, it is already
    implicit in the encoding of the rest of the instruction what type
    of register is intended: an 8-bit general-purpose register, a
    segment register, a debug register, an MMX register, or whatever.
    Therefore there is no problem with registers of different types
    sharing an encoding value.</para>

   <para>The encodings for the various classes of register are:</para>

   <variablelist>
    <varlistentry>
     <term>8-bit general registers</term>

     <listitem>
      <para>&reg.al; is 0, &reg.cl; is 1, &reg.dl; is 2, &reg.bl; is
       3, &reg.ah; is 4, &reg.ch; is 5, &reg.dh; is 6, and &reg.bh; is
       7.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>16-bit general registers</term>

     <listitem>
      <para>&reg.ax; is 0, &reg.cx; is 1, &reg.dx; is 2, &reg.bx; is
       3, &reg.sp; is 4, &reg.bp; is 5, &reg.si; is 6, and &reg.di; is
       7.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>32-bit general registers</term>

     <listitem>
      <para>&reg.eax; is 0, &reg.ecx; is 1, &reg.edx; is 2, &reg.ebx;
       is 3, &reg.esp; is 4, &reg.ebp; is 5, &reg.esi; is 6, and
       &reg.edi; is 7.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Segment registers</term>

     <indexterm>
      <primary>Segment registers</primary>
     </indexterm>

     <listitem>
      <para>&reg.es; is 0, &reg.cs; is 1, &reg.ss; is 2, &reg.ds; is
       3, &reg.fs; is 4, and &reg.gs; is 5.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Floating-point registers</term>

     <indexterm>
      <primary>floating-point</primary>
      <secondary>registers</secondary>
     </indexterm>

     <listitem>
      <para>&reg.st0; is 0, &reg.st1; is 1, &reg.st2; is 2, &reg.st3;
       is 3, &reg.st4; is 4, &reg.st5; is 5, &reg.st6; is 6, and
       &reg.st7; is 7.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>64-bit MMX registers</term>

     <indexterm>
      <primary>MMX registers</primary>
     </indexterm>

     <listitem>
      <para>&reg.mm0; is 0, &reg.mm1; is 1, &reg.mm2; is 2, &reg.mm3;
       is 3, &reg.mm4; is 4, &reg.mm5; is 5, &reg.mm6; is 6, and
       &reg.mm7; is 7.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Control registers</term>

     <indexterm>
      <primary>Control registers</primary>
     </indexterm>

     <listitem>
      <para>&reg.cr0; is 0, &reg.cr2; is 2, &reg.cr3; is 3, and
       &reg.cr4; is 4.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Debug registers</term>

     <indexterm>
      <primary>Debug registers</primary>
     </indexterm>

     <listitem>
      <para>&reg.dr0; is 0, &reg.dr1; is 1, &reg.dr2; is 2, &reg.dr3;
       is 3, &reg.dr6; is 6, and &reg.dr7; is 7.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Test registers</term>

     <indexterm>
      <primary>Test registers</primary>
     </indexterm>

     <listitem>
      <para>&reg.tr3; is 3, &reg.tr4; is 4, &reg.tr5; is 5, &reg.tr6;
       is 6, and &reg.tr7; is 7.</para>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>(Note that wherever a register name contains a number, that
    number is also the register value for that register.)</para>
  </sect2>

  <sect2 id="inst-ref-opcode-desc-cond-codes">
   <title>Condition Codes</title>

   <indexterm>
    <primary>Condition Codes</primary>
   </indexterm>

   <para>The available condition codes are given here, along with
    their numeric representations as part of opcodes. Many of these
    condition codes have synonyms, so several will be listed at a
    time.</para>

   <para>In the following descriptions, the word
    <quote>either,</quote> when applied to two possible trigger
    conditions, is used to mean <quote>either or both</quote>. If
    <quote>either but not both</quote> is meant, the phrase
    <quote>exactly one of</quote> is used.</para>

   <itemizedlist>
    <listitem>
     <para><literal>O</literal> is 0 (trigger if the overflow flag is
      set); <literal>NO</literal> is 1.</para>
    </listitem>

    <listitem>
     <para><literal>B</literal>, <literal>C</literal> and
      <literal>NAE</literal> are 2 (trigger if the carry flag is set);
      <literal>AE</literal>, <literal>NB</literal> and
      <literal>NC</literal> are 3.</para>
    </listitem>

    <listitem>
     <para><literal>E</literal> and <literal>Z</literal> are 4
      (trigger if the zero flag is set); <literal>NE</literal> and
      <literal>NZ</literal> are 5.</para>
    </listitem>

    <listitem>
     <para><literal>BE</literal> and <literal>NA</literal> are 6
      (trigger if either of the carry or zero flags is set);
      <literal>A</literal> and <literal>NBE</literal> are 7.</para>
    </listitem>

    <listitem>
     <para><literal>S</literal> is 8 (trigger if the sign flag is
      set); <literal>NS</literal> is 9.</para>
    </listitem>

    <listitem>
     <para><literal>P</literal> and <literal>PE</literal> are 10
      (trigger if the parity flag is set); <literal>NP</literal> and
      <literal>PO</literal> are 11.</para>
    </listitem>

    <listitem>
     <para><literal>L</literal> and <literal>NGE</literal> are 12
      (trigger if exactly one of the sign and overflow flags is set);
      <literal>GE</literal> and <literal>NL</literal> are 13.</para>
    </listitem>

    <listitem>
     <para><literal>LE</literal> and <literal>NG</literal> are 14
      (trigger if either the zero flag is set, or exactly one of the
      sign and overflow flags is set); <literal>G</literal> and
      <literal>NLE</literal> are 15.</para>
    </listitem>
   </itemizedlist>

   <para>Note that in all cases, the sense of a condition code may be
    reversed by changing the low bit of the numeric
    representation.</para>
  </sect2>

  <sect2 id="inst-ref-opcode-desc-eff-addr">
   <title>Effective Address Encoding: ModR/M and SIB</title>

   <indexterm significance="preferred">
    <primary>ModR/M byte</primary>
   </indexterm>

   <indexterm significance="preferred">
    <primary>SIB byte</primary>
   </indexterm>

   <indexterm significance="preferred">
    <primary>effective addresses</primary>
   </indexterm>

   <para>An effective address is encoded in up to three parts: a
    ModR/M byte, an optional SIB byte, and an optional byte, word or
    doubleword displacement field.</para>

   <para>The ModR/M byte consists of three fields: the
    <literal>mod</literal> field, ranging from 0 to 3, in the upper
    two bits of the byte, the <literal>r/m</literal> field, ranging
    from 0 to 7, in the lower three bits, and the spare (register)
    field in the middle (bit 3 to bit 5). The spare field is not
    relevant to the effective address being encoded, and either
    contains an extension to the instruction opcode or the register
    value of another operand.</para>

   <para>The ModR/M system can be used to encode a direct register
    reference rather than a memory access. This is always done by
    setting the <literal>mod</literal> field to 3 and the
    <literal>r/m</literal> field to the register value of the register
    in question (it must be a general-purpose register, and the size
    of the register must already be implicit in the encoding of the
    rest of the instruction).  In this case, the SIB byte and
    displacement field are both absent.</para>

   <para>In 16-bit addressing mode (either <literal>BITS 16</literal>
    with no <literal>67</literal> prefix, or <literal>BITS
     32</literal> with a <literal>67</literal> prefix), the SIB byte
    is never used. The general rules for <literal>mod</literal> and
    <literal>r/m</literal> (there is an exception, given below)
    are:</para>

   <itemizedlist>
    <listitem>
     <para>The <literal>mod</literal> field gives the length of the
      displacement field: 0 means no displacement, 1 means one byte,
      and 2 means two bytes.</para>
    </listitem>

    <listitem>
     <para>The <literal>r/m</literal> field encodes the combination of
      registers to be added to the displacement to give the accessed
      address: 0 means <literal>&reg.bx;+&reg.si;</literal>, 1 means
      <literal>&reg.bx;+&reg.di;</literal>, 2 means
      <literal>&reg.bp;+&reg.si;</literal>, 3 means
      <literal>&reg.bp;+&reg.di;</literal>, 4 means &reg.si; only,
      5 means &reg.di; only, 6 means &reg.bp; only, and 7 means
      &reg.bx; only.</para>
    </listitem>
   </itemizedlist>

   <para>However, there is a special case:</para>

   <itemizedlist>
    <listitem>
     <para>If <literal>mod</literal> is 0 and <literal>r/m</literal>
      is 6, the effective address encoded is not
      <literal>[&reg.bp;]</literal> as the above rules would suggest,
      but instead <literal>[disp16]</literal>: the displacement field
      is present and is two bytes long, and no registers are added to
      the displacement.</para>
    </listitem>
   </itemizedlist>

   <para>Therefore the effective address <literal>[&reg.bp;]</literal>
    cannot be encoded as efficiently as <literal>[&reg.bx;]</literal>;
    so if you code <literal>[&reg.bp;]</literal> in a program, NASM
    adds a notional 8-bit zero displacement, and sets
    <literal>mod</literal> to 1, <literal>r/m</literal> to 6, and the
    one-byte displacement field to 0.</para>

   <para>In 32-bit addressing mode (either <literal>BITS 16</literal>
    with a <literal>67</literal> prefix, or <literal>BITS 32</literal>
    with no <literal>67</literal> prefix) the general rules (again,
    there are exceptions) for <literal>mod</literal> and
    <literal>r/m</literal> are:</para>

   <itemizedlist>
    <listitem>
     <para>The <literal>mod</literal> field gives the length of the
      displacement field: 0 means no displacement, 1 means one byte,
      and 2 means four bytes.</para>
    </listitem>

    <listitem>
     <para>If only one register is to be added to the displacement,
      and it is not &reg.esp;, the <literal>r/m</literal> field gives
      its register value, and the SIB byte is absent. If the
      <literal>r/m</literal> field is 4 (which would encode
      &reg.esp;), the SIB byte is present and gives the combination
      and scaling of registers to be added to the displacement.</para>
    </listitem>
   </itemizedlist>

   <para>If the SIB byte is present, it describes the combination of
    registers (an optional base register, and an optional index
    register scaled by multiplication by 1, 2, 4 or 8) to be added to
    the displacement. The SIB byte is divided into the
    <literal>scale</literal> field, in the top two bits, the
    <literal>index</literal> field in the next three, and the
    <literal>base</literal> field in the bottom three. The general
    rules are:</para>

   <itemizedlist>
    <listitem>
     <para>The <literal>base</literal> field encodes the register
      value of the base register.</para>
    </listitem>

    <listitem>
     <para>The <literal>index</literal> field encodes the register
      value of the index register, unless it is 4, in which case no
      index register is used (so &reg.esp; cannot be used as an index
      register).</para>
    </listitem>

    <listitem>
     <para>The <literal>scale</literal> field encodes the multiplier
      by which the index register is scaled before adding it to the
      base and displacement: 0 encodes a multiplier of 1, 1 encodes 2,
      2 encodes 4 and 3 encodes 8.</para>
    </listitem>
   </itemizedlist>

   <para>The exceptions to the 32-bit encoding rules are:</para>

   <itemizedlist>
    <listitem>
     <para>If <literal>mod</literal> is 0 and <literal>r/m</literal>
      is 5, the effective address encoded is not
      <literal>[&reg.ebp;]</literal> as the above rules would suggest,
      but instead <literal>[disp32]</literal>: the displacement field
      is present and is four bytes long, and no registers are added to
      the displacement.</para>
    </listitem>

    <listitem>
     <para>If <literal>mod</literal> is 0, <literal>r/m</literal> is 4
      (meaning the SIB byte is present) and <literal>base</literal> is
      4, the effective address encoded is not
      <literal>[&reg.ebp;+index]</literal> as the above rules would
      suggest, but instead <literal>[disp32+index]</literal>: the
      displacement field is present and is four bytes long, and there
      is no base register (but the index register is still processed
      in the normal way).</para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>

 <sect1 id="inst-ref-flags">
  <title>Key to Instruction Flags</title>

  <para>Given along with each instruction in this appendix is a set of
   flags, denoting the type of the instruction. The types are as
   follows:</para>

  <itemizedlist>
   <listitem>
    <para><literal>8086</literal>, <literal>186</literal>,
     <literal>286</literal>, <literal>386</literal>,
     <literal>486</literal>, <literal>PENT</literal> and
     <literal>P6</literal> denote the lowest processor type that
     supports the instruction. Most instructions run on all processors
     above the given type; those that do not are documented. The
     Pentium II contains no additional instructions beyond the P6
     (Pentium Pro); from the point of view of its instruction set, it
     can be thought of as a P6 with MMX capability.</para>
   </listitem>
<![%inst-ref.cyrix;[
   <listitem>
    <para><literal>CYRIX</literal> indicates that the instruction is
     specific to Cyrix processors, for example the extra MMX
     instructions in the Cyrix extended MMX instruction set.</para>
   </listitem>
]]>
   <listitem>
    <para><literal>FPU</literal> indicates that the instruction is a
     floating-point one, and will only run on machines with a
     coprocessor (automatically including 486DX, Pentium and
     above).</para>
   </listitem>

   <listitem>
    <para><literal>MMX</literal> indicates that the instruction is an
     MMX one, and will run on MMX-capable Pentium processors and the
     Pentium II.</para>
   </listitem>

   <listitem>
    <para><literal>PRIV</literal> indicates that the instruction is a
     protected-mode management instruction. Many of these may only be
     used in protected mode, or only at privilege level zero.</para>
   </listitem>

   <listitem>
    <para><literal>UNDOC</literal> indicates that the instruction is
     an undocumented one, and not part of the official Intel
     Architecture; it may or may not be supported on any given
     machine.</para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 id="inst-ref-aaa">
  <title><literal>AAA</literal>, <literal>AAS</literal>,
   <literal>AAM</literal>, <literal>AAD</literal>: ASCII
   Adjustments</title>

  <indexterm>
   <primary><literal>AAA</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>AAS</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>AAM</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>AAD</literal></primary>
  </indexterm>

  <screen>AAA                           ; 37                   [8086]

AAS                           ; 3F                   [8086]

AAD                           ; D5 0A                [8086]
AAD imm                       ; D5 ib                [8086]

AAM                           ; D4 0A                [8086]
AAM imm                       ; D4 ib                [8086]</screen>

  <para>These instructions are used in conjunction with the add,
   subtract, multiply and divide instructions to perform binary-coded
   decimal arithmetic in <emphasis>unpacked</emphasis> (one BCD digit
   per byte - easy to translate to and from ASCII, hence the
   instruction names) form. There are also packed BCD instructions
   <literal>DAA</literal> and <literal>DAS</literal>: see
   <xref linkend="inst-ref-daa">.</para>

  <para><literal>AAA</literal> should be used after a one-byte
   <literal>ADD</literal> instruction whose destination was the
   &reg.al; register: by means of examining the value in the low
   nibble of &reg.al; and also the auxiliary carry flag &flag.af;, it
   determines whether the addition has overflowed, and adjusts it (and
   sets the carry flag) if so. You can add long BCD strings together
   by doing <literal>ADD</literal>/<literal>AAA</literal> on the low
   digits, then doing <literal>ADC</literal>/<literal>AAA</literal> on
   each subsequent digit.</para>

  <para><literal>AAS</literal> works similarly to
   <literal>AAA</literal>, but is for use after <literal>SUB</literal>
   instructions rather than <literal>ADD</literal>.</para>

  <para><literal>AAM</literal> is for use after you have multiplied
   two decimal digits together and left the result in &reg.al;: it
   divides &reg.al; by ten and stores the quotient in &reg.ah;,
   leaving the remainder in &reg.al;. The divisor 10 can be changed by
   specifying an operand to the instruction: a particularly handy use
   of this is <literal>AAM 16</literal>, causing the two nibbles in
   &reg.al; to be separated into &reg.ah; and &reg.al;.</para>

  <para><literal>AAD</literal> performs the inverse operation to
   <literal>AAM</literal>: it multiplies &reg.ah; by ten, adds it to
   &reg.al;, and sets &reg.ah; to zero. Again, the multiplier 10 can
   be changed.</para>
 </sect1>

 <sect1 id="inst-ref-adc">
  <title><literal>ADC</literal>: Add with Carry</title>

  <indexterm>
   <primary><literal>ADC</literal></primary>
  </indexterm>

  <screen>ADC r/m8,reg8                 ; 10 /r                [8086]
ADC r/m16,reg16               ; o16 11 /r            [8086]
ADC r/m32,reg32               ; o32 11 /r            [386]

ADC reg8,r/m8                 ; 12 /r                [8086]
ADC reg16,r/m16               ; o16 13 /r            [8086]
ADC reg32,r/m32               ; o32 13 /r            [386]

ADC r/m8,imm8                 ; 80 /2 ib             [8086]
ADC r/m16,imm16               ; o16 81 /2 iw         [8086]
ADC r/m32,imm32               ; o32 81 /2 id         [386]

ADC r/m16,imm8                ; o16 83 /2 ib         [8086]
ADC r/m32,imm8                ; o32 83 /2 ib         [386]

ADC AL,imm8                   ; 14 ib                [8086]
ADC AX,imm16                  ; o16 15 iw            [8086]
ADC EAX,imm32                 ; o32 15 id            [386]</screen>

  <para><literal>ADC</literal> performs integer addition: it adds its
   two operands together, plus the value of the carry flag, and leaves
   the result in its destination (first) operand. The flags are set
   according to the result of the operation: in particular, the carry
   flag is affected and can be used by a subsequent
   <literal>ADC</literal> instruction.</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>

  <para>To add two numbers without also adding the contents of the
   carry flag, use <literal>ADD</literal> (<xref
    linkend="inst-ref-add">).</para>
 </sect1>

 <sect1 id="inst-ref-add">
  <title><literal>ADD</literal>: Add Integers</title>

  <indexterm>
   <primary><literal>ADD</literal></primary>
  </indexterm>

  <screen>ADD r/m8,reg8                 ; 00 /r                [8086]
ADD r/m16,reg16               ; o16 01 /r            [8086]
ADD r/m32,reg32               ; o32 01 /r            [386]

ADD reg8,r/m8                 ; 02 /r                [8086]
ADD reg16,r/m16               ; o16 03 /r            [8086]
ADD reg32,r/m32               ; o32 03 /r            [386]

ADD r/m8,imm8                 ; 80 /0 ib             [8086]
ADD r/m16,imm16               ; o16 81 /0 iw         [8086]
ADD r/m32,imm32               ; o32 81 /0 id         [386]

ADD r/m16,imm8                ; o16 83 /0 ib         [8086]
ADD r/m32,imm8                ; o32 83 /0 ib         [386]

ADD AL,imm8                   ; 04 ib                [8086]
ADD AX,imm16                  ; o16 05 iw            [8086]
ADD EAX,imm32                 ; o32 05 id            [386]</screen>

  <para><literal>ADD</literal> performs integer addition: it adds its
   two operands together, and leaves the result in its destination
   (first) operand. The flags are set according to the result of the
   operation: in particular, the carry flag is affected and can be
   used by a subsequent <literal>ADC</literal> instruction (<xref
    linkend="inst-ref-adc">).</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>
 </sect1>
<![%inst-ref.katmai;[
 <sect1 id="inst-ref-addps">
  <title><literal>ADDPS</literal>: Packed Single FP ADD</title>

  <indexterm>
   <primary><literal>ADDPS</literal></primary>
  </indexterm>

  <screen>ADDPS xmmreg,mem128           ; 0f 58 /r     [KATMAI,SSE]
ADDPS xmmreg,xmmreg           ; 0f 58 /r     [KATMAI,SSE]</screen>

  <para><literal>ADDPS</literal> performs addition on each of four
   packed SP FP number items dst(0-31):=dst(0-31)+src(0-31),
   ..(63-32), etc.</para>
 </sect1>

 <sect1 id="inst-ref-addss">
  <title><literal>ADDSS</literal>: Scalar Single FP ADD</title>

  <indexterm>
   <primary><literal>ADDSS</literal></primary>
  </indexterm>

  <screen>ADDSS xmmreg,mem128           ; f3 0f 58 /r  [KATMAI,SSE]
ADDSS xmmreg,xmmreg           ; f3 0f 58 /r  [KATMAI,SSE]</screen>
 </sect1>
]]>
 <sect1 id="inst-ref-and">
  <title><literal>AND</literal>: Bitwise AND</title>

  <indexterm>
   <primary><literal>AND</literal></primary>
  </indexterm>

  <screen>AND r/m8,reg8                 ; 20 /r                [8086]
AND r/m16,reg16               ; o16 21 /r            [8086]
AND r/m32,reg32               ; o32 21 /r            [386]

AND reg8,r/m8                 ; 22 /r                [8086]
AND reg16,r/m16               ; o16 23 /r            [8086]
AND reg32,r/m32               ; o32 23 /r            [386]

AND r/m8,imm8                 ; 80 /4 ib             [8086]
AND r/m16,imm16               ; o16 81 /4 iw         [8086]
AND r/m32,imm32               ; o32 81 /4 id         [386]

AND r/m16,imm8                ; o16 83 /4 ib         [8086]
AND r/m32,imm8                ; o32 83 /4 ib         [386]

AND AL,imm8                   ; 24 ib                [8086]
AND AX,imm16                  ; o16 25 iw            [8086]
AND EAX,imm32                 ; o32 25 id            [386]</screen>

  <para><literal>AND</literal> performs a bitwise AND operation
   between its two operands (i.e. each bit of the result is 1 if and
   only if the corresponding bits of the two inputs were both 1), and
   stores the result in the destination (first) operand.</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>

  <para>The MMX instruction <literal>PAND</literal> (see <xref
    linkend="inst-ref-pand">) performs the same operation on the
   64-bit MMX registers.</para>
 </sect1>
<![%inst-ref.katmai;[
 <sect1 id="inst-ref-andnps">
  <title><literal>ANDNPS</literal>: Bitwise Logical AND NOT For Single
   FP</title>

  <indexterm>
   <primary><literal>ANDNPS</literal></primary>
  </indexterm>

  <screen>ANDNPS xmmreg,mem128          ; 0f 55 /r     [KATMAI,SSE]
ANDNPS xmmreg,xmmreg          ; 0f 55 /r     [KATMAI,SSE]</screen>
 </sect1>

 <sect1 id="inst-ref-andps">
  <title><literal>ANDPS</literal>: Bitwise Logical AND For Single
   FP</title>

  <indexterm>
   <primary><literal>ANDPS</literal></primary>
  </indexterm>

  <screen>ANDPS xmmreg,mem128           ; 0f 54 /r     [KATMAI,SSE]
ANDPS xmmreg,xmmreg           ; 0f 54 /r     [KATMAI,SSE]</screen>
 </sect1>
]]>
 <sect1 id="inst-ref-arpl">
  <title><literal>ARPL</literal>: Adjust RPL Field of Selector</title>

  <indexterm>
   <primary><literal>ARPL</literal></primary>
  </indexterm>

  <screen>ARPL r/m16,reg16              ; 63 /r                [286,PRIV]</screen>

  <para><literal>ARPL</literal> expects its two word operands to be
   segment selectors. It adjusts the RPL (requested privilege level -
   stored in the bottom two bits of the selector) field of the
   destination (first) operand to ensure that it is no less (i.e. no
   more privileged than) the RPL field of the source operand. The zero
   flag is set if and only if a change had to be made.</para>
 </sect1>

 <sect1 id="inst-ref-bound">
  <title><literal>BOUND</literal>: Check Array Index against
   Bounds</title>

  <indexterm>
   <primary><literal>BOUND</literal></primary>
  </indexterm>

  <screen>BOUND reg16,mem               ; o16 62 /r            [186]
BOUND reg32,mem               ; o32 62 /r            [386]</screen>

  <para><literal>BOUND</literal> expects its second operand to point
   to an area of memory containing two signed values of the same size
   as its first operand (i.e. two words for the 16-bit form; two
   doublewords for the 32-bit form). It performs two signed
   comparisons: if the value in the register passed as its first
   operand is less than the first of the in-memory values, or is
   greater than or equal to the second, it throws a BR exception.
   Otherwise, it does nothing.</para>
 </sect1>

 <sect1 id="inst-ref-bsf">
  <title><literal>BSF</literal>, <literal>BSR</literal>: Bit
   Scan</title>

  <indexterm>
   <primary><literal>BSF</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>BSR</literal></primary>
  </indexterm>

  <screen>BSF reg16,r/m16               ; o16 0F BC /r         [386]
BSF reg32,r/m32               ; o32 0F BC /r         [386]

BSR reg16,r/m16               ; o16 0F BD /r         [386]
BSR reg32,r/m32               ; o32 0F BD /r         [386]</screen>

  <para><literal>BSF</literal> searches for a set bit in its source
   (second) operand, starting from the bottom, and if it finds one,
   stores the index in its destination (first) operand. If no set bit
   is found, the contents of the destination operand are
   undefined.</para>

  <para><literal>BSR</literal> performs the same function, but
   searches from the top instead, so it finds the most significant set
   bit.</para>

  <para>Bit indices are from 0 (least significant) to 15 or 31 (most
   significant).</para>
 </sect1>

 <sect1 id="inst-ref-bswap">
  <title><literal>BSWAP</literal>: Byte Swap</title>

  <indexterm>
   <primary><literal>BSWAP</literal></primary>
  </indexterm>

  <screen>BSWAP reg32                   ; o32 0F C8+r          [486]</screen>

  <para><literal>BSWAP</literal> swaps the order of the four bytes of
   a 32-bit register: bits 0-7 exchange places with bits 24-31, and
   bits 8-15 swap with bits 16-23. There is no explicit 16-bit
   equivalent: to byte-swap &reg.ax;, &reg.bx;, &reg.cx; or &reg.dx;,
   <literal>XCHG</literal> can be used (<xref
    linkend="inst-ref-xchg">).</para>
 </sect1>

 <sect1 id="inst-ref-bt">
  <title><literal>BT</literal>, <literal>BTC</literal>,
   <literal>BTR</literal>, <literal>BTS</literal>: Bit Test</title>

  <indexterm>
   <primary><literal>BT</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>BTC</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>BTR</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>BTS</literal></primary>
  </indexterm>

  <screen>BT r/m16,reg16                ; o16 0F A3 /r         [386]
BT r/m32,reg32                ; o32 0F A3 /r         [386]
BT r/m16,imm8                 ; o16 0F BA /4 ib      [386]
BT r/m32,imm8                 ; o32 0F BA /4 ib      [386]

BTC r/m16,reg16               ; o16 0F BB /r         [386]
BTC r/m32,reg32               ; o32 0F BB /r         [386]
BTC r/m16,imm8                ; o16 0F BA /7 ib      [386]
BTC r/m32,imm8                ; o32 0F BA /7 ib      [386]

BTR r/m16,reg16               ; o16 0F B3 /r         [386]
BTR r/m32,reg32               ; o32 0F B3 /r         [386]
BTR r/m16,imm8                ; o16 0F BA /6 ib      [386]
BTR r/m32,imm8                ; o32 0F BA /6 ib      [386]

BTS r/m16,reg16               ; o16 0F AB /r         [386]
BTS r/m32,reg32               ; o32 0F AB /r         [386]
BTS r/m16,imm                 ; o16 0F BA /5 ib      [386]
BTS r/m32,imm                 ; o32 0F BA /5 ib      [386]</screen>

  <para>These instructions all test one bit of their first operand,
   whose index is given by the second operand, and store the value of
   that bit into the carry flag.  Bit indices are from 0 (least
   significant) to 15 or 31 (most significant).</para>

  <para>In addition to storing the original value of the bit into the
   carry flag, <literal>BTR</literal> also resets (clears) the bit in
   the operand itself.  <literal>BTS</literal> sets the bit, and
   <literal>BTC</literal> complements the bit.  <literal>BT</literal>
   does not modify its operands.</para>

  <para>The bit offset should be no greater than the size of the
   operand.</para>
 </sect1>

 <sect1 id="inst-ref-call">
  <title><literal>CALL</literal>: Call Subroutine</title>

  <indexterm>
   <primary><literal>CALL</literal></primary>
  </indexterm>

  <screen>CALL imm                      ; E8 rw/rd             [8086]
CALL imm:imm16                ; o16 9A iw iw         [8086]
CALL imm:imm32                ; o32 9A id iw         [386]
CALL FAR mem16                ; o16 FF /3            [8086]
CALL FAR mem32                ; o32 FF /3            [386]
CALL r/m16                    ; o16 FF /2            [8086]
CALL r/m32                    ; o32 FF /2            [386]</screen>

  <para><literal>CALL</literal> calls a subroutine, by means of
   pushing the current instruction pointer (&reg.ip;) and optionally
   &reg.cs; as well on the stack, and then jumping to a given
   address.</para>

  <para>&reg.cs; is pushed as well as &reg.ip; if and only if the call
   is a far call, i.e. a destination segment address is specified in
   the instruction. The forms involving two colon-separated arguments
   are far calls; so are the <literal>CALL FAR mem</literal>
   forms.</para>

  <para>You can choose between the two immediate far call forms
   (<literal>CALL imm:imm</literal>) by the use of the
   <literal>WORD</literal> and <literal>DWORD</literal> keywords:
   <literal>CALL WORD 0x1234:0x5678</literal>) or <literal>CALL DWORD
    0x1234:0x56789abc</literal>.</para>

  <indexterm>
   <primary>far call</primary>
  </indexterm>

  <para>The <literal>CALL FAR mem</literal> forms execute a far call
   by loading the destination address out of memory. The address
   loaded consists of 16 or 32 bits of offset (depending on the
   operand size), and 16 bits of segment. The operand size may be
   overridden using <literal>CALL WORD FAR mem</literal> or
   <literal>CALL DWORD FAR mem</literal>.</para>

  <indexterm>
   <primary>near call</primary>
  </indexterm>

  <para>The <literal>CALL r/m</literal> forms execute a near call
   (within the same segment), loading the destination address out of
   memory or out of a register. The keyword <literal>NEAR</literal>
   may be specified, for clarity, in these forms, but is not
   necessary. Again, operand size can be overridden using
   <literal>CALL WORD mem</literal> or <literal>CALL DWORD
    mem</literal>.</para>

  <para>As a convenience, NASM does not require you to call a far
   procedure symbol by coding the cumbersome <literal>CALL SEG
    routine:routine</literal>, but instead allows the easier synonym
   <literal>CALL FAR routine</literal>.</para>

  <para>The <literal>CALL r/m</literal> forms given above are near
   calls; NASM will accept the <literal>NEAR</literal> keyword (e.g.
   <literal>CALL NEAR [address]</literal>), even though it is not
   strictly necessary.</para>
 </sect1>

 <sect1 id="inst-ref-cbw">
  <title><literal>CBW</literal>, <literal>CWD</literal>,
   <literal>CDQ</literal>, <literal>CWDE</literal>: Sign
   Extensions</title>

  <indexterm>
   <primary><literal>CBW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CWD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CDQ</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CWDE</literal></primary>
  </indexterm>

  <screen>CBW                           ; o16 98               [8086]
CWD                           ; o16 99               [8086]
CDQ                           ; o32 99               [386]
CWDE                          ; o32 98               [386]</screen>

  <para>All these instructions sign-extend a short value into a longer
   one, by replicating the top bit of the original value to fill the
   extended one.</para>

  <para><literal>CBW</literal> extends &reg.al; into &reg.ax; by
   repeating the top bit of &reg.al; in every bit of &reg.ah;.
   <literal>CWD</literal> extends &reg.ax; into
   <literal>&reg.dx;:&reg.ax;</literal> by repeating the top bit of
   &reg.ax; throughout &reg.dx;.  <literal>CWDE</literal> extends
   &reg.ax; into &reg.eax;, and <literal>CDQ</literal> extends
   &reg.eax; into <literal>&reg.edx;:&reg.eax;</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-clc">
  <title><literal>CLC</literal>, <literal>CLD</literal>,
   <literal>CLI</literal>, <literal>CLTS</literal>: Clear
   Flags</title>

  <indexterm>
   <primary><literal>CLC</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CLD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CLI</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CLTS</literal></primary>
  </indexterm>

  <screen>CLC                           ; F8                   [8086]
CLD                           ; FC                   [8086]
CLI                           ; FA                   [8086]
CLTS                          ; 0F 06                [286,PRIV]</screen>

  <para>These instructions clear various flags. <literal>CLC</literal>
   clears the carry flag; <literal>CLD</literal> clears the direction
   flag; <literal>CLI</literal> clears the interrupt flag (thus
   disabling interrupts); and <literal>CLTS</literal> clears the
   task-switched (&flag.ts;) flag in &reg.cr0;.</para>

  <para>To set the carry, direction, or interrupt flags, use the
   <literal>STC</literal>, <literal>STD</literal> and
   <literal>STI</literal> instructions (<xref
    linkend="inst-ref-stc">). To invert the carry flag, use
   <literal>CMC</literal> (<xref
    linkend="inst-ref-cmc">).</para>
 </sect1>

 <sect1 id="inst-ref-cmc">
  <title><literal>CMC</literal>: Complement Carry Flag</title>

  <indexterm>
   <primary><literal>CMC</literal></primary>
  </indexterm>

  <screen>CMC                           ; F5                   [8086]</screen>

  <para><literal>CMC</literal> changes the value of the carry flag: if
   it was 0, it sets it to 1, and vice versa.</para>
 </sect1>

 <sect1 id="inst-ref-cmovcc">
  <title><literal>CMOVcc</literal>: Conditional Move</title>

  <indexterm>
   <primary><literal>CMOVcc</literal></primary>
  </indexterm>

  <screen>CMOVcc reg16,r/m16            ; o16 0F 40+cc /r      [P6]
CMOVcc reg32,r/m32            ; o32 0F 40+cc /r      [P6]</screen>

  <para><literal>CMOV</literal> moves its source (second) operand into
   its destination (first) operand if the given condition code is
   satisfied; otherwise it does nothing.</para>

  <para>For a list of condition codes, see <xref
    linkend="inst-ref-opcode-desc-cond-codes">.</para>

  <para>Although the <literal>CMOV</literal> instructions are flagged
   <literal>P6</literal> above, they may not be supported by all
   Pentium Pro processors; the <literal>CPUID</literal> instruction
   (<xref linkend="inst-ref-cpuid">) will return a bit which indicates
   whether conditional moves are supported.</para>
 </sect1>

 <sect1 id="inst-ref-cmp">
  <title><literal>CMP</literal>: Compare Integers</title>

  <indexterm>
   <primary><literal>CMP</literal></primary>
  </indexterm>

  <screen>CMP r/m8,reg8                 ; 38 /r                [8086]
CMP r/m16,reg16               ; o16 39 /r            [8086]
CMP r/m32,reg32               ; o32 39 /r            [386]

CMP reg8,r/m8                 ; 3A /r                [8086]
CMP reg16,r/m16               ; o16 3B /r            [8086]
CMP reg32,r/m32               ; o32 3B /r            [386]

CMP r/m8,imm8                 ; 80 /0 ib             [8086]
CMP r/m16,imm16               ; o16 81 /0 iw         [8086]
CMP r/m32,imm32               ; o32 81 /0 id         [386]

CMP r/m16,imm8                ; o16 83 /0 ib         [8086]
CMP r/m32,imm8                ; o32 83 /0 ib         [386]

CMP AL,imm8                   ; 3C ib                [8086]
CMP AX,imm16                  ; o16 3D iw            [8086]
CMP EAX,imm32                 ; o32 3D id            [386]</screen>

  <para><literal>CMP</literal> performs a `mental' subtraction of its
   second operand from its first operand, and affects the flags as if
   the subtraction had taken place, but does not store the result of
   the subtraction anywhere.</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insCMPEQPS} \i\c{CMPEQPS}: Packed Single FP Compare (CMPPS)

\c CMPEQPS xmmreg,memory           ; 0f c2 /r ib [KATMAI,SSE] 
\c CMPEQPS xmmreg,xmmreg           ;             [KATMAI,SSE] 

\c{CMPPS} with condition set, re CMPPS.
s

\H{insCMPEQSS} \i\c{CMPEQSS}: Scalar Single FP Compare (CMPSS)

\c CMPEQSS xmmreg,memory           ; ??          [KATMAI,SSE] 
\c CMPEQSS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

\c{CMPSS} with condition set, re CMPPS.

\H{insCMPLEPS} \i\c{CMPLEPS}: Packed Single FP Compare (CMPPS)

\c CMPLEPS xmmreg,memory           ; ??          [KATMAI,SSE] 
\c CMPLEPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 


\H{insCMPLESS} \i\c{CMPLESS}: Scalar Single FP Compare (CMPSS)

\c CMPLESS xmmreg,memory           ; ??          [KATMAI,SSE] 
\c CMPLESS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 


\H{insCMPLTPS} \i\c{CMPLTPS}: Packed Single FP Compare (CMPPS)

\c CMPLTPS xmmreg,memory           ; ??          [KATMAI,SSE] 
\c CMPLTPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 


\H{insCMPLTSS} \i\c{CMPLTSS}: Scalar Single FP Compare (CMPSS)

\c CMPLTSS xmmreg,memory           ; ??          [KATMAI,SSE] 
\c CMPLTSS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 


\H{insCMPNEQPS} \i\c{CMPNEQPS}: Packed Single FP Compare (CMPPS)

\c CMPNEQPS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPNEQPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPNEQSS} \i\c{CMPNEQSS}: Scalar Single FP Compare (CMPSS)

\c CMPNEQSS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPNEQSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPNLEPS} \i\c{CMPNLEPS}: Packed Single FP Compare (CMPPS)

\c CMPNLEPS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPNLEPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPNLESS} \i\c{CMPNLESS}: Scalar Single FP Compare (CMPSS)

\c CMPNLESS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPNLESS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPNLTPS} \i\c{CMPNLTPS}: Packed Single FP Compare (CMPPS)

\c CMPNLTPS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPNLTPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPNLTSS} \i\c{CMPNLTSS}: Scalar Single FP Compare (CMPSS)

\c CMPNLTSS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPNLTSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPORDPS} \i\c{CMPORDPS}: Packed Single FP Compare (CMPPS)

\c CMPORDPS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPORDPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPORDSS} \i\c{CMPORDSS}: Scalar Single FP Compare (CMPSS)

\c CMPORDSS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPORDSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPPS} \i\c{CMPPS}: Packed Single FP Compare

\c CMPPS xmmreg,memory,immediate     ; ??    [KATMAI,SSE,SB,AR2] 
\c CMPPS xmmreg,xmmreg,immediate     ; ??    [KATMAI,SSE,SB,AR2] 

\c{CMP(cc)PS} and \c{CMP(cc)SS} conditions (cc):
EQ, LT, LE, UNORD, NEQ, NLT, NLE, ORD
]]>
 <sect1 id="inst-ref-cmpsb">
  <title><literal>CMPSB</literal>, <literal>CMPSW</literal>,
   <literal>CMPSD</literal>: Compare Strings</title>

  <indexterm>
   <primary><literal>CMPSB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CMPSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>CMPSD</literal></primary>
  </indexterm>

  <screen>CMPSB                         ; A6                   [8086]
CMPSW                         ; o16 A7               [8086]
CMPSD                         ; o32 A7               [386]</screen>

  <para><literal>CMPSB</literal> compares the byte at
   <literal>[&reg.ds;:&reg.si;]</literal> or
   <literal>[&reg.ds;:&reg.esi;]</literal> with the byte at
   <literal>[&reg.es;:&reg.di;]</literal> or
   <literal>[&reg.es;:&reg.edi;]</literal>, and sets the flags
   accordingly.  It then increments or decrements (depending on the
   direction flag: increments if the flag is clear, decrements if it
   is set) &reg.si; and &reg.di; (or &reg.esi; and &reg.edi;).</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The registers used are &reg.si; and &reg.di; if the address
   size is 16 bits, and &reg.esi; and &reg.edi; if it is 32 bits. If
   you need to use an address size not equal to the current
   <literal>BITS</literal> setting, you can use an explicit
   <literal>a16</literal> or <literal>a32</literal> prefix.</para>

  <para>The segment register used to load from
   <literal>[&reg.si;]</literal> or <literal>[&reg.esi;]</literal> can
   be overridden by using a segment register name as a prefix (for
   example, <literal>es cmpsb</literal>). The use of &reg.es; for the
   load from <literal>[&reg.di;]</literal> or
   <literal>[&reg.edi;]</literal> cannot be overridden.</para>

  <para><literal>CMPSW</literal> and <literal>CMPSD</literal> work in
   the same way, but they compare a word or a doubleword instead of a
   byte, and increment or decrement the addressing registers by 2 or 4
   instead of 1.</para>

  <para>The <literal>REPE</literal> and <literal>REPNE</literal>
   prefixes (equivalently, <literal>REPZ</literal> and
   <literal>REPNZ</literal>) may be used to repeat the instruction up
   to &reg.cx; (or &reg.ecx; - again, the address size chooses which)
   times until the first unequal or equal byte is found.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insCMPSS} \i\c{CMPSS}: Scalar Single FP Compare

\c CMPSS xmmreg,memory,immediate      ; ??   [KATMAI,SSE,SB,AR2] 
\c CMPSS xmmreg,xmmreg,immediate      ; ??   [KATMAI,SSE,SB,AR2] 

\c{CMP(cc)PS} and \c{CMP(cc)SS} conditions (cc):
EQ, LT, LE, UNORD, NEQ, NLT, NLE, ORD


\H{insCMPUNORDPS} \i\c{CMPUNORDPS}: Packed Single FP Compare (CMPPS)

\c CMPUNORDPS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPUNORDPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCMPUNORDSS} \i\c{CMPUNORDSS}: Scalar Single FP Compare (CMPSS)

\c CMPUNORDSS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c CMPUNORDSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 
]]>
 <sect1 id="inst-ref-cmpxchg">
  <title><literal>CMPXCHG</literal><![%inst-ref.undoc;[,
   <literal>CMPXCHG486</literal>]]>: Compare and Exchange</title>

  <indexterm>
   <primary><literal>CMPXCHG</literal></primary>
  </indexterm>
<![%inst-ref.undoc;[
  <indexterm>
   <primary><literal>CMPXCHG486</literal></primary>
  </indexterm>
]]>
  <screen>CMPXCHG r/m8,reg8             ; 0F B0 /r             [PENT]
CMPXCHG r/m16,reg16           ; o16 0F B1 /r         [PENT]
CMPXCHG r/m32,reg32           ; o32 0F B1 /r         [PENT]</screen>
<![%inst-ref.undoc;[
<screen>
CMPXCHG486 r/m8,reg8          ; 0F A6 /r             [486,UNDOC]
CMPXCHG486 r/m16,reg16        ; o16 0F A7 /r         [486,UNDOC]
CMPXCHG486 r/m32,reg32        ; o32 0F A7 /r         [486,UNDOC]</screen>

  <para>These two instructions perform exactly the same operation;
   however, apparently some (not all) 486 processors support it under
   a non-standard opcode, so NASM provides the undocumented
   <literal>CMPXCHG486</literal> form to generate the non-standard
   opcode.</para>
]]>
  <para><literal>CMPXCHG</literal> compares its destination (first)
   operand to the value in &reg.al;, &reg.ax; or &reg.eax; (depending
   on the size of the instruction). If they are equal, it copies its
   source (second) operand into the destination and sets the zero
   flag. Otherwise, it clears the zero flag and leaves the destination
   alone.</para>

  <para><literal>CMPXCHG</literal> is intended to be used for atomic
   operations in multitasking or multiprocessor environments. To
   safely update a value in shared memory, for example, you might load
   the value into &reg.eax;, load the updated value into &reg.ebx;,
   and then execute the instruction <literal>lock cmpxchg
    [value],ebx</literal>.  If <literal>value</literal> has not
   changed since being loaded, it is updated with your desired new
   value, and the zero flag is set to let you know it has worked. (The
   <literal>LOCK</literal> prefix prevents another processor doing
   anything in the middle of this operation: it guarantees atomicity.)
   However, if another processor has modified the value in between
   your load and your attempted store, the store does not happen, and
   you are notified of the failure by a cleared zero flag, so you can
   go round and try again.</para>
 </sect1>

 <sect1 id="inst-ref-cmpxchg8b">
  <title><literal>CMPXCHG8B</literal>: Compare and Exchange Eight
   Bytes</title>

  <indexterm>
   <primary><literal>CMPXCHG8B</literal></primary>
  </indexterm>

  <screen>CMPXCHG8B mem                 ; 0F C7 /1             [PENT]</screen>

  <para>This is a larger and more unwieldy version of
   <literal>CMPXCHG</literal>: it compares the 64-bit (eight-byte)
   value stored at <literal>[mem]</literal> with the value in
   <literal>&reg.edx;:&reg.eax;</literal>.  If they are equal, it sets
   the zero flag and stores <literal>&reg.ecx;:&reg.ebx;</literal>
   into the memory area. If they are unequal, it clears the zero flag
   and leaves the memory area untouched.</para>
 </sect1>
<![%inst-ref.katmai;[
 <sect1 id="inst-ref-comiss">
\H{insCOMISS} \i\c{COMISS}: Scalar Ordered Single-FP Compare and Set EFLAGS

\c COMISS xmmreg,memory           ; ??         [KATMAI,SSE] 
\c COMISS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

Set Z, P, C according to comparison, clear O, S, A bits of EFLAGS.
Z=P=C=1 for "unordered" result (QNaN).
 </sect1>
]]>
 <sect1 id="inst-ref-cpuid">
  <title><literal>CPUID</literal>: Get CPU Identification Code</title>

  <indexterm>
   <primary><literal>CPUID</literal></primary>
  </indexterm>

  <screen>CPUID                         ; 0F A2                [PENT]</screen>

  <para><literal>CPUID</literal> returns various information about the
   processor it is being executed on. It fills the four registers
   &reg.eax;, &reg.ebx;, &reg.ecx; and &reg.edx; with information,
   which varies depending on the input contents of &reg.eax;.</para>

  <para><literal>CPUID</literal> also acts as a barrier to serialise
   instruction execution: executing the <literal>CPUID</literal>
   instruction guarantees that all the effects (memory modification,
   flag modification, register modification) of previous instructions
   have been completed before the next instruction gets
   fetched.</para>

  <para>The information returned is as follows:</para>

  <itemizedlist>
   <listitem>
    <para>If &reg.eax; is zero on input, &reg.eax; on output holds the
     maximum acceptable input value of &reg.eax;, and
     <literal>&reg.ebx;:&reg.edx;:&reg.ecx;</literal> contain the
     string <literal>"GenuineIntel"</literal> (or not, if you have a
     clone processor).  That is to say, &reg.ebx; contains
     <literal>"Genu"</literal> (in NASM's own sense of character
     constants, described in \k{chrconst}), &reg.edx; contains
     <literal>"ineI"</literal> and &reg.ecx; contains
     <literal>"ntel"</literal>.</para>
   </listitem>

   <listitem>
    <para>If &reg.eax; is one on input, &reg.eax; on output contains
     version information about the processor, and &reg.edx; contains a
     set of feature flags, showing the presence and absence of various
     features. For example, bit 8 is set if the
     <literal>CMPXCHG8B</literal> instruction (<xref
      linkend="inst-ref-cmpxchg8b">) is supported, bit 15 is set if
     the conditional move instructions (<xref
      linkend="inst-ref-cmovcc"> and <xref linkend="inst-ref-fcmovb">)
     are supported, and bit 23 is set if MMX instructions are
     supported.</para>
   </listitem>

   <listitem>
    <para>If &reg.eax; is two on input, &reg.eax;, &reg.ebx;,
     &reg.ecx; and &reg.edx; all contain information about caches and
     TLBs (Translation Lookahead Buffers).</para>
   </listitem>
  </itemizedlist>

  <para>For more information on the data returned from
   <literal>CPUID</literal>, see the documentation on Intel's web
   site.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insCVTPI2PS} \i\c{CVTPI2PS}:
Packed Signed INT32 to Packed Single-FP Conversion

\c CVTPI2PS xmmreg,mem64            ; ??         [KATMAI,SSE,MMX] 
\c CVTPI2PS xmmreg,mmxreg           ; ??         [KATMAI,SSE,MMX] 


\H{insCVTPS2PI} \i\c{CVTPS2PI}:
Packed Single-FP to Packed INT32 Conversion

\c CVTPS2PI mmxreg,mem64            ; ??         [KATMAI,SSE,MMX] 
\c CVTPS2PI mmxreg,xmmreg           ; ??         [KATMAI,SSE,MMX] 


\H{insCVTSI2SS} \i\c{CVTSI2SS}:
Scalar Signed INT32 to Single-FP Conversion

\c CVTSI2SS xmmreg,memory          ; ??       [KATMAI,SSE,SD,AR1] 
\c CVTSI2SS xmmreg,reg32           ; ??            [KATMAI,SSE] 



\H{insCVTSS2SI} \i\c{CVTSS2SI}:
Scalar Single-FP to Signed INT32 Conversion

\c CVTSS2SI reg32,memory           ; ??         [KATMAI,SSE] 
\c CVTSS2SI reg32,xmmreg           ; ??         [KATMAI,SSE] 


\H{insCVTTPS2PI} \i\c{CVTTPS2PI}:
Packed Single-FP to Packed INT32 Conversion

\c CVTTPS2PI mmxreg,memory           ; ??        [KATMAI,SSE,MMX] 
\c CVTTPS2PI mmxreg,xmmreg           ; ??        [KATMAI,SSE,MMX] 


\H{insCVTTSS2SI} \i\c{CVTTSS2SI}:
Scalr Single-FP to Signed INT32 Conversion

\c CVTTSS2SI reg32,memory           ; ??         [KATMAI,SSE] 
\c CVTTSS2SI reg32,xmmreg           ; ??         [KATMAI,SSE] 
]]>
 <sect1 id="inst-ref-daa">
  <title><literal>DAA</literal>, <literal>DAS</literal>: Decimal
   Adjustments</title>

  <indexterm>
   <primary><literal>DAA</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>DAS</literal></primary>
  </indexterm>

  <screen>DAA                           ; 27                   [8086]
DAS                           ; 2F                   [8086]</screen>

  <para>These instructions are used in conjunction with the add and
   subtract instructions to perform binary-coded decimal arithmetic in
   <emphasis>packed</emphasis> (one BCD digit per nibble) form.  For
   the unpacked equivalents, see <xref linkend="inst-ref-aaa">.</para>

  <para><literal>DAA</literal> should be used after a one-byte
   <literal>ADD</literal> instruction whose destination was the
   &reg.al; register: by means of examining the value in the &reg.al;
   and also the auxiliary carry flag &flag.af;, it determines whether
   either digit of the addition has overflowed, and adjusts it (and
   sets the carry and auxiliary-carry flags) if so.  You can add long
   BCD strings together by doing
   <literal>ADD</literal>/<literal>DAA</literal> on the low two
   digits, then doing <literal>ADC</literal>/<literal>DAA</literal> on
   each subsequent pair of digits.</para>

  <para><literal>DAS</literal> works similarly to
   <literal>DAA</literal>, but is for use after <literal>SUB</literal>
   instructions rather than <literal>ADD</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-dec">
  <title><literal>DEC</literal>: Decrement Integer</title>

  <indexterm>
   <primary><literal>DEC</literal></primary>
  </indexterm>

  <screen>DEC reg16                     ; o16 48+r             [8086]
DEC reg32                     ; o32 48+r             [386]
DEC r/m8                      ; FE /1                [8086]
DEC r/m16                     ; o16 FF /1            [8086]
DEC r/m32                     ; o32 FF /1            [386]</screen>

  <para><literal>DEC</literal> subtracts 1 from its operand. It does
   <emphasis>not</emphasis> affect the carry flag: to affect the carry
   flag, use <literal>SUB something,1</literal> (see <xref
    linkend="inst-ref-sub">).  See also <literal>INC</literal> (<xref
    linkend="inst-ref-inc">).</para>
 </sect1>

 <sect1 id="inst-ref-div">
  <title><literal>DIV</literal>: Unsigned Integer Divide</title>

  <indexterm>
   <primary><literal>DIV</literal></primary>
  </indexterm>

  <screen>DIV r/m8                      ; F6 /6                [8086]
DIV r/m16                     ; o16 F7 /6            [8086]
DIV r/m32                     ; o32 F7 /6            [386]</screen>

  <para><literal>DIV</literal> performs unsigned integer division. The
   explicit operand provided is the divisor; the dividend and
   destination operands are implicit, in the following way:</para>

  <itemizedlist>
   <listitem>
    <para>For <literal>DIV r/m8</literal>, &reg.ax; is divided by the
     given operand; the quotient is stored in &reg.al; and the
     remainder in &reg.ah;.</para>
   </listitem>

   <listitem>
    <para>For <literal>DIV r/m16</literal>,
     <literal>&reg.dx;:&reg.ax;</literal> is divided by the given
     operand; the quotient is stored in &reg.ax; and the remainder in
     &reg.dx;.</para>
   </listitem>

   <listitem>
    <para>For <literal>DIV r/m32</literal>,
     <literal>&reg.edx;:&reg.eax;</literal> is divided by the given
     operand; the quotient is stored in &reg.eax; and the remainder in
     &reg.edx;.</para>
   </listitem>
  </itemizedlist>

  <para>Signed integer division is performed by the
   <literal>IDIV</literal> instruction: see <xref
    linkend="inst-ref-idiv">.</para>
 </sect1>
<![%inst-ref.katmai;[
 <sect1 id="inst-ref-divps">
\H{insDIVPS} \i\c{DIVPS}: Packed Single-FP Divide

\c DIVPS xmmreg,memory           ; 0F,5E,/r         [KATMAI,SSE] 
\c DIVPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

\c{DIVPS}The DIVPS instruction divides the packed SP FP numbers
of both their operands.
 </sect1>

 <sect1 id="inst-ref-divss">
\H{insDIVSS} \i\c{DIVSS}: Scalar Single-FP Divide

\c DIVSS xmmreg,memory           ; F3,0F,5E,/r [KATMAI,SSE] 
\c DIVSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

\c{DIVSS}-The DIVSS instructions divide the lowest SP FP numbers 
of both operands; the upper three fields are passed through from xmm1.
 </sect1>
]]>
 <sect1 id="inst-ref-emms">
  <title><literal>EMMS</literal>: Empty MMX State</title>

  <indexterm>
   <primary><literal>EMMS</literal></primary>
  </indexterm>

  <screen>EMMS                          ; 0F 77                [PENT,MMX]</screen>

  <para><literal>EMMS</literal> sets the FPU tag word (marking which
   floating-point registers are available) to all ones, meaning all
   registers are available for the FPU to use. It should be used after
   executing MMX instructions and before executing any subsequent
   floating-point operations.</para>
 </sect1>

 <sect1 id="inst-ref-enter">
  <title><literal>ENTER</literal>: Create Stack Frame</title>

  <indexterm>
   <primary><literal>ENTER</literal></primary>
  </indexterm>

  <screen>ENTER imm,imm                 ; C8 iw ib             [186]</screen>

  <para><literal>ENTER</literal> constructs a stack frame for a
   high-level language procedure call. The first operand (the
   <literal>iw</literal> in the opcode definition above refers to the
   first operand) gives the amount of stack space to allocate for
   local variables; the second (the <literal>ib</literal> above) gives
   the nesting level of the procedure (for languages like Pascal, with
   nested procedures).</para>

  <para>The function of <literal>ENTER</literal>, with a nesting level
   of zero, is equivalent to</para>

  <programlisting>        push    ebp             ; or push bp          in 16 bits
        mov     ebp, esp        ; or mov bp, sp       in 16 bits
        sub     esp, operand1   ; or sub sp, operand1 in 16 bits</programlisting>

  <para>This creates a stack frame with the procedure parameters
   accessible upwards from &reg.ebp;, and local variables accessible
   downwards from &reg.ebp;.</para>

  <para>With a nesting level of one, the stack frame created is 4 (or
   2) bytes bigger, and the value of the final frame pointer &reg.ebp;
   is accessible in memory at <literal>[&reg.ebp;-4]</literal>.</para>

  <para>This allows <literal>ENTER</literal>, when called with a
   nesting level of two, to look at the stack frame described by the
   <emphasis>previous</emphasis> value of &reg.ebp;, find the frame
   pointer at offset -4 from that, and push it along with its new
   frame pointer, so that when a level-two procedure is called from
   within a level-one procedure, <literal>[&reg.ebp;-4]</literal>
   holds the frame pointer of the most recent level-one procedure call
   and <literal>[&reg.ebp;-8]</literal> holds that of the most recent
   level-two call.  And so on, for nesting levels up to 31.</para>

  <para>Stack frames created by <literal>ENTER</literal> can be
   destroyed by the <literal>LEAVE</literal> instruction: see
   <xref linkend="inst-ref-leave">.</para>
 </sect1>

 <sect1 id="inst-ref-f2xm1">
  <title><literal>F2XM1</literal>: Calculate 2**X-1</title>

  <indexterm>
   <primary><literal>F2XM1</literal></primary>
  </indexterm>

  <screen>F2XM1                         ; D9 F0                [8086,FPU]</screen>

  <para><literal>F2XM1</literal> raises 2 to the power of &reg.st0;,
   subtracts one, and stores the result back into &reg.st0;. The
   initial contents of &reg.st0; must be a number in the range -1 to
   +1.</para>
 </sect1>

 <sect1 id="inst-ref-fabs">
  <title><literal>FABS</literal>: Floating-Point Absolute Value</title>

  <indexterm>
   <primary><literal>FABS</literal></primary>
  </indexterm>

  <screen>FABS                          ; D9 E1                [8086,FPU]</screen>

  <para><literal>FABS</literal> computes the absolute value of
   &reg.st0;, storing the result back in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fadd">
  <title><literal>FADD</literal>, <literal>FADDP</literal>:
   Floating-Point Addition</title>

  <indexterm>
   <primary><literal>FADD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FADDP</literal></primary>
  </indexterm>

  <screen>FADD mem32                    ; D8 /0                [8086,FPU]
FADD mem64                    ; DC /0                [8086,FPU]

FADD fpureg                   ; D8 C0+r              [8086,FPU]
FADD ST0,fpureg               ; D8 C0+r              [8086,FPU]

FADD TO fpureg                ; DC C0+r              [8086,FPU]
FADD fpureg,ST0               ; DC C0+r              [8086,FPU]

FADDP fpureg                  ; DE C0+r              [8086,FPU]
FADDP fpureg,ST0              ; DE C0+r              [8086,FPU]</screen>

  <para><literal>FADD</literal>, given one operand, adds the operand
   to &reg.st0; and stores the result back in &reg.st0;. If the
   operand has the <literal>TO</literal> modifier, the result is
   stored in the register given rather than in &reg.st0;.</para>

  <para><literal>FADDP</literal> performs the same function as
   <literal>FADD TO</literal>, but pops the register stack after
   storing the result.</para>

  <para>The given two-operand forms are synonyms for the one-operand
   forms.</para>
 </sect1>

 <sect1 id="inst-ref-fbld">
  <title><literal>FBLD</literal>, <literal>FBSTP</literal>: BCD
   Floating-Point Load and Store</title>

  <indexterm>
   <primary><literal>FBLD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FBSTP</literal></primary>
  </indexterm>

  <screen>FBLD mem80                    ; DF /4                [8086,FPU]
FBSTP mem80                   ; DF /6                [8086,FPU]</screen>

  <para><literal>FBLD</literal> loads an 80-bit (ten-byte) packed
   binary-coded decimal number from the given memory address, converts
   it to a real, and pushes it on the register stack.
   <literal>FBSTP</literal> stores the value of &reg.st0;, in packed
   BCD, at the given address and then pops the register stack.</para>
 </sect1>

 <sect1 id="inst-ref-fchs">
  <title><literal>FCHS</literal>: Floating-Point Change Sign</title>

  <indexterm>
   <primary><literal>FCHS</literal></primary>
  </indexterm>

  <screen>FCHS                          ; D9 E0                [8086,FPU]</screen>

  <para><literal>FCHS</literal> negates the number in &reg.st0;:
   negative numbers become positive, and vice versa.</para>
 </sect1>

 <sect1 id="inst-ref-fclex">
  <title><literal>FCLEX</literal>, <literal>FNCLEX</literal>: Clear
   Floating-Point Exceptions</title>

  <indexterm>
   <primary><literal>FCLEX</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNCLEX</literal></primary>
  </indexterm>

  <screen>FCLEX                         ; 9B DB E2             [8086,FPU]
FNCLEX                        ; DB E2                [8086,FPU]</screen>

  <para><literal>FCLEX</literal> clears any floating-point exceptions
   which may be pending. <literal>FNCLEX</literal> does the same thing
   but doesn't wait for previous floating-point operations (including
   the <emphasis>handling</emphasis> of pending exceptions) to finish
   first.</para>
 </sect1>

 <sect1 id="inst-ref-fcmovb">
  <title><literal>FCMOVcc</literal>: Floating-Point Conditional
   Move</title>

  <indexterm>
   <primary><literal>FCMOVcc</literal></primary>
  </indexterm>

  <screen>FCMOVB fpureg                 ; DA C0+r              [P6,FPU]
FCMOVB ST0,fpureg             ; DA C0+r              [P6,FPU]

FCMOVBE fpureg                ; DA D0+r              [P6,FPU]
FCMOVBE ST0,fpureg            ; DA D0+r              [P6,FPU]

FCMOVE fpureg                 ; DA C8+r              [P6,FPU]
FCMOVE ST0,fpureg             ; DA C8+r              [P6,FPU]

FCMOVNB fpureg                ; DB C0+r              [P6,FPU]
FCMOVNB ST0,fpureg            ; DB C0+r              [P6,FPU]

FCMOVNBE fpureg               ; DB D0+r              [P6,FPU]
FCMOVNBE ST0,fpureg           ; DB D0+r              [P6,FPU]

FCMOVNE fpureg                ; DB C8+r              [P6,FPU]
FCMOVNE ST0,fpureg            ; DB C8+r              [P6,FPU]

FCMOVNU fpureg                ; DB D8+r              [P6,FPU]
FCMOVNU ST0,fpureg            ; DB D8+r              [P6,FPU]

FCMOVU fpureg                 ; DA D8+r              [P6,FPU]
FCMOVU ST0,fpureg             ; DA D8+r              [P6,FPU]</screen>

  <para>The <literal>FCMOV</literal> instructions perform conditional
   move operations: each of them moves the contents of the given
   register into &reg.st0; if its condition is satisfied, and does
   nothing if not.</para>

  <para>The conditions are not the same as the standard condition
   codes used with conditional jump instructions. The conditions
   <literal>B</literal>, <literal>BE</literal>, <literal>NB</literal>,
   <literal>NBE</literal>, <literal>E</literal> and
   <literal>NE</literal> are exactly as normal, but none of the other
   standard ones are supported. Instead, the condition
   <literal>U</literal> and its counterpart <literal>NU</literal> are
   provided; the <literal>U</literal> condition is satisfied if the
   last two floating-point numbers compared were <emphasis>unordered</emphasis>, i.e.
   they were not equal but neither one could be said to be greater
   than the other, for example if they were NaNs. (The flag state
   which signals this is the setting of the parity flag: so the
   <literal>U</literal> condition is notionally equivalent to
   <literal>PE</literal>, and <literal>NU</literal> is equivalent to
   <literal>PO</literal>.)</para>

  <para>The <literal>FCMOV</literal> conditions test the main
   processor's status flags, not the FPU status flags, so using
   <literal>FCMOV</literal> directly after <literal>FCOM</literal>
   will not work. Instead, you should either use
   <literal>FCOMI</literal> which writes directly to the main CPU
   flags word, or use <literal>FSTSW</literal> to extract the FPU
   flags.</para>

  <para>Although the <literal>FCMOV</literal> instructions are flagged
   <literal>P6</literal> above, they may not be supported by all
   Pentium Pro processors; the <literal>CPUID</literal> instruction
   (<xref linkend="inst-ref-cpuid">) will return a bit which indicates
   whether conditional moves are supported.</para>
 </sect1>

 <sect1 id="inst-ref-fcom">
  <title><literal>FCOM</literal>, <literal>FCOMP</literal>,
   <literal>FCOMPP</literal>, <literal>FCOMI</literal>,
   <literal>FCOMIP</literal>: Floating-Point Compare</title>

  <indexterm>
   <primary><literal>FCOM</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FCOMP</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FCOMPP</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FCOMI</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FCOMIP</literal></primary>
  </indexterm>

  <screen>FCOM mem32                    ; D8 /2                [8086,FPU]
FCOM mem64                    ; DC /2                [8086,FPU]
FCOM fpureg                   ; D8 D0+r              [8086,FPU]
FCOM ST0,fpureg               ; D8 D0+r              [8086,FPU]

FCOMP mem32                   ; D8 /3                [8086,FPU]
FCOMP mem64                   ; DC /3                [8086,FPU]
FCOMP fpureg                  ; D8 D8+r              [8086,FPU]
FCOMP ST0,fpureg              ; D8 D8+r              [8086,FPU]

FCOMPP                        ; DE D9                [8086,FPU]

FCOMI fpureg                  ; DB F0+r              [P6,FPU]
FCOMI ST0,fpureg              ; DB F0+r              [P6,FPU]

FCOMIP fpureg                 ; DF F0+r              [P6,FPU]
FCOMIP ST0,fpureg             ; DF F0+r              [P6,FPU]</screen>

  <para><literal>FCOM</literal> compares &reg.st0; with the given
   operand, and sets the FPU flags accordingly. &reg.st0; is treated
   as the left-hand side of the comparison, so that the carry flag is
   set (for a <quote>less-than</quote> result) if &reg.st0; is less
   than the given operand.</para>

  <para><literal>FCOMP</literal> does the same as
   <literal>FCOM</literal>, but pops the register stack afterwards.
   <literal>FCOMPP</literal> compares &reg.st0; with &reg.st1; and
   then pops the register stack twice.</para>

  <para><literal>FCOMI</literal> and <literal>FCOMIP</literal> work
   like the corresponding forms of <literal>FCOM</literal> and
   <literal>FCOMP</literal>, but write their results directly to the
   CPU flags register rather than the FPU status word, so they can be
   immediately followed by conditional jump or conditional move
   instructions.</para>

  <para>The <literal>FCOM</literal> instructions differ from the
   <literal>FUCOM</literal> instructions (<xref
    linkend="inst-ref-fucom">) only in the way they handle quiet NaNs:
   <literal>FUCOM</literal> will handle them silently and set the
   condition code flags to an <quote>unordered</quote> result, whereas
   <literal>FCOM</literal> will generate an exception.</para>
 </sect1>

 <sect1 id="inst-ref-fcos">
  <title><literal>FCOS</literal>: Cosine</title>

  <indexterm>
   <primary><literal>FCOS</literal></primary>
  </indexterm>

  <screen>FCOS                          ; D9 FF                [386,FPU]</screen>

  <para><literal>FCOS</literal> computes the cosine of &reg.st0; (in
   radians), and stores the result in &reg.st0;. See also
   <literal>FSINCOS</literal> (<xref linkend="inst-ref-fsin">).</para>
 </sect1>

 <sect1 id="inst-ref-fdecstp">
  <title><literal>FDECSTP</literal>: Decrement Floating-Point Stack
   Pointer</title>

  <indexterm>
   <primary><literal>FDECSTP</literal></primary>
  </indexterm>

  <screen>FDECSTP                       ; D9 F6                [8086,FPU]</screen>

  <para><literal>FDECSTP</literal> decrements the `top' field in the
   floating-point status word. This has the effect of rotating the FPU
   register stack by one, as if the contents of &reg.st7; had been
   pushed on the stack. See also <literal>FINCSTP</literal> (<xref
    linkend="inst-ref-fincstp">).</para>
 </sect1>

 <sect1 id="inst-ref-fdisi">
  <title><literal>FxDISI</literal>, <literal>FxENI</literal>: Disable
   and Enable Floating-Point Interrupts</title>

  <indexterm>
   <primary><literal>FDISI</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNDISI</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FENI</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNENI</literal></primary>
  </indexterm>

  <screen>FDISI                         ; 9B DB E1             [8086,FPU]
FNDISI                        ; DB E1                [8086,FPU]

FENI                          ; 9B DB E0             [8086,FPU]
FNENI                         ; DB E0                [8086,FPU]</screen>

  <para><literal>FDISI</literal> and <literal>FENI</literal> disable
   and enable floating-point interrupts. These instructions are only
   meaningful on original 8087 processors: the 287 and above treat
   them as no-operation instructions.</para>

  <para><literal>FNDISI</literal> and <literal>FNENI</literal> do the
   same thing as <literal>FDISI</literal> and <literal>FENI</literal>
   respectively, but without waiting for the floating-point processor
   to finish what it was doing first.</para>
 </sect1>

 <sect1 id="inst-ref-fdiv">
  <title><literal>FDIV</literal>, <literal>FDIVP</literal>,
   <literal>FDIVR</literal>, <literal>FDIVRP</literal>: Floating-Point
   Division</title>

  <indexterm>
   <primary><literal>FDIV</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FDIVP</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FDIVR</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FDIVRP</literal></primary>
  </indexterm>

  <screen>FDIV mem32                    ; D8 /6                [8086,FPU]
FDIV mem64                    ; DC /6                [8086,FPU]

FDIV fpureg                   ; D8 F0+r              [8086,FPU]
FDIV ST0,fpureg               ; D8 F0+r              [8086,FPU]

FDIV TO fpureg                ; DC F8+r              [8086,FPU]
FDIV fpureg,ST0               ; DC F8+r              [8086,FPU]

FDIVR mem32                   ; D8 /0                [8086,FPU]
FDIVR mem64                   ; DC /0                [8086,FPU]

FDIVR fpureg                  ; D8 F8+r              [8086,FPU]
FDIVR ST0,fpureg              ; D8 F8+r              [8086,FPU]

FDIVR TO fpureg               ; DC F0+r              [8086,FPU]
FDIVR fpureg,ST0              ; DC F0+r              [8086,FPU]

FDIVP fpureg                  ; DE F8+r              [8086,FPU]
FDIVP fpureg,ST0              ; DE F8+r              [8086,FPU]

FDIVRP fpureg                 ; DE F0+r              [8086,FPU]
FDIVRP fpureg,ST0             ; DE F0+r              [8086,FPU]</screen>

  <para><literal>FDIV</literal> divides &reg.st0; by the given operand
   and stores the result back in &reg.st0;, unless the
   <literal>TO</literal> qualifier is given, in which case it divides
   the given operand by &reg.st0; and stores the result in the
   operand.</para>

  <para><literal>FDIVR</literal> does the same thing, but does the
   division the other way up: so if <literal>TO</literal> is not
   given, it divides the given operand by &reg.st0; and stores the
   result in &reg.st0;, whereas if <literal>TO</literal> is given it
   divides &reg.st0; by its operand and stores the result in the
   operand.</para>

  <para><literal>FDIVP</literal> operates like <literal>FDIV
    TO</literal>, but pops the register stack once it has finished.
   <literal>FDIVRP</literal> operates like <literal>FDIVR
    TO</literal>, but pops the register stack once it has
   finished.</para>
 </sect1>
<![%inst-ref.now3d;[
\H{insFEMMS} \i<literal>FEMMS</literal>: 3dnow instruction (duh!)

\c FEMMS 0,0,0           ; ??                 [PENT,3DNOW] 

3dnow instruction (duh!)
]]>
 <sect1 id="inst-ref-ffree">
  <title><literal>FFREE</literal>: Flag Floating-Point Register as
   Unused</title>

  <indexterm>
   <primary><literal>FFREE</literal></primary>
  </indexterm>

  <screen>FFREE fpureg                  ; DD C0+r              [8086,FPU]</screen>

  <para><literal>FFREE</literal> marks the given register as being
   empty.</para>
 </sect1>

 <sect1 id="inst-ref-fiadd">
  <title><literal>FIADD</literal>: Floating-Point/Integer
   Addition</title>

  <indexterm>
   <primary><literal>FIADD</literal></primary>
  </indexterm>

  <screen>FIADD mem16                   ; DE /0                [8086,FPU]
FIADD mem32                   ; DA /0                [8086,FPU]</screen>

  <para><literal>FIADD</literal> adds the 16-bit or 32-bit integer
   stored in the given memory location to &reg.st0;, storing the
   result in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-ficom">
  <title><literal>FICOM</literal>, <literal>FICOMP</literal>:
   Floating-Point/Integer Compare</title>

  <indexterm>
   <primary><literal>FICOM</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FICOMP</literal></primary>
  </indexterm>

  <screen>FICOM mem16                   ; DE /2                [8086,FPU]
FICOM mem32                   ; DA /2                [8086,FPU]

FICOMP mem16                  ; DE /3                [8086,FPU]
FICOMP mem32                  ; DA /3                [8086,FPU]</screen>

  <para><literal>FICOM</literal> compares &reg.st0; with the 16-bit or
   32-bit integer stored in the given memory location, and sets the
   FPU flags accordingly. <literal>FICOMP</literal> does the same, but
   pops the register stack afterwards.</para>
 </sect1>

 <sect1 id="inst-ref-fidiv">
  <title><literal>FIDIV</literal>, <literal>FIDIVR</literal>:
   Floating-Point/Integer Division</title>

  <indexterm>
   <primary><literal>FIDIV</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FIDIVR</literal></primary>
  </indexterm>

  <screen>FIDIV mem16                   ; DE /6                [8086,FPU]
FIDIV mem32                   ; DA /6                [8086,FPU]

FIDIVR mem16                  ; DE /0                [8086,FPU]
FIDIVR mem32                  ; DA /0                [8086,FPU]</screen>

  <para><literal>FIDIV</literal> divides &reg.st0; by the 16-bit or
   32-bit integer stored in the given memory location, and stores the
   result in &reg.st0;. <literal>FIDIVR</literal> does the division
   the other way up: it divides the integer by &reg.st0;, but still
   stores the result in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fild">
  <title><literal>FILD</literal>, <literal>FIST</literal>,
   <literal>FISTP</literal>: Floating-Point/Integer Conversion</title>

  <indexterm>
   <primary><literal>FILD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FIST</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FISTP</literal></primary>
  </indexterm>

  <screen>FILD mem16                    ; DF /0                [8086,FPU]
FILD mem32                    ; DB /0                [8086,FPU]
FILD mem64                    ; DF /5                [8086,FPU]

FIST mem16                    ; DF /2                [8086,FPU]
FIST mem32                    ; DB /2                [8086,FPU]

FISTP mem16                   ; DF /3                [8086,FPU]
FISTP mem32                   ; DB /3                [8086,FPU]
FISTP mem64                   ; DF /0                [8086,FPU]</screen>

  <para><literal>FILD</literal> loads an integer out of a memory
   location, converts it to a real, and pushes it on the FPU register
   stack. <literal>FIST</literal> converts &reg.st0; to an integer and
   stores that in memory; <literal>FISTP</literal> does the same as
   <literal>FIST</literal>, but pops the register stack
   afterwards.</para>
 </sect1>

 <sect1 id="inst-ref-fimul">
  <title><literal>FIMUL</literal>: Floating-Point/Integer
   Multiplication</title>

  <indexterm>
   <primary><literal>FIMUL</literal></primary>
  </indexterm>

  <screen>FIMUL mem16                   ; DE /1                [8086,FPU]
FIMUL mem32                   ; DA /1                [8086,FPU]</screen>

  <para><literal>FIMUL</literal> multiplies &reg.st0; by the 16-bit or
   32-bit integer stored in the given memory location, and stores the
   result in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fincstp">
  <title><literal>FINCSTP</literal>: Increment Floating-Point Stack
   Pointer</title>

  <indexterm>
   <primary><literal>FINCSTP</literal></primary>
  </indexterm>

  <screen>FINCSTP                       ; D9 F7                [8086,FPU]</screen>

  <para><literal>FINCSTP</literal> increments the `top' field in the
   floating-point status word. This has the effect of rotating the FPU
   register stack by one, as if the register stack had been popped;
   however, unlike the popping of the stack performed by many FPU
   instructions, it does not flag the new &reg.st7; (previously
   &reg.st0;) as empty. See also <literal>FDECSTP</literal> (<xref
    linkend="inst-ref-fdecstp">).</para>
 </sect1>

 <sect1 id="inst-ref-finit">
  <title><literal>FINIT</literal>, <literal>FNINIT</literal>:
   Initialise Floating-Point Unit</title>

  <indexterm>
   <primary><literal>FINIT</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNINIT</literal></primary>
  </indexterm>

  <screen>FINIT                         ; 9B DB E3             [8086,FPU]
FNINIT                        ; DB E3                [8086,FPU]</screen>

  <para><literal>FINIT</literal> initialises the FPU to its default
   state. It flags all registers as empty, though it does not actually
   change their values. <literal>FNINIT</literal> does the same,
   without first waiting for pending exceptions to clear.</para>
 </sect1>

 <sect1 id="inst-ref-fisub">
  <title><literal>FISUB</literal>: Floating-Point/Integer
   Subtraction</title>

  <indexterm>
   <primary><literal>FISUB</literal></primary>
  </indexterm>

  <screen>FISUB mem16                   ; DE /4                [8086,FPU]
FISUB mem32                   ; DA /4                [8086,FPU]

FISUBR mem16                  ; DE /5                [8086,FPU]
FISUBR mem32                  ; DA /5                [8086,FPU]</screen>

  <para><literal>FISUB</literal> subtracts the 16-bit or 32-bit
   integer stored in the given memory location from &reg.st0;, and
   stores the result in &reg.st0;. <literal>FISUBR</literal> does the
   subtraction the other way round, i.e. it subtracts &reg.st0; from
   the given integer, but still stores the result in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fld">
  <title><literal>FLD</literal>: Floating-Point Load</title>

  <indexterm>
   <primary><literal>FLD</literal></primary>
  </indexterm>

  <screen>FLD mem32                     ; D9 /0                [8086,FPU]
FLD mem64                     ; DD /0                [8086,FPU]
FLD mem80                     ; DB /5                [8086,FPU]
FLD fpureg                    ; D9 C0+r              [8086,FPU]</screen>

  <para><literal>FLD</literal> loads a floating-point value out of the
   given register or memory location, and pushes it on the FPU
   register stack.</para>
 </sect1>

 <sect1 id="inst-ref-fldxx">
  <title><literal>FLDxx</literal>: Floating-Point Load
   Constants</title>

  <indexterm>
   <primary><literal>FLDxx</literal></primary>
  </indexterm>

  <screen>FLD1                          ; D9 E8                [8086,FPU]
FLDL2E                        ; D9 EA                [8086,FPU]
FLDL2T                        ; D9 E9                [8086,FPU]
FLDLG2                        ; D9 EC                [8086,FPU]
FLDLN2                        ; D9 ED                [8086,FPU]
FLDPI                         ; D9 EB                [8086,FPU]
FLDZ                          ; D9 EE                [8086,FPU]</screen>

  <para>These instructions push specific standard constants on the FPU
   register stack. <literal>FLD1</literal> pushes the value 1;
   <literal>FLDL2E</literal> pushes the base-2 logarithm of e;
   <literal>FLDL2T</literal> pushes the base-2 log of 10;
   <literal>FLDLG2</literal> pushes the base-10 log of 2;
   <literal>FLDLN2</literal> pushes the base-e log of 2;
   <literal>FLDPI</literal> pushes pi; and <literal>FLDZ</literal>
   pushes zero.</para>
 </sect1>

 <sect1 id="inst-ref-fldcw">
  <title><literal>FLDCW</literal>: Load Floating-Point Control
   Word</title>

  <indexterm>
   <primary><literal>FLDCW</literal></primary>
  </indexterm>

  <screen>FLDCW mem16                   ; D9 /5                [8086,FPU]</screen>

  <para><literal>FLDCW</literal> loads a 16-bit value out of memory
   and stores it into the FPU control word (governing things like the
   rounding mode, the precision, and the exception masks). See also
   <literal>FSTCW</literal> (<xref linkend="inst-ref-fstcw">).</para>
 </sect1>

 <sect1 id="inst-ref-fldenv">
  <title><literal>FLDENV</literal>: Load Floating-Point
   Environment</title>

  <indexterm>
   <primary><literal>FLDENV</literal></primary>
  </indexterm>

  <screen>FLDENV mem                    ; D9 /4                [8086,FPU]</screen>

  <para><literal>FLDENV</literal> loads the FPU operating environment
   (control word, status word, tag word, instruction pointer, data
   pointer and last opcode) from memory. The memory area is 14 or 28
   bytes long, depending on the CPU mode at the time. See also
   <literal>FSTENV</literal> (<xref
    linkend="inst-ref-fstenv">).</para>
 </sect1>

 <sect1 id="inst-ref-fmul">
  <title><literal>FMUL</literal>, <literal>FMULP</literal>:
   Floating-Point Multiply</title>

  <indexterm>
   <primary><literal>FMUL</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FMULP</literal></primary>
  </indexterm>

  <screen>FMUL mem32                    ; D8 /1                [8086,FPU]
FMUL mem64                    ; DC /1                [8086,FPU]

FMUL fpureg                   ; D8 C8+r              [8086,FPU]
FMUL ST0,fpureg               ; D8 C8+r              [8086,FPU]

FMUL TO fpureg                ; DC C8+r              [8086,FPU]
FMUL fpureg,ST0               ; DC C8+r              [8086,FPU]

FMULP fpureg                  ; DE C8+r              [8086,FPU]
FMULP fpureg,ST0              ; DE C8+r              [8086,FPU]</screen>

  <para><literal>FMUL</literal> multiplies &reg.st0; by the given
   operand, and stores the result in &reg.st0;, unless the
   <literal>TO</literal> qualifier is used in which case it stores the
   result in the operand. <literal>FMULP</literal> performs the same
   operation as <literal>FMUL TO</literal>, and then pops the register
   stack.</para>
 </sect1>

 <sect1 id="inst-ref-fnop">
  <title><literal>FNOP</literal>: Floating-Point No Operation</title>

  <indexterm>
   <primary><literal>FNOP</literal></primary>
  </indexterm>

  <screen>FNOP                          ; D9 D0                [8086,FPU]</screen>

  <para><literal>FNOP</literal> does nothing.</para>
 </sect1>

 <sect1 id="inst-ref-fpatan">
  <title><literal>FPATAN</literal>, <literal>FPTAN</literal>:
   Arctangent and Tangent</title>

  <indexterm>
   <primary><literal>FPATAN</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FPTAN</literal></primary>
  </indexterm>

  <screen>FPATAN                        ; D9 F3                [8086,FPU]
FPTAN                         ; D9 F2                [8086,FPU]</screen>

  <para><literal>FPATAN</literal> computes the arctangent, in radians,
   of the result of dividing &reg.st1; by &reg.st0;, stores the result
   in &reg.st1;, and pops the register stack. It works like the C
   <literal>atan2</literal> function, in that changing the sign of
   both &reg.st0; and &reg.st1; changes the output value by pi (so it
   performs true rectangular-to-polar coordinate conversion, with
   &reg.st1; being the Y coordinate and &reg.st0; being the X
   coordinate, not merely an arctangent).</para>

  <para><literal>FPTAN</literal> computes the tangent of the value in
   &reg.st0; (in radians), and stores the result back into
   &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fprem">
  <title><literal>FPREM</literal>, <literal>FPREM1</literal>:
   Floating-Point Partial Remainder</title>

  <indexterm>
   <primary><literal>FPREM</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FPREM1</literal></primary>
  </indexterm>

  <screen>FPREM                         ; D9 F8                [8086,FPU]
FPREM1                        ; D9 F5                [386,FPU]</screen>

  <para>These instructions both produce the remainder obtained by
   dividing &reg.st0; by &reg.st1;. This is calculated, notionally, by
   dividing &reg.st0; by &reg.st1;, rounding the result to an integer,
   multiplying by &reg.st1; again, and computing the value which would
   need to be added back on to the result to get back to the original
   value in &reg.st0;.</para>

  <para>The two instructions differ in the way the notional
   round-to-integer operation is performed. <literal>FPREM</literal>
   does it by rounding towards zero, so that the remainder it returns
   always has the same sign as the original value in &reg.st0;;
   <literal>FPREM1</literal> does it by rounding to the nearest
   integer, so that the remainder always has at most half the
   magnitude of &reg.st1;.</para>

  <para>Both instructions calculate <emphasis>partial</emphasis> remainders, meaning
   that they may not manage to provide the final result, but might
   leave intermediate results in &reg.st0; instead. If this happens,
   they will set the C2 flag in the FPU status word; therefore, to
   calculate a remainder, you should repeatedly execute
   <literal>FPREM</literal> or <literal>FPREM1</literal> until C2
   becomes clear.</para>
 </sect1>

 <sect1 id="inst-ref-frndint">
  <title><literal>FRNDINT</literal>: Floating-Point Round to
   Integer</title>

  <indexterm>
   <primary><literal>FRNDINT</literal></primary>
  </indexterm>

  <screen>FRNDINT                       ; D9 FC                [8086,FPU]</screen>

  <para><literal>FRNDINT</literal> rounds the contents of &reg.st0; to
   an integer, according to the current rounding mode set in the FPU
   control word, and stores the result back in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-frstor">
  <title><literal>FSAVE</literal>, <literal>FRSTOR</literal>:
   Save/Restore Floating-Point State</title>

  <indexterm>
   <primary><literal>FSAVE</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNSAVE</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FRSTOR</literal></primary>
  </indexterm>

  <screen>FSAVE mem                     ; 9B DD /6             [8086,FPU]
FNSAVE mem                    ; DD /6                [8086,FPU]

FRSTOR mem                    ; DD /4                [8086,FPU]</screen>

  <para><literal>FSAVE</literal> saves the entire floating-point unit
   state, including all the information saved by
   <literal>FSTENV</literal> (<xref linkend="inst-ref-fstenv">) plus
   the contents of all the registers, to a 94 or 108 byte area of
   memory (depending on the CPU mode). <literal>FRSTOR</literal>
   restores the floating-point state from the same area of
   memory.</para>

  <para><literal>FNSAVE</literal> does the same as
   <literal>FSAVE</literal>, without first waiting for pending
   floating-point exceptions to clear.</para>
 </sect1>

 <sect1 id="inst-ref-fscale">
  <title><literal>FSCALE</literal>: Scale Floating-Point Value by
   Power of Two</title>

  <indexterm>
   <primary><literal>FSCALE</literal></primary>
  </indexterm>

  <screen>FSCALE                        ; D9 FD                [8086,FPU]</screen>

  <para><literal>FSCALE</literal> scales a number by a power of two:
   it rounds &reg.st1; towards zero to obtain an integer, then
   multiplies &reg.st0; by two to the power of that integer, and
   stores the result in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fsetpm">
  <title><literal>FSETPM</literal>: Set Protected Mode</title>

  <indexterm>
   <primary><literal>FSETPM</literal></primary>
  </indexterm>

  <screen>FSETPM                        ; DB E4                [286,FPU]</screen>

  <para>This instruction initalises protected mode on the 287
   floating-point coprocessor. It is only meaningful on that
   processor: the 387 and above treat the instruction as a
   no-operation.</para>
 </sect1>

 <sect1 id="inst-ref-fsin">
  <title><literal>FSIN</literal>, <literal>FSINCOS</literal>: Sine and
   Cosine</title>

  <indexterm>
   <primary><literal>FSIN</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FSINCOS</literal></primary>
  </indexterm>

  <screen>FSIN                          ; D9 FE                [386,FPU]
FSINCOS                       ; D9 FB                [386,FPU]</screen>

  <para><literal>FSIN</literal> calculates the sine of &reg.st0; (in
   radians) and stores the result in &reg.st0;.
   <literal>FSINCOS</literal> does the same, but then pushes the
   cosine of the same value on the register stack, so that the sine
   ends up in &reg.st1; and the cosine in &reg.st0;.
   <literal>FSINCOS</literal> is faster than executing
   <literal>FSIN</literal> and <literal>FCOS</literal> (see
   <xref linkend="inst-ref-fcos">) in succession.</para>
 </sect1>

 <sect1 id="inst-ref-fsqrt">
  <title><literal>FSQRT</literal>: Floating-Point Square Root</title>

  <indexterm>
   <primary><literal>FSQRT</literal></primary>
  </indexterm>

  <screen>FSQRT                         ; D9 FA                [8086,FPU]</screen>

  <para><literal>FSQRT</literal> calculates the square root of
   &reg.st0; and stores the result in &reg.st0;.</para>
 </sect1>

 <sect1 id="inst-ref-fst">
  <title><literal>FST</literal>, <literal>FSTP</literal>:
   Floating-Point Store</title>

  <indexterm>
   <primary><literal>FST</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FSTP</literal></primary>
  </indexterm>

  <screen>FST mem32                     ; D9 /2                [8086,FPU]
FST mem64                     ; DD /2                [8086,FPU]
FST fpureg                    ; DD D0+r              [8086,FPU]

FSTP mem32                    ; D9 /3                [8086,FPU]
FSTP mem64                    ; DD /3                [8086,FPU]
FSTP mem80                    ; DB /0                [8086,FPU]
FSTP fpureg                   ; DD D8+r              [8086,FPU]</screen>

  <para><literal>FST</literal> stores the value in &reg.st0; into the
   given memory location or other FPU register.
   <literal>FSTP</literal> does the same, but then pops the register
   stack.</para>
 </sect1>

 <sect1 id="inst-ref-fstcw">
  <title><literal>FSTCW</literal>: Store Floating-Point Control Word</title>

  <indexterm>
   <primary><literal>FSTCW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNSTCW</literal></primary>
  </indexterm>

  <screen>FSTCW mem16                   ; 9B D9 /0             [8086,FPU]
FNSTCW mem16                  ; D9 /0                [8086,FPU]</screen>

  <para><literal>FSTCW</literal> stores the FPU control word
   (governing things like the rounding mode, the precision, and the
   exception masks) into a 2-byte memory area. See also
   <literal>FLDCW</literal> (<xref linkend="inst-ref-fldcw">).</para>

  <para><literal>FNSTCW</literal> does the same thing as
   <literal>FSTCW</literal>, without first waiting for pending
   floating-point exceptions to clear.</para>
 </sect1>

 <sect1 id="inst-ref-fstenv">
  <title><literal>FSTENV</literal>: Store Floating-Point
   Environment</title>

  <indexterm>
   <primary><literal>FSTENV</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNSTENV</literal></primary>
  </indexterm>

  <screen>FSTENV mem                    ; 9B D9 /6             [8086,FPU]
FNSTENV mem                   ; D9 /6                [8086,FPU]</screen>

  <para><literal>FSTENV</literal> stores the FPU operating environment
   (control word, status word, tag word, instruction pointer, data
   pointer and last opcode) into memory. The memory area is 14 or 28
   bytes long, depending on the CPU mode at the time. See also
   <literal>FLDENV</literal> (<xref
    linkend="inst-ref-fldenv">).</para>

  <para><literal>FNSTENV</literal> does the same thing as
   <literal>FSTENV</literal>, without first waiting for pending
   floating-point exceptions to clear.</para>
 </sect1>

 <sect1 id="inst-ref-fstsw">
  <title><literal>FSTSW</literal>: Store Floating-Point Status
   Word</title>

  <indexterm>
   <primary><literal>FSTSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FNSTSW</literal></primary>
  </indexterm>

  <screen>FSTSW mem16                   ; 9B DD /0             [8086,FPU]
FSTSW AX                      ; 9B DF E0             [286,FPU]

FNSTSW mem16                  ; DD /0                [8086,FPU]
FNSTSW AX                     ; DF E0                [286,FPU]</screen>

  <para><literal>FSTSW</literal> stores the FPU status word into
   &reg.ax; or into a 2-byte memory area.</para>

  <para><literal>FNSTSW</literal> does the same thing as
   <literal>FSTSW</literal>, without first waiting for pending
   floating-point exceptions to clear.</para>
 </sect1>

 <sect1 id="inst-ref-fsub">
  <title><literal>FSUB</literal>, <literal>FSUBP</literal>,
   <literal>FSUBR</literal>, <literal>FSUBRP</literal>: Floating-Point
   Subtract</title>

  <indexterm>
   <primary><literal>FSUB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FSUBP</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FSUBR</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FSUBRP</literal></primary>
  </indexterm>

  <screen>FSUB mem32                    ; D8 /4                [8086,FPU]
FSUB mem64                    ; DC /4                [8086,FPU]

FSUB fpureg                   ; D8 E0+r              [8086,FPU]
FSUB ST0,fpureg               ; D8 E0+r              [8086,FPU]

FSUB TO fpureg                ; DC E8+r              [8086,FPU]
FSUB fpureg,ST0               ; DC E8+r              [8086,FPU]

FSUBR mem32                   ; D8 /5                [8086,FPU]
FSUBR mem64                   ; DC /5                [8086,FPU]

FSUBR fpureg                  ; D8 E8+r              [8086,FPU]
FSUBR ST0,fpureg              ; D8 E8+r              [8086,FPU]

FSUBR TO fpureg               ; DC E0+r              [8086,FPU]
FSUBR fpureg,ST0              ; DC E0+r              [8086,FPU]

FSUBP fpureg                  ; DE E8+r              [8086,FPU]
FSUBP fpureg,ST0              ; DE E8+r              [8086,FPU]

FSUBRP fpureg                 ; DE E0+r              [8086,FPU]
FSUBRP fpureg,ST0             ; DE E0+r              [8086,FPU]</screen>

  <para><literal>FSUB</literal> subtracts the given operand from
   &reg.st0; and stores the result back in &reg.st0;, unless the
   <literal>TO</literal> qualifier is given, in which case it
   subtracts &reg.st0; from the given operand and stores the result in
   the operand.</para>

  <para><literal>FSUBR</literal> does the same thing, but does the
   subtraction the other way up: so if <literal>TO</literal> is not
   given, it subtracts &reg.st0; from the given operand and stores the
   result in &reg.st0;, whereas if <literal>TO</literal> is given it
   subtracts its operand from &reg.st0; and stores the result in the
   operand.</para>

  <para><literal>FSUBP</literal> operates like <literal>FSUB
    TO</literal>, but pops the register stack once it has finished.
   <literal>FSUBRP</literal> operates like <literal>FSUBR
    TO</literal>, but pops the register stack once it has
   finished.</para>
 </sect1>

 <sect1 id="inst-ref-ftst">
  <title><literal>FTST</literal>: Test &reg.st0; Against Zero</title>

  <indexterm>
   <primary><literal>FTST</literal></primary>
  </indexterm>

  <screen>FTST                          ; D9 E4                [8086,FPU]</screen>

  <para><literal>FTST</literal> compares &reg.st0; with zero and sets
   the FPU flags accordingly. &reg.st0; is treated as the left-hand
   side of the comparison, so that a <quote>less-than</quote> result
   is generated if &reg.st0; is negative.</para>
 </sect1>

 <sect1 id="inst-ref-fucom">
  <title><literal>FUCOMxx</literal>: Floating-Point Unordered
   Compare</title>

  <indexterm>
   <primary><literal>FUCOMxx</literal></primary>
  </indexterm>

  <screen>FUCOM fpureg                  ; DD E0+r              [386,FPU]
FUCOM ST0,fpureg              ; DD E0+r              [386,FPU]

FUCOMP fpureg                 ; DD E8+r              [386,FPU]
FUCOMP ST0,fpureg             ; DD E8+r              [386,FPU]

FUCOMPP                       ; DA E9                [386,FPU]

FUCOMI fpureg                 ; DB E8+r              [P6,FPU]
FUCOMI ST0,fpureg             ; DB E8+r              [P6,FPU]

FUCOMIP fpureg                ; DF E8+r              [P6,FPU]
FUCOMIP ST0,fpureg            ; DF E8+r              [P6,FPU]</screen>

  <para><literal>FUCOM</literal> compares &reg.st0; with the given
   operand, and sets the FPU flags accordingly. &reg.st0; is treated
   as the left-hand side of the comparison, so that the carry flag is
   set (for a <quote>less-than</quote> result) if &reg.st0; is less
   than the given operand.</para>

  <para><literal>FUCOMP</literal> does the same as
   <literal>FUCOM</literal>, but pops the register stack afterwards.
   <literal>FUCOMPP</literal> compares &reg.st0; with &reg.st1; and
   then pops the register stack twice.</para>

  <para><literal>FUCOMI</literal> and <literal>FUCOMIP</literal> work
   like the corresponding forms of <literal>FUCOM</literal> and
   <literal>FUCOMP</literal>, but write their results directly to the
   CPU flags register rather than the FPU status word, so they can be
   immediately followed by conditional jump or conditional move
   instructions.</para>

  <para>The <literal>FUCOM</literal> instructions differ from the
   <literal>FCOM</literal> instructions (<xref
    linkend="inst-ref-fcom">) only in the way they handle quiet NaNs:
   <literal>FUCOM</literal> will handle them silently and set the
   condition code flags to an <quote>unordered</quote> result, whereas
   <literal>FCOM</literal> will generate an exception.</para>
 </sect1>

 <sect1 id="inst-ref-fxam">
  <title><literal>FXAM</literal>: Examine Class of Value in
   &reg.st0;</title>

  <indexterm>
   <primary><literal>FXAM</literal></primary>
  </indexterm>

  <screen>FXAM                          ; D9 E5                [8086,FPU]</screen>

  <para><literal>FXAM</literal> sets the FPU flags C3, C2 and C0
   depending on the type of value stored in &reg.st0;: 000
   (respectively) for an unsupported format, 001 for a NaN, 010 for a
   normal finite number, 011 for an infinity, 100 for a zero, 101 for
   an empty register, and 110 for a denormal. It also sets the C1 flag
   to the sign of the number.</para>
 </sect1>

 <sect1 id="inst-ref-fxch">
  <title><literal>FXCH</literal>: Floating-Point Exchange</title>

  <indexterm>
   <primary><literal>FXCH</literal></primary>
  </indexterm>

  <screen>FXCH                          ; D9 C9                [8086,FPU]
FXCH fpureg                   ; D9 C8+r              [8086,FPU]
FXCH fpureg,ST0               ; D9 C8+r              [8086,FPU]
FXCH ST0,fpureg               ; D9 C8+r              [8086,FPU]</screen>

  <para><literal>FXCH</literal> exchanges &reg.st0; with a given FPU
   register. The no-operand form exchanges &reg.st0; with
   &reg.st1;.</para>
 </sect1>

 <sect1 id="inst-ref-fxrstor">
  <title><literal>FXRSTOR</literal>: Restore FP and MMXTM State and
   Streaming SIMD Extension State</title>

  <indexterm>
   <primary><literal>FXRSTOR</literal></primary>
  </indexterm>

  <screen>FXRSTOR memory           ; 0F,AE,/1               [P6,SSE,FPU]</screen>

  <para>The <literal>FXRSTOR</literal> instruction reloads the FP and
   MMXTM technology state, and the Streaming SIMD Extension state
   (environment and registers), from the 512-byte memory area defined
   by memory. This data should have been written by a previous
   FXSAVE.</para>
 </sect1>

 <sect1 id="inst-ref-fxsave">
  <title><literal>FXSAVE</literal>: Store FP and MMXTM State and
   Streaming SIMD</title>

  <indexterm>
   <primary><literal>FXSAVE</literal></primary>
  </indexterm>

  <screen>FXSAVE memory           ; 0F,AE,/0         [P6,SSE,FPU]</screen>

  <para><literal>FXSAVE</literal>The FXSAVE instruction writes the
   current FP and MMXTM technology state, and Streaming SIMD Extension
   state (environment and registers), to the specified 512-byte
   destination defined by memory. It does this without checking for
   pending unmasked floating-point exceptions (similar to the
   operation of FNSAVE). Unlike the FSAVE/FNSAVE instructions, the
   processor retains the contents of the FP and MMXTM technology state
   and Streaming SIMD Extension state in the processor after the state
   has been saved.  This instruction has been optimized to maximize
   floating-point save performance.</para>
 </sect1>

 <sect1 id="inst-ref-fxtract">
  <title><literal>FXTRACT</literal>: Extract Exponent and
   Significand</title>

  <indexterm>
   <primary><literal>FXTRACT</literal></primary>
  </indexterm>

  <screen>FXTRACT                       ; D9 F4                [8086,FPU]</screen>

  <para><literal>FXTRACT</literal> separates the number in &reg.st0;
   into its exponent and significand (mantissa), stores the exponent
   back into &reg.st0;, and then pushes the significand on the
   register stack (so that the significand ends up in &reg.st0;, and
   the exponent in &reg.st1;).</para>
 </sect1>

 <sect1 id="inst-ref-fyl2x">
  <title><literal>FYL2X</literal>, <literal>FYL2XP1</literal>: Compute
   Y times Log2(X) or Log2(X+1)</title>

  <indexterm>
   <primary><literal>FYL2X</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>FYL2XP1</literal></primary>
  </indexterm>

  <screen>FYL2X                         ; D9 F1                [8086,FPU]
FYL2XP1                       ; D9 F9                [8086,FPU]</screen>

  <para><literal>FYL2X</literal> multiplies &reg.st1; by the base-2
   logarithm of &reg.st0;, stores the result in &reg.st1;, and pops
   the register stack (so that the result ends up in &reg.st0;).
   &reg.st0; must be non-zero and positive.</para>

  <para><literal>FYL2XP1</literal> works the same way, but replacing
   the base-2 log of &reg.st0; with that of &reg.st0; plus one. This
   time, &reg.st0; must have magnitude no greater than 1 minus half
   the square root of two.</para>
 </sect1>

 <sect1 id="inst-ref-hlt">
  <title><literal>HLT</literal>: Halt Processor</title>

  <indexterm>
   <primary><literal>HLT</literal></primary>
  </indexterm>

  <screen>HLT                           ; F4                   [8086]</screen>

  <para><literal>HLT</literal> puts the processor into a halted state,
   where it will perform no more operations until restarted by an
   interrupt or a reset.</para>
 </sect1>
<![%inst-ref.undoc;[
 <sect1 id="inst-ref-ibts">
  <title><literal>IBTS</literal>: Insert Bit String</title>

  <indexterm>
   <primary><literal>IBTS</literal></primary>
  </indexterm>

  <screen>IBTS r/m16,reg16              ; o16 0F A7 /r         [386,UNDOC]
IBTS r/m32,reg32              ; o32 0F A7 /r         [386,UNDOC]</screen>

  <para>No clear documentation seems to be available for this
   instruction: the best I've been able to find reads <quote>Takes a
    string of bits from the second operand and puts them in the first
    operand</quote>.  It is present only in early 386 processors, and
   conflicts with the opcodes for <literal>CMPXCHG486</literal>. NASM
   supports it only for completeness.  Its counterpart is
   <literal>XBTS</literal> (see <xref
    linkend="inst-ref-xbts">).</para>
 </sect1>
]]>
 <sect1 id="inst-ref-idiv">
  <title><literal>IDIV</literal>: Signed Integer Divide</title>

  <indexterm>
   <primary><literal>IDIV</literal></primary>
  </indexterm>

  <screen>IDIV r/m8                     ; F6 /7                [8086]
IDIV r/m16                    ; o16 F7 /7            [8086]
IDIV r/m32                    ; o32 F7 /7            [386]</screen>

  <para><literal>IDIV</literal> performs signed integer division. The
   explicit operand provided is the divisor; the dividend and
   destination operands are implicit, in the following way:</para>

  <itemizedlist>
   <listitem>
    <para>For <literal>IDIV r/m8</literal>, &reg.ax; is divided by the
     given operand; the quotient is stored in &reg.al; and the
     remainder in &reg.ah;.</para>
   </listitem>

   <listitem>
    <para>For <literal>IDIV r/m16</literal>,
     <literal>&reg.dx;:&reg.ax;</literal> is divided by the given
     operand; the quotient is stored in &reg.ax; and the remainder in
     &reg.dx;.</para>
   </listitem>

   <listitem>
    <para>For <literal>IDIV r/m32</literal>,
     <literal>&reg.edx;:&reg.eax;</literal> is divided by the given
     operand; the quotient is stored in &reg.eax; and the remainder in
     &reg.edx;.</para>
   </listitem>
  </itemizedlist>

  <para>Unsigned integer division is performed by the
   <literal>DIV</literal> instruction: see <xref
    linkend="inst-ref-div">.</para>
 </sect1>

 <sect1 id="inst-ref-imul">
  <title><literal>IMUL</literal>: Signed Integer Multiply</title>

  <indexterm>
   <primary><literal>IMUL</literal></primary>
  </indexterm>

  <screen>IMUL r/m8                     ; F6 /5                [8086]
IMUL r/m16                    ; o16 F7 /5            [8086]
IMUL r/m32                    ; o32 F7 /5            [386]

IMUL reg16,r/m16              ; o16 0F AF /r         [386]
IMUL reg32,r/m32              ; o32 0F AF /r         [386]

IMUL reg16,imm8               ; o16 6B /r ib         [286]
IMUL reg16,imm16              ; o16 69 /r iw         [286]
IMUL reg32,imm8               ; o32 6B /r ib         [386]
IMUL reg32,imm32              ; o32 69 /r id         [386]

IMUL reg16,r/m16,imm8         ; o16 6B /r ib         [286]
IMUL reg16,r/m16,imm16        ; o16 69 /r iw         [286]
IMUL reg32,r/m32,imm8         ; o32 6B /r ib         [386]
IMUL reg32,r/m32,imm32        ; o32 69 /r id         [386]</screen>

  <para><literal>IMUL</literal> performs signed integer
   multiplication. For the single-operand form, the other operand and
   destination are implicit, in the following way:</para>

  <itemizedlist>
   <listitem>
    <para>For <literal>IMUL r/m8</literal>, &reg.al; is multiplied by
     the given operand; the product is stored in &reg.ax;.</para>
   </listitem>

   <listitem>
    <para>For <literal>IMUL r/m16</literal>, &reg.ax; is multiplied by
     the given operand; the product is stored in
     <literal>&reg.dx;:&reg.ax;</literal>.</para>
   </listitem>

   <listitem>
    <para>For <literal>IMUL r/m32</literal>, &reg.eax; is multiplied
     by the given operand; the product is stored in
     <literal>&reg.edx;:&reg.eax;</literal>.</para>
   </listitem>
  </itemizedlist>

  <para>The two-operand form multiplies its two operands and stores
   the result in the destination (first) operand. The three-operand
   form multiplies its last two operands and stores the result in the
   first operand.</para>

  <para>The two-operand form is in fact a shorthand for the
   three-operand form, as can be seen by examining the opcode
   descriptions: in the two-operand form, the code
   <literal>/r</literal> takes both its register and
   <literal>r/m</literal> parts from the same operand (the first
   one).</para>

  <para>In the forms with an 8-bit immediate operand and another
   longer source operand, the immediate operand is considered to be
   signed, and is sign-extended to the length of the other source
   operand. In these cases, the <literal>BYTE</literal> qualifier is
   necessary to force NASM to generate this form of the
   instruction.</para>

  <para>Unsigned integer multiplication is performed by the
   <literal>MUL</literal> instruction: see <xref
    linkend="inst-ref-mul">.</para>
 </sect1>

 <sect1 id="inst-ref-in">
  <title><literal>IN</literal>: Input from I/O Port</title>

  <indexterm>
   <primary><literal>IN</literal></primary>
  </indexterm>

  <screen>IN AL,imm8                    ; E4 ib                [8086]
IN AX,imm8                    ; o16 E5 ib            [8086]
IN EAX,imm8                   ; o32 E5 ib            [386]
IN AL,DX                      ; EC                   [8086]
IN AX,DX                      ; o16 ED               [8086]
IN EAX,DX                     ; o32 ED               [386]</screen>

  <para><literal>IN</literal> reads a byte, word or doubleword from
   the specified I/O port, and stores it in the given destination
   register. The port number may be specified as an immediate value if
   it is between 0 and 255, and otherwise must be stored in
   <literal>DX</literal>. See also <literal>OUT</literal> (<xref
    linkend="inst-ref-out">).</para>
 </sect1>

 <sect1 id="inst-ref-inc">
  <title><literal>INC</literal>: Increment Integer</title>

  <indexterm>
   <primary><literal>INC</literal></primary>
  </indexterm>

  <screen>INC reg16                     ; o16 40+r             [8086]
INC reg32                     ; o32 40+r             [386]
INC r/m8                      ; FE /0                [8086]
INC r/m16                     ; o16 FF /0            [8086]
INC r/m32                     ; o32 FF /0            [386]</screen>

  <para><literal>INC</literal> adds 1 to its operand. It does
   <emphasis>not</emphasis> affect the carry flag: to affect the carry
   flag, use <literal>ADD something,1</literal> (see <xref
    linkend="inst-ref-add">). See also <literal>DEC</literal> (<xref
    linkend="inst-ref-dec">).</para>
 </sect1>

 <sect1 id="inst-ref-insb">
  <title><literal>INSB</literal>, <literal>INSW</literal>,
   <literal>INSD</literal>: Input String from I/O Port</title>

  <indexterm>
   <primary><literal>INSB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>INSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>INSD</literal></primary>
  </indexterm>

  <screen>INSB                          ; 6C                   [186]
INSW                          ; o16 6D               [186]
INSD                          ; o32 6D               [386]</screen>

  <para><literal>INSB</literal> inputs a byte from the I/O port
   specified in &reg.dx; and stores it at
   <literal>[&reg.es;:&reg.di;]</literal> or
   <literal>[&reg.es;:&reg.edi;]</literal>. It then increments or
   decrements (depending on the direction flag: increments if the flag
   is clear, decrements if it is set) &reg.di; or &reg.edi;.</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The register used is &reg.di; if the address size is 16 bits,
   and &reg.edi; if it is 32 bits. If you need to use an address size
   not equal to the current <literal>BITS</literal> setting, you can
   use an explicit <literal>a16</literal> or <literal>a32</literal>
   prefix.</para>

  <para>Segment override prefixes have no effect for this instruction:
   the use of &reg.es; for the load from <literal>[DI]</literal> or
   <literal>[&reg.edi;]</literal> cannot be overridden.</para>

  <para><literal>INSW</literal> and <literal>INSD</literal> work in
   the same way, but they input a word or a doubleword instead of a
   byte, and increment or decrement the addressing register by 2 or 4
   instead of 1.</para>

  <para>The <literal>REP</literal> prefix may be used to repeat the
   instruction &reg.cx; (or &reg.ecx; - again, the address size
   chooses which) times.</para>

  <para>See also <literal>OUTSB</literal>, <literal>OUTSW</literal>
   and <literal>OUTSD</literal> (<xref
    linkend="inst-ref-outsb">).</para>
 </sect1>

 <sect1 id="inst-ref-int">
  <title><literal>INT</literal>: Software Interrupt</title>

  <indexterm>
   <primary><literal>INT</literal></primary>
  </indexterm>

  <screen>INT imm8                      ; CD ib                [8086]</screen>

  <para><literal>INT</literal> causes a software interrupt through a
   specified vector number from 0 to 255.</para>

  <para>The code generated by the <literal>INT</literal> instruction
   is always two bytes long: although there are short forms for some
   <literal>INT</literal> instructions, NASM does not generate them
   when it sees the <literal>INT</literal> mnemonic. In order to
   generate single-byte breakpoint instructions, use the
   <literal>INT3</literal> or <literal>INT1</literal> instructions
   (see <xref linkend="inst-ref-int1">) instead.</para>
 </sect1>

 <sect1 id="inst-ref-int1">
  <title><literal>INT3</literal>, <literal>INT1</literal>,
   <literal>ICEBP</literal>, <literal>INT01</literal>:
   Breakpoints</title>

  <indexterm>
   <primary><literal>INT3</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>INT1</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>ICEBP</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>INT01</literal></primary>
  </indexterm>

  <screen>INT1                          ; F1                   [P6]
ICEBP                         ; F1                   [P6]
INT01                         ; F1                   [P6]

INT3                          ; CC                   [8086]</screen>

  <para><literal>INT1</literal> and <literal>INT3</literal> are short
   one-byte forms of the instructions <literal>INT 1</literal> and
   <literal>INT 3</literal> (see <xref linkend="inst-ref-int">). They
   perform a similar function to their longer counterparts, but take
   up less code space. They are used as breakpoints by
   debuggers.</para>

  <para><literal>INT1</literal>, and its alternative synonyms
   <literal>INT01</literal> and <literal>ICEBP</literal>, is an
   instruction used by in-circuit emulators (ICEs). It is present,
   though not documented, on some processors down to the 286, but is
   only documented for the Pentium Pro. <literal>INT3</literal> is the
   instruction normally used as a breakpoint by debuggers.</para>

  <para><literal>INT3</literal> is not precisely equivalent to
   <literal>INT 3</literal>: the short form, since it is designed to
   be used as a breakpoint, bypasses the normal IOPL checks in
   virtual-8086 mode, and also does not go through interrupt
   redirection.</para>
 </sect1>

 <sect1 id="inst-ref-into">
  <title><literal>INTO</literal>: Interrupt if Overflow</title>

  <indexterm>
   <primary><literal>INTO</literal></primary>
  </indexterm>

  <screen>INTO                          ; CE                   [8086]</screen>

  <para><literal>INTO</literal> performs an <literal>INT 4</literal>
   software interrupt (see <xref linkend="inst-ref-int">) if and only
   if the overflow flag is set.</para>
 </sect1>

 <sect1 id="inst-ref-invd">
  <title><literal>INVD</literal>: Invalidate Internal Caches</title>

  <indexterm>
   <primary><literal>INVD</literal></primary>
  </indexterm>

  <screen>INVD                          ; 0F 08                [486]</screen>

  <para><literal>INVD</literal> invalidates and empties the
   processor's internal caches, and causes the processor to instruct
   external caches to do the same. It does not write the contents of
   the caches back to memory first: any modified data held in the
   caches will be lost. To write the data back first, use
   <literal>WBINVD</literal> (<xref
    linkend="inst-ref-wbinvd">).</para>
 </sect1>

 <sect1 id="inst-ref-invlpg">
  <title><literal>INVLPG</literal>: Invalidate TLB Entry</title>

  <indexterm>
   <primary><literal>INVLPG</literal></primary>
  </indexterm>

  <screen>INVLPG mem                    ; 0F 01 /0             [486]</screen>

  <para><literal>INVLPG</literal> invalidates the translation
   lookahead buffer (TLB) entry associated with the supplied memory
   address.</para>
 </sect1>

 <sect1 id="inst-ref-iret">
  <title><literal>IRET</literal>, <literal>IRETW</literal>,
   <literal>IRETD</literal>: Return from Interrupt</title>

  <indexterm>
   <primary><literal>IRET</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>IRETW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>IRETD</literal></primary>
  </indexterm>

  <screen>IRET                          ; CF                   [8086]
IRETW                         ; o16 CF               [8086]
IRETD                         ; o32 CF               [386]</screen>

  <para><literal>IRET</literal> returns from an interrupt (hardware or
   software) by means of popping &reg.ip; (or &reg.eip;), &reg.cs;,
   and the flags off the stack and then continuing execution from the
   new <literal>&reg.cs;:&reg.ip;</literal>.</para>

  <para><literal>IRETW</literal> pops &reg.ip;, &reg.cs; and the flags
   as 2 bytes each, taking 6 bytes off the stack in total.
   <literal>IRETD</literal> pops &reg.eip; as 4 bytes, pops a further
   4 bytes of which the top two are discarded and the bottom two go
   into &reg.cs;, and pops the flags as 4 bytes as well, taking 12
   bytes off the stack.</para>

  <para><literal>IRET</literal> is a shorthand for either
   <literal>IRETW</literal> or <literal>IRETD</literal>, depending on
   the default <literal>BITS</literal> setting at the time.</para>
 </sect1>

 <sect1 id="inst-ref-jcxz">
  <title><literal>JCXZ</literal>, <literal>JECXZ</literal>: Jump if
   CX/ECX Zero</title>

  <indexterm>
   <primary><literal>JCXZ</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>JECXZ</literal></primary>
  </indexterm>

  <screen>JCXZ imm                      ; a16 E3 rb            [8086]
JECXZ imm                     ; a32 E3 rb            [386]</screen>

  <para><literal>JCXZ</literal> performs a short jump (with maximum
   range 128 bytes) if and only if the contents of the &reg.cx;
   register is 0. <literal>JECXZ</literal> does the same thing, but
   with &reg.ecx;.</para>
 </sect1>

 <sect1 id="inst-ref-jmp">
  <title><literal>JMP</literal>: Jump</title>

  <indexterm>
   <primary><literal>JMP</literal></primary>
  </indexterm>

  <screen>JMP imm                       ; E9 rw/rd             [8086]
JMP SHORT imm                 ; EB rb                [8086]
JMP imm:imm16                 ; o16 EA iw iw         [8086]
JMP imm:imm32                 ; o32 EA id iw         [386]
JMP FAR mem                   ; o16 FF /5            [8086]
JMP FAR mem                   ; o32 FF /5            [386]
JMP r/m16                     ; o16 FF /4            [8086]
JMP r/m32                     ; o32 FF /4            [386]</screen>

  <para><literal>JMP</literal> jumps to a given address. The address
   may be specified as an absolute segment and offset, or as a
   relative jump within the current segment.</para>

  <para><literal>JMP SHORT imm</literal> has a maximum range of 128
   bytes, since the displacement is specified as only 8 bits, but
   takes up less code space. NASM does not choose when to generate
   <literal>JMP SHORT</literal> for you: you must explicitly code
   <literal>SHORT</literal> every time you want a short jump.</para>

  <indexterm>
   <primary>far jump</primary>
  </indexterm>

  <para>You can choose between the two immediate far jump forms
   (<literal>JMP imm:imm</literal>) by the use of the
   <literal>WORD</literal> and <literal>DWORD</literal> keywords:
   <literal>JMP WORD 0x1234:0x5678</literal>) or <literal>JMP DWORD
    0x1234:0x56789abc</literal>.</para>

  <para>The <literal>JMP FAR mem</literal> forms execute a far jump by
   loading the destination address out of memory. The address loaded
   consists of 16 or 32 bits of offset (depending on the operand
   size), and 16 bits of segment. The operand size may be overridden
   using <literal>JMP WORD FAR mem</literal> or <literal>JMP DWORD FAR
    mem</literal>.</para>

  <indexterm>
   <primary>near jump</primary>
  </indexterm>

  <para>The <literal>JMP r/m</literal> forms execute a near jump
   (within the same segment), loading the destination address out of
   memory or out of a register. The keyword <literal>NEAR</literal>
   may be specified, for clarity, in these forms, but is not
   necessary. Again, operand size can be overridden using <literal>JMP
    WORD mem</literal> or <literal>JMP DWORD mem</literal>.</para>

  <para>As a convenience, NASM does not require you to jump to a far
   symbol by coding the cumbersome <literal>JMP SEG
    routine:routine</literal>, but instead allows the easier synonym
   <literal>JMP FAR routine</literal>.</para>

  <para>The <literal>CALL r/m</literal> forms given above are near
   calls; NASM will accept the <literal>NEAR</literal> keyword (e.g.
   <literal>CALL NEAR [address]</literal>), even though it is not
   strictly necessary.</para>
 </sect1>

 <sect1 id="inst-ref-jcc">
  <title><literal>Jcc</literal>: Conditional Branch</title>

  <indexterm>
   <primary><literal>Jcc</literal></primary>
  </indexterm>

  <screen>Jcc imm                       ; 70+cc rb             [8086]
Jcc NEAR imm                  ; 0F 80+cc rw/rd       [386]</screen>

  <indexterm>
   <primary>conditional jump</primary>
  </indexterm>

  <para>The conditional jump instructions execute a near (same
   segment) jump if and only if their conditions are satisfied. For
   example, <literal>JNZ</literal> jumps only if the zero flag is not
   set.</para>

  <para>The ordinary form of the instructions has only a 128-byte
   range; the <literal>NEAR</literal> form is a 386 extension to the
   instruction set, and can span the full size of a segment. NASM will
   not override your choice of jump instruction: if you want
   <literal>Jcc NEAR</literal>, you have to use the
   <literal>NEAR</literal> keyword.</para>

  <para>The <literal>SHORT</literal> keyword is allowed on the first
   form of the instruction, for clarity, but is not necessary.</para>
 </sect1>

 <sect1 id="inst-ref-lahf">
  <title><literal>LAHF</literal>: Load AH from Flags</title>

  <indexterm>
   <primary><literal>LAHF</literal></primary>
  </indexterm>

  <screen>LAHF                          ; 9F                   [8086]</screen>

  <para><literal>LAHF</literal> sets the <literal>AH</literal>
   register according to the contents of the low byte of the flags
   word. See also <literal>SAHF</literal> (<xref
    linkend="inst-ref-sahf">).</para>
 </sect1>

 <sect1 id="inst-ref-lar">
  <title><literal>LAR</literal>: Load Access Rights</title>

  <indexterm>
   <primary><literal>LAR</literal></primary>
  </indexterm>

  <screen>LAR reg16,r/m16               ; o16 0F 02 /r         [286,PRIV]
LAR reg32,r/m32               ; o32 0F 02 /r         [286,PRIV]</screen>

  <para><literal>LAR</literal> takes the segment selector specified by
   its source (second) operand, finds the corresponding segment
   descriptor in the GDT or LDT, and loads the access-rights byte of
   the descriptor into its destination (first) operand.</para>
 </sect1>

 <sect1 id="inst-ref-lds">
  <title><literal>LDS</literal>, <literal>LES</literal>,
   <literal>LFS</literal>, <literal>LGS</literal>,
   <literal>LSS</literal>: Load Far Pointer</title>

  <indexterm>
   <primary><literal>LDS</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LES</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LFS</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LGS</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LSS</literal></primary>
  </indexterm>

  <screen>LDS reg16,mem                 ; o16 C5 /r            [8086]
LDS reg32,mem                 ; o32 C5 /r            [8086]

LES reg16,mem                 ; o16 C4 /r            [8086]
LES reg32,mem                 ; o32 C4 /r            [8086]

LFS reg16,mem                 ; o16 0F B4 /r         [386]
LFS reg32,mem                 ; o32 0F B4 /r         [386]

LGS reg16,mem                 ; o16 0F B5 /r         [386]
LGS reg32,mem                 ; o32 0F B5 /r         [386]

LSS reg16,mem                 ; o16 0F B2 /r         [386]
LSS reg32,mem                 ; o32 0F B2 /r         [386]</screen>

  <para>These instructions load an entire far pointer (16 or 32 bits
   of offset, plus 16 bits of segment) out of memory in one go.
   <literal>LDS</literal>, for example, loads 16 or 32 bits from the
   given memory address into the given register (depending on the size
   of the register), then loads the <emphasis>next</emphasis> 16 bits
   from memory into &reg.ds;. <literal>LES</literal>,
   <literal>LFS</literal>, <literal>LGS</literal> and
   <literal>LSS</literal> work in the same way but use the other
   segment registers.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insLDMXCSR} \i<literal>LDMXCSR</literal>: Load Streaming SIMD Extension
 Control/Status

\c LDMXCSR memory           ; 0F,AE,/2            [KATMAI,SSE,SD]

<literal>LDMXCSR</literal> The MXCSR control/status register is used to enable
 masked/unmasked exception handling, to set rounding modes, to
  set flush-to-zero mode, and to view exception status flags.
]]>
 <sect1 id="inst-ref-lea">
  <title><literal>LEA</literal>: Load Effective Address</title>

  <indexterm>
   <primary><literal>LEA</literal></primary>
  </indexterm>

  <screen>LEA reg16,mem                 ; o16 8D /r            [8086]
LEA reg32,mem                 ; o32 8D /r            [8086]</screen>

  <para><literal>LEA</literal>, despite its syntax, does not access
   memory. It calculates the effective address specified by its second
   operand as if it were going to load or store data from it, but
   instead it stores the calculated address into the register
   specified by its first operand. This can be used to perform quite
   complex calculations (e.g. <literal>LEA
    EAX,[EBX+ECX*4+100]</literal>) in one instruction.</para>

  <para><literal>LEA</literal>, despite being a purely arithmetic
   instruction which accesses no memory, still requires square
   brackets around its second operand, as if it were a memory
   reference.</para>
 </sect1>

 <sect1 id="inst-ref-leave">
  <title><literal>LEAVE</literal>: Destroy Stack Frame</title>

  <indexterm>
   <primary><literal>LEAVE</literal></primary>
  </indexterm>

  <screen>LEAVE                         ; C9                   [186]</screen>

  <para><literal>LEAVE</literal> destroys a stack frame of the form
   created by the <literal>ENTER</literal> instruction (see
   <xref linkend="inst-ref-enter">). It is functionally equivalent to
   <literal>MOV ESP,EBP</literal> followed by <literal>POP
    EBP</literal> (or <literal>MOV SP,BP</literal> followed by
   <literal>POP BP</literal> in 16-bit mode).</para>
 </sect1>

 <sect1 id="inst-ref-lgdt">
  <title><literal>LGDT</literal>, <literal>LIDT</literal>,
   <literal>LLDT</literal>: Load Descriptor Tables</title>

  <indexterm>
   <primary><literal>LGDT</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LIDT</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LLDT</literal></primary>
  </indexterm>

  <screen>LGDT mem                      ; 0F 01 /2             [286,PRIV]
LIDT mem                      ; 0F 01 /3             [286,PRIV]
LLDT r/m16                    ; 0F 00 /2             [286,PRIV]</screen>

  <para><literal>LGDT</literal> and <literal>LIDT</literal> both take
   a 6-byte memory area as an operand: they load a 32-bit linear
   address and a 16-bit size limit from that area (in the opposite
   order) into the GDTR (global descriptor table register) or IDTR
   (interrupt descriptor table register). These are the only
   instructions which directly use <emphasis>linear</emphasis>
   addresses, rather than segment/offset pairs.</para>

  <para><literal>LLDT</literal> takes a segment selector as an
   operand. The processor looks up that selector in the GDT and stores
   the limit and base address given there into the LDTR (local
   descriptor table register).</para>

  <para>See also <literal>SGDT</literal>, <literal>SIDT</literal> and
   <literal>SLDT</literal> (<xref linkend="inst-ref-sgdt">).</para>
 </sect1>

 <sect1 id="inst-ref-lmsw">
  <title><literal>LMSW</literal>: Load/Store Machine Status
   Word</title>

  <indexterm>
   <primary><literal>LMSW</literal></primary>
  </indexterm>

  <screen>LMSW r/m16                    ; 0F 01 /6             [286,PRIV]</screen>

  <para><literal>LMSW</literal> loads the bottom four bits of the
   source operand into the bottom four bits of the
   <literal>CR0</literal> control register (or the Machine Status
   Word, on 286 processors). See also <literal>SMSW</literal> (<xref
    linkend="inst-ref-smsw">).</para>
 </sect1>
<![%inst-ref.undoc;[
 <sect1 id="inst-ref-loadall">
  <title><literal>LOADALL</literal>, <literal>LOADALL286</literal>:
   Load Processor State</title>

  <indexterm>
   <primary><literal>LOADALL</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LOADALL286</literal></primary>
  </indexterm>

  <screen>LOADALL                       ; 0F 07                [386,UNDOC]
LOADALL286                    ; 0F 05                [286,UNDOC]</screen>

  <para>This instruction, in its two different-opcode forms, is
   apparently supported on most 286 processors, some 386 and possibly
   some 486. The opcode differs between the 286 and the 386.</para>

  <para>The function of the instruction is to load all information
   relating to the state of the processor out of a block of memory: on
   the 286, this block is located implicitly at absolute address
   <literal>0x800</literal>, and on the 386 and 486 it is at
   <literal>[&reg.es;:&reg.edi;]</literal>.</para>
 </sect1>
]]>
 <sect1 id="inst-ref-lodsb">
  <title><literal>LODSB</literal>, <literal>LODSW</literal>,
   <literal>LODSD</literal>: Load from String</title>

  <indexterm>
   <primary><literal>LODSB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LODSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LODSD</literal></primary>
  </indexterm>

  <screen>LODSB                         ; AC                   [8086]
LODSW                         ; o16 AD               [8086]
LODSD                         ; o32 AD               [386]</screen>

  <para><literal>LODSB</literal> loads a byte from
   <literal>[&reg.ds;:&reg.si;]</literal> or
   <literal>[&reg.ds;:&reg.esi;]</literal> into &reg.al;. It then
   increments or decrements (depending on the direction flag:
   increments if the flag is clear, decrements if it is set) &reg.si;
   or &reg.esi;.</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The register used is &reg.si; if the address size is 16 bits,
   and &reg.esi; if it is 32 bits. If you need to use an address size
   not equal to the current <literal>BITS</literal> setting, you can
   use an explicit <literal>a16</literal> or <literal>a32</literal>
   prefix.</para>

  <para>The segment register used to load from
   <literal>[&reg.si;]</literal> or <literal>[&reg.esi;]</literal> can
   be overridden by using a segment register name as a prefix (for
   example, <literal>es lodsb</literal>).</para>

  <para><literal>LODSW</literal> and <literal>LODSD</literal> work in
   the same way, but they load a word or a doubleword instead of a
   byte, and increment or decrement the addressing registers by 2 or 4
   instead of 1.</para>
 </sect1>

 <sect1 id="inst-ref-loop">
  <title><literal>LOOP</literal>, <literal>LOOPE</literal>,
   <literal>LOOPZ</literal>, <literal>LOOPNE</literal>,
   <literal>LOOPNZ</literal>: Loop with Counter</title>

  <indexterm>
   <primary><literal>LOOP</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LOOPE</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LOOPZ</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LOOPNE</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>LOOPNZ</literal></primary>
  </indexterm>

  <screen>LOOP imm                      ; E2 rb                [8086]
LOOP imm,CX                   ; a16 E2 rb            [8086]
LOOP imm,ECX                  ; a32 E2 rb            [386]

LOOPE imm                     ; E1 rb                [8086]
LOOPE imm,CX                  ; a16 E1 rb            [8086]
LOOPE imm,ECX                 ; a32 E1 rb            [386]
LOOPZ imm                     ; E1 rb                [8086]
LOOPZ imm,CX                  ; a16 E1 rb            [8086]
LOOPZ imm,ECX                 ; a32 E1 rb            [386]

LOOPNE imm                    ; E0 rb                [8086]
LOOPNE imm,CX                 ; a16 E0 rb            [8086]
LOOPNE imm,ECX                ; a32 E0 rb            [386]
LOOPNZ imm                    ; E0 rb                [8086]
LOOPNZ imm,CX                 ; a16 E0 rb            [8086]
LOOPNZ imm,ECX                ; a32 E0 rb            [386]</screen>

  <para><literal>LOOP</literal> decrements its counter register
   (either &reg.cx; or &reg.ecx;&mdash;if one is not specified
   explicitly, the <literal>BITS</literal> setting dictates which is
   used) by one, and if the counter does not become zero as a result
   of this operation, it jumps to the given label. The jump has a
   range of 128 bytes.</para>

  <para><literal>LOOPE</literal> (or its synonym
   <literal>LOOPZ</literal>) adds the additional condition that it
   only jumps if the counter is nonzero <emphasis>and</emphasis> the
   zero flag is set. Similarly, <literal>LOOPNE</literal> (and
   <literal>LOOPNZ</literal>) jumps only if the counter is nonzero and
   the zero flag is clear.</para>
 </sect1>

 <sect1 id="inst-ref-lsl">
  <title><literal>LSL</literal>: Load Segment Limit</title>

  <indexterm>
   <primary><literal>LSL</literal></primary>
  </indexterm>

  <screen>LSL reg16,r/m16               ; o16 0F 03 /r         [286,PRIV]
LSL reg32,r/m32               ; o32 0F 03 /r         [286,PRIV]</screen>

  <para><literal>LSL</literal> is given a segment selector in its
   source (second) operand; it computes the segment limit value by
   loading the segment limit field from the associated segment
   descriptor in the GDT or LDT. (This involves shifting left by 12
   bits if the segment limit is page-granular, and not if it is
   byte-granular; so you end up with a byte limit in either case.) The
   segment limit obtained is then loaded into the destination (first)
   operand.</para>
 </sect1>

 <sect1 id="inst-ref-ltr">
  <title><literal>LTR</literal>: Load Task Register</title>

  <indexterm>
   <primary><literal>LTR</literal></primary>
  </indexterm>

  <screen>LTR r/m16                     ; 0F 00 /3             [286,PRIV]</screen>

  <para><literal>LTR</literal> looks up the segment base and limit in
   the GDT or LDT descriptor specified by the segment selector given
   as its operand, and loads them into the Task Register.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insMASKMOVQ} \i<literal>MASKMOVQ</literal>: Byte Mask Write

\c MASKMOVQ mmxreg,mmxreg        ; 0F,F7,/r        [KATMAI,MMX] 

<literal>MASKMOVQ</literal> Data is stored from the mm1 register to the location
 specified by the di/edi register (using &reg.ds; segment). The size
 of the store depends on the address-size attribute. The most
 significant bit in each byte of the mask register mm2 is used
 to selectively write the data (0 = no write, 1 = write) on a
 per-byte basis.


\H{insMAXPS} \i<literal>MAXPS</literal>: Packed Single-FP Maximum

\c MAXPS xmmreg,memory           ; 0F,5F,/r   [KATMAI,SSE] 
\c MAXPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>MAXPS</literal>The MAXPS instruction returns the maximum SP FP numbers
 from XMM1 and XMM2/Mem.If the values being compared are both
 zeroes, source2 (xmm2/m128) would be returned. If source2
 (xmm2/m128) is an sNaN, this sNaN is forwarded unchanged
 to the destination (i.e., a quieted version of the sNaN
 is not returned).


\H{insMAXSS} \i<literal>MAXSS</literal>: Scalar Single-FP Maximum

\c MAXSS xmmreg,memory           ; F3,0F,5F,/r  [KATMAI,SSE] 
\c MAXSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>MAXSS</literal>The MAXSS instruction returns the maximum SP FP number
 from the lower SP FP numbers of XMM1 and XMM2/Mem; the upper
 three fields are passed through from xmm1. If the values being
 compared are both zeroes, source2 (xmm2/m128) will be returned.
 If source2 (xmm2/m128) is an sNaN, this sNaN is forwarded
 unchanged to the destination (i.e., a quieted version of the
 sNaN is not returned).


\H{insMINPS} \i<literal>MINPS</literal>: Packed Single-FP Minimum

\c MINPS xmmreg,memory           ; 0F,5D,/r   [KATMAI,SSE] 
\c MINPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>MINPS</literal> The MINPS instruction returns the minimum SP FP
 numbers from XMM1 and XMM2/Mem. If the values being compared
 are both zeroes, source2 (xmm2/m128) would be returned. If
 source2 (xmm2/m128) is an sNaN, this sNaN is forwarded unchanged
 to the destination (i.e., a quieted version of the sNaN is
 not returned).


\H{insMINSS} \i<literal>MINSS</literal>: Scalar Single-FP Minimum

\c MINSS xmmreg,memory           ; F3,0F,5D,/r [KATMAI,SSE] 
\c MINSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>MINSS</literal> The MINSS instruction returns the minimum SP FP number
 from the lower SP FP numbers from XMM1 and XMM2/Mem; the upper
 three fields are passed through from xmm1. If the values being
 compared are both zeroes, source2 (xmm2/m128) would be returned.
 If source2 (xmm2/m128) is an sNaN, this sNaN is forwarded
 unchanged to the destination (i.e., a quieted version of the
 sNaN is not returned).
]]>
 <sect1 id="inst-ref-mov">
  <title><literal>MOV</literal>: Move Data</title>

  <indexterm>
   <primary><literal>MOV</literal></primary>
  </indexterm>

  <screen>MOV r/m8,reg8                 ; 88 /r                [8086]
MOV r/m16,reg16               ; o16 89 /r            [8086]
MOV r/m32,reg32               ; o32 89 /r            [386]
MOV reg8,r/m8                 ; 8A /r                [8086]
MOV reg16,r/m16               ; o16 8B /r            [8086]
MOV reg32,r/m32               ; o32 8B /r            [386]

MOV reg8,imm8                 ; B0+r ib              [8086]
MOV reg16,imm16               ; o16 B8+r iw          [8086]
MOV reg32,imm32               ; o32 B8+r id          [386]
MOV r/m8,imm8                 ; C6 /0 ib             [8086]
MOV r/m16,imm16               ; o16 C7 /0 iw         [8086]
MOV r/m32,imm32               ; o32 C7 /0 id         [386]

MOV AL,memoffs8               ; A0 ow/od             [8086]
MOV AX,memoffs16              ; o16 A1 ow/od         [8086]
MOV EAX,memoffs32             ; o32 A1 ow/od         [386]
MOV memoffs8,AL               ; A2 ow/od             [8086]
MOV memoffs16,AX              ; o16 A3 ow/od         [8086]
MOV memoffs32,EAX             ; o32 A3 ow/od         [386]

MOV r/m16,segreg              ; o16 8C /r            [8086]
MOV r/m32,segreg              ; o32 8C /r            [386]
MOV segreg,r/m16              ; o16 8E /r            [8086]
MOV segreg,r/m32              ; o32 8E /r            [386]

MOV reg32,CR0/2/3/4           ; 0F 20 /r             [386]
MOV reg32,DR0/1/2/3/6/7       ; 0F 21 /r             [386]
MOV reg32,TR3/4/5/6/7         ; 0F 24 /r             [386]
MOV CR0/2/3/4,reg32           ; 0F 22 /r             [386]
MOV DR0/1/2/3/6/7,reg32       ; 0F 23 /r             [386]
MOV TR3/4/5/6/7,reg32         ; 0F 26 /r             [386]</screen>

  <para><literal>MOV</literal> copies the contents of its source
   (second) operand into its destination (first) operand.</para>

  <para>In all forms of the <literal>MOV</literal> instruction, the
   two operands are the same size, except for moving between a segment
   register and an <literal>r/m32</literal> operand. These
   instructions are treated exactly like the corresponding 16-bit
   equivalent (so that, for example, <literal>MOV DS,EAX</literal>
   functions identically to <literal>MOV DS,AX</literal> but saves a
   prefix when in 32-bit mode), except that when a segment register is
   moved into a 32-bit destination, the top two bytes of the result
   are undefined.</para>

  <para><literal>MOV</literal> may not use &reg.cs; as a
   destination.</para>

  <para><literal>CR4</literal> is only a supported register on the
   Pentium and above.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insMOVAPS} \i<literal>MOVAPS</literal>: Move Aligned Four Packed Single-FP

\c MOVAPS xmmreg,memory           ; 0F,28,/r     [KATMAI,SSE] 
\c MOVAPS memory,xmmreg           ; 0F,29,/r     [KATMAI,SSE] 
\c MOVAPS xmmreg,xmmreg           ; ??           [KATMAI,SSE] 
\c MOVAPS xmmreg,xmmreg           ; ??           [KATMAI,SSE] 

<literal>MOVAPS</literal> The linear address corresponds to the address of the
 least-significant byte of the referenced memory data. When a
 memory address is indicated, the 16 bytes of data at memory
 location m128 are loaded or stored. When the register-register
 form of this operation is used, the content of the 128-bit
 source register is copied into the 128-bit destination register.
]]>
 <sect1 id="inst-ref-movd">
  <title><literal>MOVD</literal>: Move Doubleword to/from MMX
   Register</title>

  <indexterm>
   <primary><literal>MOVD</literal></primary>
  </indexterm>

  <screen>MOVD mmxreg,r/m32             ; 0F 6E /r             [PENT,MMX]
MOVD r/m32,mmxreg             ; 0F 7E /r             [PENT,MMX]</screen>

  <para><literal>MOVD</literal> copies 32 bits from its source
   (second) operand into its destination (first) operand. When the
   destination is a 64-bit MMX register, the top 32 bits are set to
   zero.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insMOVHLPS} \i<literal>MOVHLPS</literal>: High to Low Packed Single-FP

\c MOVHLPS xmmreg,xmmreg         ; OF,12,/r         [KATMAI,SSE] 

<literal>MOVHLPS</literal> The upper 64-bits of the source register xmm2 are
 loaded into the lower 64-bits of the 128-bit register xmm1,
 and the upper 64-bits of xmm1 are left unchanged.


\H{insMOVHPS} \i<literal>MOVHPS</literal>: Move High Packed Single-FP

\c MOVHPS xmmreg,memory           ; 0F,16,/r     [KATMAI,SSE] 
\c MOVHPS memory,xmmreg           ; 0F,17,/r     [KATMAI,SSE] 
\c MOVHPS xmmreg,xmmreg           ; ??        [KATMAI,SSE,ND] 

<literal>MOVHPS</literal> The linear address corresponds to the address of the
 least-significant byte of the referenced memory data. When the
 load form of this operation is used, m64 is loaded into the
 upper 64-bits of the 128-bit register xmm, and the lower 64-bits
 are left unchanged.


\H{insMOVMSKPS} \i<literal>MOVMSKPS</literal>: Move Mask To Integer

\c MOVMSKPS reg32,xmmreg           ; 0F,50,/r     [KATMAI,SSE] 

<literal>MOVMSKPS</literal> The MOVMSKPS instruction returns to the integer
 register r32 a 4-bit mask formed of the most significant bits
 of each SP FP number of its operand.


\H{insMOVNTPS} \i<literal>MOVNTPS</literal>: Move Aligned Four Packed Single-FP
 Non Temporal

\c MOVNTPS memory,xmmreg           ; 0F,2B, /r     [KATMAI,SSE] 

<literal>MOVNTPS</literal> The linear address corresponds to the address of the
 least-significant byte of the referenced memory data. This store
 instruction minimizes cache pollution.


\H{insMOVNTQ} \i<literal>MOVNTQ</literal>: Move 64 Bits Non Temporal

\c MOVNTQ memory,mmxreg           ; 0F,E7,/r   [KATMAI,MMX,SM] 

<literal>MOVNTQ</literal> The linear address corresponds to the address of the
 least-significant byte of the referenced memory data. This store
 instruction minimizes cache pollution.
]]>
 <sect1 id="inst-ref-movq">
  <title><literal>MOVQ</literal>: Move Quadword to/from MMX
   Register</title>

  <indexterm>
   <primary><literal>MOVQ</literal></primary>
  </indexterm>

  <screen>MOVQ mmxreg,r/m64             ; 0F 6F /r             [PENT,MMX]
MOVQ r/m64,mmxreg             ; 0F 7F /r             [PENT,MMX]</screen>

  <para><literal>MOVQ</literal> copies 64 bits from its source
   (second) operand into its destination (first) operand.</para>
 </sect1>

 <sect1 id="inst-ref-movsb">
  <title><literal>MOVSB</literal>, <literal>MOVSW</literal>,
   <literal>MOVSD</literal>: Move String</title>

  <indexterm>
   <primary><literal>MOVSB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>MOVSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>MOVSD</literal></primary>
  </indexterm>

  <screen>MOVSB                         ; A4                   [8086]
MOVSW                         ; o16 A5               [8086]
MOVSD                         ; o32 A5               [386]</screen>

  <para><literal>MOVSB</literal> copies the byte at
   <literal>[&reg.es;:DI]</literal> or
   <literal>[&reg.es;:&reg.edi;]</literal> to
   <literal>[&reg.ds;:&reg.si;]</literal> or
   <literal>[&reg.ds;:&reg.esi;]</literal>. It then increments or
   decrements (depending on the direction flag: increments if the flag
   is clear, decrements if it is set) &reg.si; and &reg.di; (or
   &reg.esi; and &reg.edi;).</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The registers used are &reg.si; and &reg.di; if the address
   size is 16 bits, and &reg.esi; and &reg.edi; if it is 32 bits. If
   you need to use an address size not equal to the current
   <literal>BITS</literal> setting, you can use an explicit
   <literal>a16</literal> or <literal>a32</literal> prefix.</para>

  <para>The segment register used to load from
   <literal>[&reg.si;]</literal> or <literal>[&reg.esi;]</literal> can
   be overridden by using a segment register name as a prefix (for
   example, <literal>es movsb</literal>). The use of &reg.es; for the
   store to <literal>[&reg.di;]</literal> or
   <literal>[&reg.edi;]</literal> cannot be overridden.</para>

  <para><literal>MOVSW</literal> and <literal>MOVSD</literal> work in
   the same way, but they copy a word or a doubleword instead of a
   byte, and increment or decrement the addressing registers by 2 or 4
   instead of 1.</para>

  <para>The <literal>REP</literal> prefix may be used to repeat the
   instruction &reg.cx; (or &reg.ecx; - again, the address size
   chooses which) times.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insMOVSS} \i<literal>MOVSS</literal>: Move Scalar Single-FP

\c MOVSS xmmreg,memory           ; F3,0F,10,/r [KATMAI,SSE] 
\c MOVSS memory,xmmreg           ; F3,0F,11,/r [KATMAI,SSE] 
\c MOVSS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 
\c MOVSS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>MOVSS</literal> The linear address corresponds to the address of
 the least-significant byte of the referenced memory data.
 When a memory address is indicated, the four bytes of data
 at memory location m32 are loaded or stored. When the load
 form of this operation is used, the 32 bits from memory are
 copied into the lower 32 bits of the 128-bit register xmm,
 the 96 most significant bits being cleared.
]]>
 <sect1 id="inst-ref-movsx">
  <title><literal>MOVSX</literal>, <literal>MOVZX</literal>: Move Data
   with Sign or Zero Extend</title>

  <indexterm>
   <primary><literal>MOVSX</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>MOVZX</literal></primary>
  </indexterm>

  <screen>MOVSX reg16,r/m8              ; o16 0F BE /r         [386]
MOVSX reg32,r/m8              ; o32 0F BE /r         [386]
MOVSX reg32,r/m16             ; o32 0F BF /r         [386]

MOVZX reg16,r/m8              ; o16 0F B6 /r         [386]
MOVZX reg32,r/m8              ; o32 0F B6 /r         [386]
MOVZX reg32,r/m16             ; o32 0F B7 /r         [386]</screen>

  <para><literal>MOVSX</literal> sign-extends its source (second)
   operand to the length of its destination (first) operand, and
   copies the result into the destination operand.
   <literal>MOVZX</literal> does the same, but zero-extends rather
   than sign-extending.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insMOVUPS} \i<literal>MOVUPS</literal>: Move Unaligned Four Packed Single-FP

\c MOVUPS xmmreg,memory           ; 0F,10,/r    [KATMAI,SSE] 
\c MOVUPS memory,xmmreg           ; 0F,11,/r    [KATMAI,SSE] 
\c MOVUPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 
\c MOVUPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>MOVUPS</literal> The linear address corresponds to the address of the
 least-significant byte of the referenced memory data. When a
 memory address is indicated, the 16 bytes of data at memory
 location m128 are loaded to the 128-bit multimedia register
 xmm or stored from the 128-bit multimedia register xmm. When
 the register-register form of this operation is used, the content
 of the 128-bit source register is copied into 128-bit register
 xmm. No assumption is made about alignment.
]]>
 <sect1 id="inst-ref-mul">
  <title><literal>MUL</literal>: Unsigned Integer Multiply</title>

  <indexterm>
   <primary><literal>MUL</literal></primary>
  </indexterm>

  <screen>MUL r/m8                      ; F6 /4                [8086]
MUL r/m16                     ; o16 F7 /4            [8086]
MUL r/m32                     ; o32 F7 /4            [386]</screen>

  <para><literal>MUL</literal> performs unsigned integer
   multiplication. The other operand to the multiplication, and the
   destination operand, are implicit, in the following way:</para>

  <itemizedlist>
   <listitem>
    <para>For <literal>MUL r/m8</literal>, &reg.al; is multiplied by
     the given operand; the product is stored in &reg.ax;.</para>
   </listitem>

   <listitem>
    <para>For <literal>MUL r/m16</literal>, &reg.ax; is multiplied by
     the given operand; the product is stored in
     <literal>&reg.dx;:&reg.ax;</literal>.</para>
   </listitem>

   <listitem>
    <para>For <literal>MUL r/m32</literal>, &reg.eax; is multiplied by
     the given operand; the product is stored in
     <literal>&reg.edx;:&reg.eax;</literal>.</para>
   </listitem>
  </itemizedlist>

  <para>Signed integer multiplication is performed by the
   <literal>IMUL</literal> instruction: see <xref
    linkend="inst-ref-imul">.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insMULPS} \i<literal>MULPS</literal>: Packed Single-FP Multiply

\c MULPS xmmreg,memory           ; 0F,59,/r   [KATMAI,SSE] 
\c MULPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 


<literal>MULPS</literal> The MULPS instructions multiply the packed SP FP
 numbers of both their operands.


\H{insMULSS} \i<literal>MULSS</literal>: Scalar Single-FP Multiply


\c MULSS xmmreg,memory           ; F3,0F,59,/r [KATMAI,SSE] 
\c MULSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>MULSS</literal>The MULSS instructions multiply the lowest SP FP
 numbers of both their operands; the upper three fields
 are passed through from xmm1.
]]>
 <sect1 id="inst-ref-neg">
  <title><literal>NEG</literal>, <literal>NOT</literal>: Two's and
   One's Complement</title>

  <indexterm>
   <primary><literal>NEG</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>NOT</literal></primary>
  </indexterm>

  <screen>NEG r/m8                      ; F6 /3                [8086]
NEG r/m16                     ; o16 F7 /3            [8086]
NEG r/m32                     ; o32 F7 /3            [386]

NOT r/m8                      ; F6 /2                [8086]
NOT r/m16                     ; o16 F7 /2            [8086]
NOT r/m32                     ; o32 F7 /2            [386]</screen>

  <para><literal>NEG</literal> replaces the contents of its operand by
   the two's complement negation (invert all the bits and then add
   one) of the original value. <literal>NOT</literal>, similarly,
   performs one's complement (inverts all the bits).</para>
 </sect1>

 <sect1 id="inst-ref-nop">
  <title><literal>NOP</literal>: No Operation</title>

  <indexterm>
   <primary><literal>NOP</literal></primary>
  </indexterm>

  <screen>NOP                           ; 90                   [8086]</screen>

  <para><literal>NOP</literal> performs no operation. Its opcode is
   the same as that generated by <literal>XCHG AX,AX</literal> or
   <literal>XCHG EAX,EAX</literal> (depending on the processor mode;
   see <xref linkend="inst-ref-xchg">).</para>
 </sect1>

 <sect1 id="inst-ref-or">
  <title><literal>OR</literal>: Bitwise OR</title>

  <indexterm>
   <primary><literal>OR</literal></primary>
  </indexterm>

  <screen>OR r/m8,reg8                  ; 08 /r                [8086]
OR r/m16,reg16                ; o16 09 /r            [8086]
OR r/m32,reg32                ; o32 09 /r            [386]

OR reg8,r/m8                  ; 0A /r                [8086]
OR reg16,r/m16                ; o16 0B /r            [8086]
OR reg32,r/m32                ; o32 0B /r            [386]

OR r/m8,imm8                  ; 80 /1 ib             [8086]
OR r/m16,imm16                ; o16 81 /1 iw         [8086]
OR r/m32,imm32                ; o32 81 /1 id         [386]

OR r/m16,imm8                 ; o16 83 /1 ib         [8086]
OR r/m32,imm8                 ; o32 83 /1 ib         [386]

OR AL,imm8                    ; 0C ib                [8086]
OR AX,imm16                   ; o16 0D iw            [8086]
OR EAX,imm32                  ; o32 0D id            [386]</screen>

  <para><literal>OR</literal> performs a bitwise OR operation between
   its two operands (i.e. each bit of the result is 1 if and only if
   at least one of the corresponding bits of the two inputs was 1),
   and stores the result in the destination (first) operand.</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>

  <para>The MMX instruction <literal>POR</literal> (see <xref
    linkend="inst-ref-por">) performs the same operation on the 64-bit
   MMX registers.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insORPS} \i<literal>ORPS</literal>: Bit-wise Logical OR for Single-FP Data

\c ORPS xmmreg,memory           ; 0F,56,/r    [KATMAI,SSE] 
\c ORPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>ORPS</literal> The ORPS instructions return a bit-wise logical
 OR between xmm1 and xmm2/mem.
]]>
 <sect1 id="inst-ref-out">
  <title><literal>OUT</literal>: Output Data to I/O Port</title>

  <indexterm>
   <primary><literal>OUT</literal></primary>
  </indexterm>

  <screen>OUT imm8,AL                   ; E6 ib                [8086]
OUT imm8,AX                   ; o16 E7 ib            [8086]
OUT imm8,EAX                  ; o32 E7 ib            [386]
OUT DX,AL                     ; EE                   [8086]
OUT DX,AX                     ; o16 EF               [8086]
OUT DX,EAX                    ; o32 EF               [386]</screen>

  <para><literal>OUT</literal> writes the contents of the given source
   register to the specified I/O port. The port number may be
   specified as an immediate value if it is between 0 and 255, and
   otherwise must be stored in &reg.dx;. See also
   <literal>IN</literal> (<xref linkend="inst-ref-in">).</para>
 </sect1>

 <sect1 id="inst-ref-outsb">
  <title><literal>OUTSB</literal>, <literal>OUTSW</literal>,
   <literal>OUTSD</literal>: Output String to I/O Port</title>

  <indexterm>
   <primary><literal>OUTSB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>OUTSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>OUTSD</literal></primary>
  </indexterm>

  <screen>OUTSB                         ; 6E                   [186]
OUTSW                         ; o16 6F               [186]
OUTSD                         ; o32 6F               [386]</screen>

  <para><literal>OUTSB</literal> loads a byte from
   <literal>[&reg.ds;:&reg.si;]</literal> or
   <literal>[&reg.ds;:&reg.esi;]</literal> and writes it to the I/O
   port specified in <literal>DX</literal>. It then increments or
   decrements (depending on the direction flag: increments if the flag
   is clear, decrements if it is set) &reg.si; or &reg.esi;.</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The register used is &reg.si; if the address size is 16 bits,
   and &reg.esi; if it is 32 bits. If you need to use an address size
   not equal to the current <literal>BITS</literal> setting, you can
   use an explicit <literal>a16</literal> or <literal>a32</literal>
   prefix.</para>

  <para>The segment register used to load from
   <literal>[&reg.si;]</literal> or <literal>[&reg.esi;]</literal> can
   be overridden by using a segment register name as a prefix (for
   example, <literal>es outsb</literal>).</para>

  <para><literal>OUTSW</literal> and <literal>OUTSD</literal> work in
   the same way, but they output a word or a doubleword instead of a
   byte, and increment or decrement the addressing registers by 2 or 4
   instead of 1.</para>

  <para>The <literal>REP</literal> prefix may be used to repeat the
   instruction &reg.cx; (or &reg.ecx; - again, the address size
   chooses which) times.</para>
 </sect1>

 <sect1 id="inst-ref-packssdw">
  <title><literal>PACKSSDW</literal>, <literal>PACKSSWB</literal>,
   <literal>PACKUSWB</literal>: Pack Data</title>

  <indexterm>
   <primary><literal>PACKSSDW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PACKSSWB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PACKUSWB</literal></primary>
  </indexterm>

  <screen>PACKSSDW mmxreg,r/m64         ; 0F 6B /r             [PENT,MMX]
PACKSSWB mmxreg,r/m64         ; 0F 63 /r             [PENT,MMX]
PACKUSWB mmxreg,r/m64         ; 0F 67 /r             [PENT,MMX]</screen>

  <para>All these instructions start by forming a notional 128-bit
   word by placing the source (second) operand on the left of the
   destination (first) operand. <literal>PACKSSDW</literal> then
   splits this 128-bit word into four doublewords, converts each to a
   word, and loads them side by side into the destination register;
   <literal>PACKSSWB</literal> and <literal>PACKUSWB</literal> both
   split the 128-bit word into eight words, converts each to a byte,
   and loads <emphasis>those</emphasis> side by side into the
   destination register.</para>

  <para><literal>PACKSSDW</literal> and <literal>PACKSSWB</literal>
   perform signed saturation when reducing the length of numbers: if
   the number is too large to fit into the reduced space, they replace
   it by the largest signed number (<literal>7FFFh</literal> or
   <literal>7Fh</literal>) that <emphasis>will</emphasis> fit, and if
   it is too small then they replace it by the smallest signed number
   (<literal>8000h</literal> or <literal>80h</literal>) that will fit.
   <literal>PACKUSWB</literal> performs unsigned saturation: it treats
   its input as unsigned, and replaces it by the largest unsigned
   number that will fit.</para>
 </sect1>

 <sect1 id="inst-ref-paddb">
  <title><literal>PADDxx</literal>: MMX Packed Addition</title>

  <indexterm>
   <primary><literal>PADDxx</literal></primary>
  </indexterm>

  <screen>PADDB mmxreg,r/m64            ; 0F FC /r             [PENT,MMX]
PADDW mmxreg,r/m64            ; 0F FD /r             [PENT,MMX]
PADDD mmxreg,r/m64            ; 0F FE /r             [PENT,MMX]

PADDSB mmxreg,r/m64           ; 0F EC /r             [PENT,MMX]
PADDSW mmxreg,r/m64           ; 0F ED /r             [PENT,MMX]

PADDUSB mmxreg,r/m64          ; 0F DC /r             [PENT,MMX]
PADDUSW mmxreg,r/m64          ; 0F DD /r             [PENT,MMX]</screen>

  <para><literal>PADDxx</literal> all perform packed addition between
   their two 64-bit operands, storing the result in the destination
   (first) operand. The <literal>PADDxB</literal> forms treat the
   64-bit operands as vectors of eight bytes, and add each byte
   individually; <literal>PADDxW</literal> treat the operands as
   vectors of four words; and <literal>PADDD</literal> treats its
   operands as vectors of two doublewords.</para>

  <para><literal>PADDSB</literal> and <literal>PADDSW</literal>
   perform signed saturation on the sum of each pair of bytes or
   words: if the result of an addition is too large or too small to
   fit into a signed byte or word result, it is clipped (saturated) to
   the largest or smallest value which <emphasis>will</emphasis> fit.
   <literal>PADDUSB</literal> and <literal>PADDUSW</literal> similarly
   perform unsigned saturation, clipping to <literal>0FFh</literal> or
   <literal>0FFFFh</literal> if the result is larger than that.</para>
 </sect1>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-paddsiw">
  <title><literal>PADDSIW</literal>: MMX Packed Addition to Implicit
   Destination</title>

  <indexterm>
   <primary><literal>PADDSIW</literal></primary>
  </indexterm>

  <screen>PADDSIW mmxreg,r/m64          ; 0F 51 /r             [CYRIX,MMX]</screen>

  <para><literal>PADDSIW</literal>, specific to the Cyrix extensions
   to the MMX instruction set, performs the same function as
   <literal>PADDSW</literal>, except that the result is not placed in
   the register specified by the first operand, but instead in the
   register whose number differs from the first operand only in the
   last bit. So <literal>PADDSIW MM0,MM2</literal> would put the
   result in &reg.mm1;, but <literal>PADDSIW MM1,MM2</literal> would
   put the result in &reg.mm0;.</para>
 </sect1>
]]>
 <sect1 id="inst-ref-pand">
  <title><literal>PAND</literal>, <literal>PANDN</literal>: MMX
   Bitwise AND and AND-NOT</title>

  <indexterm>
   <primary><literal>PAND</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PANDN</literal></primary>
  </indexterm>

  <screen>PAND mmxreg,r/m64             ; 0F DB /r             [PENT,MMX]
PANDN mmxreg,r/m64            ; 0F DF /r             [PENT,MMX]</screen>

  <para><literal>PAND</literal> performs a bitwise AND operation
   between its two operands (i.e. each bit of the result is 1 if and
   only if the corresponding bits of the two inputs were both 1), and
   stores the result in the destination (first) operand.</para>

  <para><literal>PANDN</literal> performs the same operation, but
   performs a one's complement operation on the destination (first)
   operand first.</para>
 </sect1>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-paveb">
  <title><literal>PAVEB</literal>: MMX Packed Average</title>

  <indexterm>
   <primary><literal>PAVEB</literal></primary>
  </indexterm>

  <screen>PAVEB mmxreg,r/m64            ; 0F 50 /r             [CYRIX,MMX]</screen>

  <para><literal>PAVEB</literal>, specific to the Cyrix MMX
   extensions, treats its two operands as vectors of eight unsigned
   bytes, and calculates the average of the corresponding bytes in the
   operands. The resulting vector of eight averages is stored in the
   first operand.</para>
 </sect1>
]]>
<![%inst-ref.katmai;[
\H{insPAVGB} \i<literal>PAVGB</literal>: Packed Average

\c PAVGB mmxreg,mmxreg           ; 0F,E0, /r   [KATMAI,MMX] 
\c PAVGB mmxreg,memory           ; 0F,E3, /r  [KATMAI,MMX,SM] 


\H{insPAVGW} \i<literal>PAVGW</literal>: Packed Average

\c PAVGW mmxreg,mmxreg           ; ??          [KATMAI,MMX] 
\c PAVGW mmxreg,memory           ; ??       [KATMAI,MMX,SM] 

<literal>PAVGB</literal> The PAVG instructions add the unsigned data elements
 of the source operand to the unsigned data elements of the
 destination register, along with a carry-in. The results of
 the add are then each independently right-shifted by one bit
 position. The high order bits of each element are filled with
 the carry bits of the corresponding sum. The destination operand
 is an MMXTM technology register. The source operand can either
 be an MMXTM technology register or a 64-bit memory operand.
    The PAVGB instruction operates on packed unsigned bytes, and
 the PAVGW instruction operates on packed unsigned words. 


\H{insPAVGUSB} \i<literal>PAVGUSB</literal>: 3dnow instruction (duh!)

\c PAVGUSB mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PAVGUSB mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)
]]>
 <sect1 id="inst-ref-pcmpeqb">
  <title><literal>PCMPxx</literal>: MMX Packed Comparison</title>

  <indexterm>
   <primary><literal>PCMPxx</literal></primary>
  </indexterm>

  <screen>PCMPEQB mmxreg,r/m64          ; 0F 74 /r             [PENT,MMX]
PCMPEQW mmxreg,r/m64          ; 0F 75 /r             [PENT,MMX]
PCMPEQD mmxreg,r/m64          ; 0F 76 /r             [PENT,MMX]

PCMPGTB mmxreg,r/m64          ; 0F 64 /r             [PENT,MMX]
PCMPGTW mmxreg,r/m64          ; 0F 65 /r             [PENT,MMX]
PCMPGTD mmxreg,r/m64          ; 0F 66 /r             [PENT,MMX]</screen>

  <para>The <literal>PCMPxx</literal> instructions all treat their
   operands as vectors of bytes, words, or doublewords; corresponding
   elements of the source and destination are compared, and the
   corresponding element of the destination (first) operand is set to
   all zeros or all ones depending on the result of the
   comparison.</para>

  <para><literal>PCMPxxB</literal> treats the operands as vectors of
   eight bytes, <literal>PCMPxxW</literal> treats them as vectors of
   four words, and <literal>PCMPxxD</literal> as two
   doublewords.</para>

  <para><literal>PCMPEQx</literal> sets the corresponding element of
   the destination operand to all ones if the two elements compared
   are equal; <literal>PCMPGTx</literal> sets the destination element
   to all ones if the element of the first (destination) operand is
   greater (treated as a signed integer) than that of the second
   (source) operand.</para>
 </sect1>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-pdistib">
  <title><literal>PDISTIB</literal>: MMX Packed Distance and
   Accumulate with Implied Register</title>

  <indexterm>
   <primary><literal>PDISTIB</literal></primary>
  </indexterm>

  <screen>PDISTIB mmxreg,mem64          ; 0F 54 /r           [CYRIX,MMX]</screen>

  <para><literal>PDISTIB</literal>, specific to the Cyrix MMX
   extensions, treats its two input operands as vectors of eight
   unsigned bytes. For each byte position, it finds the absolute
   difference between the bytes in that position in the two input
   operands, and adds that value to the byte in the same position in
   the implied output register. The addition is saturated to an
   unsigned byte in the same way as <literal>PADDUSB</literal>.</para>

  <para>The implied output register is found in the same way as
   <literal>PADDSIW</literal> (<xref
    linkend="inst-ref-paddsiw">).</para>

  <para>Note that <literal>PDISTIB</literal> cannot take a register as
   its second source operand.</para>
 </sect1>
]]>
<![%inst-ref.katmai;[
 <sect1 id="inst-ref-pextrw">
  <title><literal>PEXTRW</literal>: Extract Word</title>

  <indexterm>
   <primary><literal>PEXTRW</literal></primary>
  </indexterm>

  <screen>PEXTRW reg32,mmxreg,immediate ; 0F,C5,/r,ib [KATMAI,MMX,SB,AR2]</screen>

  <para><literal>PEXTRW</literal>PEXTRW instruction moves the word in
   MM (selected by the two least significant bits of imm8) to the
   lower half of a 32-bit integer register.</para>
 </sect1>
]]>
<![%inst-ref.now3d;[
\H{insPF2ID} \i<literal>PF2ID</literal>: 3dnow instruction (duh!)

\c PF2ID mmxreg,memory           ; ??       [PENT,3DNOW,SM] 
\c PF2ID mmxreg,mmxreg           ; ??          [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFACC} \i<literal>PFACC</literal>: 3dnow instruction (duh!)

\c PFACC mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFACC mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFADD} \i<literal>PFADD</literal>: 3dnow instruction (duh!)

\c PFADD mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFADD mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFCMPEQ} \i<literal>PFCMPEQ</literal>: 3dnow instruction (duh!)

\c PFCMPEQ mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFCMPEQ mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFCMPGE} \i<literal>PFCMPGE</literal>: 3dnow instruction (duh!)

\c PFCMPGE mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFCMPGE mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFCMPGT} \i<literal>PFCMPGT</literal>: 3dnow instruction (duh!)

\c PFCMPGT mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFCMPGT mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFMAX} \i<literal>PFMAX</literal>: 3dnow instruction (duh!)

\c PFMAX mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFMAX mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFMIN} \i<literal>PFMIN</literal>: 3dnow instruction (duh!)

\c PFMIN mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFMIN mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFMUL} \i<literal>PFMUL</literal>: 3dnow instruction (duh!)

\c PFMUL mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFMUL mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFRCP} \i<literal>PFRCP</literal>: 3dnow instruction (duh!)

\c PFRCP mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFRCP mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFRCPIT1} \i<literal>PFRCPIT1</literal>: 3dnow instruction (duh!)

\c PFRCPIT1 mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFRCPIT1 mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFRCPIT2} \i<literal>PFRCPIT2</literal>: 3dnow instruction (duh!)

\c PFRCPIT2 mmxreg,memory           ; ??       [PENT,3DNOW,SM] 
\c PFRCPIT2 mmxreg,mmxreg           ; ??          [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFRSQIT1} \i<literal>PFRSQIT1</literal>: 3dnow instruction (duh!)

\c PFRSQIT1 mmxreg,memory           ; ??       [PENT,3DNOW,SM] 
\c PFRSQIT1 mmxreg,mmxreg           ; ??          [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFRSQRT} \i<literal>PFRSQRT</literal>: 3dnow instruction (duh!)

\c PFRSQRT mmxreg,memory           ; ??       [PENT,3DNOW,SM] 
\c PFRSQRT mmxreg,mmxreg           ; ??          [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFSUB} \i<literal>PFSUB</literal>: 3dnow instruction (duh!)

\c PFSUB mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PFSUB mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPFSUBR} \i<literal>PFSUBR</literal>: 3dnow instruction (duh!)

\c PFSUBR mmxreg,memory           ; ??       [PENT,3DNOW,SM] 
\c PFSUBR mmxreg,mmxreg           ; ??          [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPI2FD} \i<literal>PI2FD</literal>: 3dnow instruction (duh!)

\c PI2FD mmxreg,memory           ; ??        [PENT,3DNOW,SM] 
\c PI2FD mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)
]]>
<![%inst-ref.katmai;[
\H{insPINSRW} \i<literal>PINSRW</literal>: Insert Word

\c PINSRW mmxreg,reg16,immediate     ;0F,C4,/r,ib [KATMAI,MMX,SB,AR2] 
\c PINSRW mmxreg,reg32,immediate         ; ??  [KATMAI,MMX,SB,AR2,ND] 
\c PINSRW mmxreg,memory,immediate        ; ??     [KATMAI,MMX,SB,AR2] 
\c PINSRW mmxreg,memory|bits16,immediate ; ??  [KATMAI,MMX,SB,AR2,ND] 

<literal>PINSRW</literal> The PINSRW instruction loads a word from the lower half
 of a 32-bit integer register (or from memory) and inserts it in
 the MM destination register, at a position defined by the two
 least significant bits of the imm8 constant. The insertion is
 done in such a way that the three other words from the
 destination register are left untouched.
]]>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-pmachriw">
  <title><literal>PMACHRIW</literal>: MMX Packed Multiply and
   Accumulate with Rounding</title>

  <indexterm>
   <primary><literal>PMACHRIW</literal></primary>
  </indexterm>

  <screen>PMACHRIW mmxreg,mem64         ; 0F 5E /r             [CYRIX,MMX]</screen>

  <para><literal>PMACHRIW</literal> acts almost identically to
   <literal>PMULHRIW</literal> (<xref linkend="inst-ref-pmulhrw">),
   but instead of <emphasis>storing</emphasis> its result in the
   implied destination register, it <emphasis>adds</emphasis> its
   result, as four packed words, to the implied destination register.
   No saturation is done: the addition can wrap around.</para>

  <para>Note that <literal>PMACHRIW</literal> cannot take a register
   as its second source operand.</para>
 </sect1>
]]>
 <sect1 id="inst-ref-pmaddwd">
  <title><literal>PMADDWD</literal>: MMX Packed Multiply and
   Add</title>

  <indexterm>
   <primary><literal>PMADDWD</literal></primary>
  </indexterm>

  <screen>PMADDWD mmxreg,r/m64          ; 0F F5 /r             [PENT,MMX]</screen>

  <para><literal>PMADDWD</literal> treats its two inputs as vectors of
   four signed words. It multiplies corresponding elements of the two
   operands, giving four signed doubleword results. The top two of
   these are added and placed in the top 32 bits of the destination
   (first) operand; the bottom two are added and placed in the bottom
   32 bits.</para>
 </sect1>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-pmagw">
  <title><literal>PMAGW</literal>: MMX Packed Magnitude</title>

  <indexterm>
   <primary><literal>PMAGW</literal></primary>
  </indexterm>

  <screen>PMAGW mmxreg,r/m64            ; 0F 52 /r             [CYRIX,MMX]</screen>

  <para><literal>PMAGW</literal>, specific to the Cyrix MMX
   extensions, treats both its operands as vectors of four signed
   words. It compares the absolute values of the words in
   corresponding positions, and sets each word of the destination
   (first) operand to whichever of the two words in that position had
   the larger absolute value.</para>
 </sect1>
]]>
<![%inst-ref.katmai;[
\H{insPMAXSW} \i<literal>PMAXSW</literal>: Packed Signed Integer Word Maximum

\c PMAXSW mmxreg,mmxreg           ; 0F,EE, /r  [KATMAI,MMX] 
\c PMAXSW mmxreg,memory           ; ??         [KATMAI,MMX,SM] 

<literal>PMAXSW</literal> The PMAXSW instruction returns the maximum between
 the four signed words in MM1 and MM2/Mem.


\H{insPMAXUB} \i<literal>PMAXUB</literal>: Packed Unsigned Integer Byte Maximum

\c PMAXUB mmxreg,mmxreg           ; 0F,DE, /r  [KATMAI,MMX] 
\c PMAXUB mmxreg,memory           ; ??      [KATMAI,MMX,SM] 

<literal>PMAXUB</literal> The PMAXUB instruction returns the maximum between
 the eight unsigned words in MM1 and MM2/Mem.


\H{insPMINSW} \i<literal>PMINSW</literal>: Packed Signed Integer Word Minimum

\c PMINSW mmxreg,mmxreg           ; 0F,EA, /r  [KATMAI,MMX] 
\c PMINSW mmxreg,memory           ; ??      [KATMAI,MMX,SM] 

<literal>PMINSW</literal> The PMINSW instruction returns the minimum between
 the four signed words in MM1 and MM2/Mem.


\H{insPMINUB} \i<literal>PMINUB</literal>: Packed Unsigned Integer Byte Minimum

\c PMINUB mmxreg,mmxreg           ; 0F,DA, /r  [KATMAI,MMX] 
\c PMINUB mmxreg,memory           ; ??      [KATMAI,MMX,SM] 

<literal>PMINUB</literal>The PMINUB instruction returns the minimum between
 the eight unsigned words in MM1 and MM2/Mem.


\H{insPMOVMSKB} \i<literal>PMOVMSKB</literal>: Move Byte Mask To Integer

\c PMOVMSKB reg32,mmxreg           ; 0F,D7,/r   [KATMAI,MMX] 

<literal>PMOVMSKB</literal> The PMOVMSKB instruction returns an 8-bit mask
 formed of the most significant bits of each byte of its
 source operand. 
]]>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-pmulhrw">
  <title><literal>PMULHRW</literal>, <literal>PMULHRIW</literal>: MMX
   Packed Multiply High with Rounding</title>

  <indexterm>
   <primary><literal>PMULHRW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PMULHRIW</literal></primary>
  </indexterm>

  <screen>PMULHRW mmxreg,r/m64          ; 0F 59 /r             [CYRIX,MMX]
PMULHRIW mmxreg,r/m64         ; 0F 5D /r             [CYRIX,MMX]</screen>

  <para>These instructions, specific to the Cyrix MMX extensions,
   treat their operands as vectors of four signed words. Words in
   corresponding positions are multiplied, to give a 32-bit value in
   which bits 30 and 31 are guaranteed equal. Bits 30 to 15 of this
   value (bit mask <literal>0x7FFF8000</literal>) are taken and stored
   in the corresponding position of the destination operand, after
   first rounding the low bit (equivalent to adding
   <literal>0x4000</literal> before extracting bits 30 to 15).</para>

  <para>For <literal>PMULHRW</literal>, the destination operand is the
   first operand; for <literal>PMULHRIW</literal> the destination
   operand is implied by the first operand in the manner of
   <literal>PADDSIW</literal> (<xref
    linkend="inst-ref-paddsiw">).</para>
 </sect1>
]]>
<![%inst-ref.now3d;[
\H{insPMULHRWA} \i<literal>PMULHRWA</literal>: 3dnow instruction (duh!)

\c PMULHRWA mmxreg,memory           ; ??        [PENT,3DNOW,SM]
\c PMULHRWA mmxreg,mmxreg           ; ??           [PENT,3DNOW] 

3dnow instruction (duh!)


\H{insPMULHUW} \i<literal>PMULHUW</literal>: Packed Multiply High Unsigned

\c PMULHUW mmxreg,mmxreg           ; 0F,E4,/r    [KATMAI,MMX] 
\c PMULHUW mmxreg,memory           ; ??       [KATMAI,MMX,SM] 

<literal>PMULHUW</literal> The PMULHUW instruction multiplies the four unsigned
 words in the destination operand with the four unsigned words
 in the source operand. The high-order 16 bits of the 32-bit
 intermediate results are written to the destination operand. 
]]>
 <sect1 id="inst-ref-pmulhw">
  <title><literal>PMULHW</literal>, <literal>PMULLW</literal>: MMX
   Packed Multiply</title>

  <indexterm>
   <primary><literal>PMULHW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PMULLW</literal></primary>
  </indexterm>

  <screen>PMULHW mmxreg,r/m64           ; 0F E5 /r             [PENT,MMX]
PMULLW mmxreg,r/m64           ; 0F D5 /r             [PENT,MMX]</screen>

  <para><literal>PMULxW</literal> treats its two inputs as vectors of
   four signed words. It multiplies corresponding elements of the two
   operands, giving four signed doubleword results.</para>

  <para><literal>PMULHW</literal> then stores the top 16 bits of each
   doubleword in the destination (first) operand;
   <literal>PMULLW</literal> stores the bottom 16 bits of each
   doubleword in the destination operand.</para>
 </sect1>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-pmvcczb">
  <title><literal>PMVccZB</literal>: MMX Packed Conditional
   Move</title>

  <indexterm>
   <primary><literal>PMVccZB</literal></primary>
  </indexterm>

  <screen>PMVZB mmxreg,mem64            ; 0F 58 /r             [CYRIX,MMX]
PMVNZB mmxreg,mem64           ; 0F 5A /r             [CYRIX,MMX]
PMVLZB mmxreg,mem64           ; 0F 5B /r             [CYRIX,MMX]
PMVGEZB mmxreg,mem64          ; 0F 5C /r             [CYRIX,MMX]</screen>

  <para>These instructions, specific to the Cyrix MMX extensions,
   perform parallel conditional moves. The two input operands are
   treated as vectors of eight bytes. Each byte of the destination
   (first) operand is either written from the corresponding byte of
   the source (second) operand, or left alone, depending on the value
   of the byte in the <emphasis>implied</emphasis> operand (specified
   in the same way as <literal>PADDSIW</literal>, in
   <xref linkend="inst-ref-paddsiw">).</para>

  <para><literal>PMVZB</literal> performs each move if the
   corresponding byte in the implied operand is zero.
   <literal>PMVNZB</literal> moves if the byte is non-zero.
   <literal>PMVLZB</literal> moves if the byte is less than zero, and
   <literal>PMVGEZB</literal> moves if the byte is greater than or
   equal to zero.</para>

  <para>Note that these instructions cannot take a register as their
   second source operand.</para>
 </sect1>
]]>
 <sect1 id="inst-ref-pop">
  <title><literal>POP</literal>: Pop Data from Stack</title>

  <indexterm>
   <primary><literal>POP</literal></primary>
  </indexterm>

  <screen>POP reg16                     ; o16 58+r             [8086]
POP reg32                     ; o32 58+r             [386]

POP r/m16                     ; o16 8F /0            [8086]
POP r/m32                     ; o32 8F /0            [386]

<![%inst-ref.undoc;[POP CS                        ; 0F               [8086,UNDOC]]]>
POP DS                        ; 1F                   [8086]
POP ES                        ; 07                   [8086]
POP SS                        ; 17                   [8086]
POP FS                        ; 0F A1                [386]
POP GS                        ; 0F A9                [386]</screen>

  <para><literal>POP</literal> loads a value from the stack (from
   <literal>[&reg.ss;:&reg.sp;]</literal> or
   <literal>[&reg.ss;:&reg.esp;]</literal>) and then increments the
   stack pointer.</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The address-size attribute of the instruction determines
   whether &reg.sp; or &reg.esp; is used as the stack pointer: to
   deliberately override the default given by the
   <literal>BITS</literal> setting, you can use an
   <literal>a16</literal> or <literal>a32</literal> prefix.</para>

  <indexterm>
   <primary><literal>o16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>o32</literal></primary>
  </indexterm>

  <para>The operand-size attribute of the instruction determines
   whether the stack pointer is incremented by 2 or 4: this means that
   segment register pops in <literal>BITS 32</literal> mode will pop 4
   bytes off the stack and discard the upper two of them. If you need
   to override that, you can use an <literal>o16</literal> or
   <literal>o32</literal> prefix.</para>

  <para>The above opcode listings give two forms for general-purpose
   register pop instructions: for example, <literal>POP BX</literal>
   has the two forms <literal>5B</literal> and <literal>8F
    C3</literal>. NASM will always generate the shorter form when
   given <literal>POP BX</literal>.</para>

<![%inst-ref.undoc;[
  <para><literal>POP CS</literal> is not a documented instruction, and
   is not supported on any processor above the 8086 (since they use
   <literal>0Fh</literal> as an opcode prefix for instruction set
   extensions). However, at least some 8086 processors do support it,
   and so NASM generates it for completeness.</para>
]]>
 </sect1>

 <sect1 id="inst-ref-popa">
  <title><literal>POPAx</literal>: Pop All General-Purpose
   Registers</title>

  <indexterm>
   <primary><literal>POPAx</literal></primary>
  </indexterm>

  <screen>POPA                          ; 61                   [186]
POPAW                         ; o16 61               [186]
POPAD                         ; o32 61               [386]</screen>

  <para><literal>POPAW</literal> pops a word from the stack into each
   of, successively, &reg.di;, &reg.si;, &reg.bp;, nothing (it
   discards a word from the stack which was a placeholder for
   &reg.sp;), &reg.bx;, &reg.dx;, &reg.cx; and &reg.ax;. It is
   intended to reverse the operation of <literal>PUSHAW</literal> (see
   <xref linkend="inst-ref-pusha">), but it ignores the value for
   &reg.sp; that was pushed on the stack by
   <literal>PUSHAW</literal>.</para>

  <para><literal>POPAD</literal> pops twice as much data, and places
   the results in &reg.edi;, &reg.esi;, &reg.ebp;, nothing
   (placeholder for &reg.esp;), &reg.ebx;, &reg.edx;, &reg.ecx; and
   &reg.eax;. It reverses the operation of
   <literal>PUSHAD</literal>.</para>

  <para><literal>POPA</literal> is an alias mnemonic for either
   <literal>POPAW</literal> or <literal>POPAD</literal>, depending on
   the current <literal>BITS</literal> setting.</para>

  <para>Note that the registers are popped in reverse order of their
   numeric values in opcodes (see <xref
    linkend="inst-ref-opcode-desc-reg-values">).</para>
 </sect1>

 <sect1 id="inst-ref-popf">
  <title><literal>POPFx</literal>: Pop Flags Register</title>

  <indexterm>
   <primary><literal>POPFx</literal></primary>
  </indexterm>

  <screen>POPF                          ; 9D                   [186]
POPFW                         ; o16 9D               [186]
POPFD                         ; o32 9D               [386]</screen>

  <para><literal>POPFW</literal> pops a word from the stack and stores
   it in the bottom 16 bits of the flags register (or the whole flags
   register, on processors below a 386). <literal>POPFD</literal> pops
   a doubleword and stores it in the entire flags register.</para>

  <para><literal>POPF</literal> is an alias mnemonic for either
   <literal>POPFW</literal> or <literal>POPFD</literal>, depending on
   the current <literal>BITS</literal> setting.</para>

  <para>See also <literal>PUSHF</literal> (<xref
    linkend="inst-ref-pushf">).</para>
 </sect1>

 <sect1 id="inst-ref-por">
  <title><literal>POR</literal>: MMX Bitwise OR</title>

  <indexterm>
   <primary><literal>POR</literal></primary>
  </indexterm>

  <screen>POR mmxreg,r/m64              ; 0F EB /r             [PENT,MMX]</screen>

  <para><literal>POR</literal> performs a bitwise OR operation between
   its two operands (i.e. each bit of the result is 1 if and only if
   at least one of the corresponding bits of the two inputs was 1),
   and stores the result in the destination (first) operand.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insPREFETCHNTA} \i<literal>PREFETCHNTA</literal>: Prefetch 

\c PREFETCHNTA memory           ; 0F,18,/0       [KATMAI] 

<literal>PREFETCHNTA</literal> Move data specified by address closer to the
 processor using the nta hint.


\H{insPREFETCHT0} \i<literal>PREFETCHT0</literal>: Prefetch

\c PREFETCHT0 memory           ; 0F,18,/1     [KATMAI] 

<literal>PREFETCHT0</literal> Move data specified by address closer to the
 processor using the t0 hint.


\H{insPREFETCHT1} \i<literal>PREFETCHT1</literal>: Prefetch

\c PREFETCHT1 memory           ; 0F,18,/2     [KATMAI] 

<literal>PREFETCHT1</literal>Move data specified by address closer to the
 processor using the t1 hint.


\H{insPREFETCHT2} \i<literal>PREFETCHT2</literal>: Prefetch

\c PREFETCHT2 memory           ; 0F,18,/3      [KATMAI] 

<literal>PREFETCHT2</literal> Move data specified by address closer to the
 processor using the t2 hint.
]]>
<![%inst-ref.now3d;[
\H{insPREFETCH} \i<literal>PREFETCH</literal>: 3dnow instruction (duh!)

\c PREFETCH memory           ; ??           [PENT,3DNOW,SM] 

3dnow instruction (duh!)


\H{insPREFETCHW} \i<literal>PREFETCHW</literal>: 3dnow instruction (duh!)

\c PREFETCHW memory           ; ??           [PENT,3DNOW,SM] 

3dnow instruction (duh!)
]]>
<![%inst-ref.katmai;[
\H{insPSADBW} \i<literal>PSADBW</literal>: Packed Sum of Absolute Differences

\c PSADBW mmxreg,mmxreg           ; 0F,F6, /r [KATMAI,MMX] 
\c PSADBW mmxreg,memory           ; ??     [KATMAI,MMX,SM] 

<literal>PSADBW</literal> The PSADBW instruction computes the absolute value of
 the difference of unsigned bytes for mm1 and mm2/m64. These
 differences are then summed to produce a word result in the lower
 16-bit field; the upper three words are cleared. The destination
 operand is an MMXTM technology register. The source operand can
 either be an MMXTM technology register or a 64-bit memory operand.


\H{insPSHUFW} \i<literal>PSHUFW</literal>: Packed Shuffle Word

\c PSHUFW mmxreg,mmxreg,immediate ; 0F,70,/r,ib [KATMAI,MMX,SB,AR2]
\c PSHUFW mmxreg,memory,immediate ; ??   [KATMAI,MMX,SM2,SB,AR2] 

<literal>PSHUFW</literal> The PSHUF instruction uses the imm8 operand to select
 which of the four words in MM2/Mem will be placed in each of the
 words in MM1. Bits 1 and 0 of imm8 encode the source for
 destination word 0 (MM1[15-0]), bits 3 and 2 encode for word 1,
 bits 5 and 4 encode for word 2, and bits 7 and 6 encode for
 word 3 (MM1[63-48]). Similarly, the two-bit encoding represents
 which source word is to be used, e.g., a binary encoding of 10
 indicates that source word 2 (MM2/Mem[47-32]) will be used.
]]>
 <sect1 id="inst-ref-pslld">
  <title><literal>PSLLx</literal>, <literal>PSRLx</literal>,
   <literal>PSRAx</literal>: MMX Bit Shifts</title>

  <indexterm>
   <primary><literal>PSLLx</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PSRLx</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>PSRAx</literal></primary>
  </indexterm>

  <screen>PSLLW mmxreg,r/m64            ; 0F F1 /r             [PENT,MMX]
PSLLW mmxreg,imm8             ; 0F 71 /6 ib          [PENT,MMX]

PSLLD mmxreg,r/m64            ; 0F F2 /r             [PENT,MMX]
PSLLD mmxreg,imm8             ; 0F 72 /6 ib          [PENT,MMX]

PSLLQ mmxreg,r/m64            ; 0F F3 /r             [PENT,MMX]
PSLLQ mmxreg,imm8             ; 0F 73 /6 ib          [PENT,MMX]

PSRAW mmxreg,r/m64            ; 0F E1 /r             [PENT,MMX]
PSRAW mmxreg,imm8             ; 0F 71 /4 ib          [PENT,MMX]

PSRAD mmxreg,r/m64            ; 0F E2 /r             [PENT,MMX]
PSRAD mmxreg,imm8             ; 0F 72 /4 ib          [PENT,MMX]

PSRLW mmxreg,r/m64            ; 0F D1 /r             [PENT,MMX]
PSRLW mmxreg,imm8             ; 0F 71 /2 ib          [PENT,MMX]

PSRLD mmxreg,r/m64            ; 0F D2 /r             [PENT,MMX]
PSRLD mmxreg,imm8             ; 0F 72 /2 ib          [PENT,MMX]

PSRLQ mmxreg,r/m64            ; 0F D3 /r             [PENT,MMX]
PSRLQ mmxreg,imm8             ; 0F 73 /2 ib          [PENT,MMX]</screen>

  <para><literal>PSxxQ</literal> perform simple bit shifts on the
   64-bit MMX registers: the destination (first) operand is shifted
   left or right by the number of bits given in the source (second)
   operand, and the vacated bits are filled in with zeros (for a
   logical shift) or copies of the original sign bit (for an
   arithmetic right shift).</para>

  <para><literal>PSxxW</literal> and <literal>PSxxD</literal> perform
   packed bit shifts: the destination operand is treated as a vector
   of four words or two doublewords, and each element is shifted
   individually, so bits shifted out of one element do not interfere
   with empty bits coming into the next.</para>

  <para><literal>PSLLx</literal> and <literal>PSRLx</literal> perform
   logical shifts: the vacated bits at one end of the shifted number
   are filled with zeros. <literal>PSRAx</literal> performs an
   arithmetic right shift: the vacated bits at the top of the shifted
   number are filled with copies of the original top (sign)
   bit.</para>
 </sect1>

 <sect1 id="inst-ref-psubb">
  <title><literal>PSUBxx</literal>: MMX Packed Subtraction</title>

  <indexterm>
   <primary><literal>PSUBxx</literal></primary>
  </indexterm>

  <screen>PSUBB mmxreg,r/m64            ; 0F F8 /r             [PENT,MMX]
PSUBW mmxreg,r/m64            ; 0F F9 /r             [PENT,MMX]
PSUBD mmxreg,r/m64            ; 0F FA /r             [PENT,MMX]

PSUBSB mmxreg,r/m64           ; 0F E8 /r             [PENT,MMX]
PSUBSW mmxreg,r/m64           ; 0F E9 /r             [PENT,MMX]

PSUBUSB mmxreg,r/m64          ; 0F D8 /r             [PENT,MMX]
PSUBUSW mmxreg,r/m64          ; 0F D9 /r             [PENT,MMX]</screen>

  <para><literal>PSUBxx</literal> all perform packed subtraction
   between their two 64-bit operands, storing the result in the
   destination (first) operand. The <literal>PSUBxB</literal> forms
   treat the 64-bit operands as vectors of eight bytes, and subtract
   each byte individually; <literal>PSUBxW</literal> treat the
   operands as vectors of four words; and <literal>PSUBD</literal>
   treats its operands as vectors of two doublewords.</para>

  <para>In all cases, the elements of the operand on the right are
   subtracted from the corresponding elements of the operand on the
   left, not the other way round.</para>

  <para><literal>PSUBSB</literal> and <literal>PSUBSW</literal>
   perform signed saturation on the sum of each pair of bytes or
   words: if the result of a subtraction is too large or too small to
   fit into a signed byte or word result, it is clipped (saturated) to
   the largest or smallest value which <emphasis>will</emphasis> fit.
   <literal>PSUBUSB</literal> and <literal>PSUBUSW</literal> similarly
   perform unsigned saturation, clipping to <literal>0FFh</literal> or
   <literal>0FFFFh</literal> if the result is larger than that.</para>
 </sect1>
<![%inst-ref.cyrix;[
 <sect1 id="inst-ref-psubsiw">
  <title><literal>PSUBSIW</literal>: MMX Packed Subtract with
   Saturation to Implied Destination</title>

  <indexterm>
   <primary><literal>PSUBSIW</literal></primary>
  </indexterm>

  <screen>PSUBSIW mmxreg,r/m64          ; 0F 55 /r             [CYRIX,MMX]</screen>

  <para><literal>PSUBSIW</literal>, specific to the Cyrix extensions
   to the MMX instruction set, performs the same function as
   <literal>PSUBSW</literal>, except that the result is not placed in
   the register specified by the first operand, but instead in the
   implied destination register, specified as for
   <literal>PADDSIW</literal> (<xref
    linkend="inst-ref-paddsiw">).</para>
 </sect1>
]]>
 <sect1 id="inst-ref-punpckxxx">
  <title><literal>PUNPCKxxx</literal>: Unpack Data</title>

  <indexterm>
   <primary><literal>PUNPCKxxx</literal></primary>
  </indexterm>

  <screen>PUNPCKHBW mmxreg,r/m64        ; 0F 68 /r             [PENT,MMX]
PUNPCKHWD mmxreg,r/m64        ; 0F 69 /r             [PENT,MMX]
PUNPCKHDQ mmxreg,r/m64        ; 0F 6A /r             [PENT,MMX]

PUNPCKLBW mmxreg,r/m64        ; 0F 60 /r             [PENT,MMX]
PUNPCKLWD mmxreg,r/m64        ; 0F 61 /r             [PENT,MMX]
PUNPCKLDQ mmxreg,r/m64        ; 0F 62 /r             [PENT,MMX]</screen>

  <para><literal>PUNPCKxx</literal> all treat their operands as
   vectors, and produce a new vector generated by interleaving
   elements from the two inputs. The <literal>PUNPCKHxx</literal>
   instructions start by throwing away the bottom half of each input
   operand, and the <literal>PUNPCKLxx</literal> instructions throw
   away the top half.</para>

  <para>The remaining elements, totalling 64 bits, are then
   interleaved into the destination, alternating elements from the
   second (source) operand and the first (destination) operand: so the
   leftmost element in the result always comes from the second
   operand, and the rightmost from the destination.</para>

  <para><literal>PUNPCKxBW</literal> works a byte at a time,
   <literal>PUNPCKxWD</literal> a word at a time, and
   <literal>PUNPCKxDQ</literal> a doubleword at a time.</para>

  <para>So, for example, if the first operand held
   <literal>0x7A6A5A4A3A2A1A0A</literal> and the second held
   <literal>0x7B6B5B4B3B2B1B0B</literal>, then:</para>

  <simplelist>
   <member><literal>PUNPCKHBW</literal> would return
    <literal>0x7B7A6B6A5B5A4B4A</literal>.</member>

   <member><literal>PUNPCKHWD</literal> would return
    <literal>0x7B6B7A6A5B4B5A4A</literal>.</member>

   <member><literal>PUNPCKHDQ</literal> would return
    <literal>0x7B6B5B4B7A6A5A4A</literal>.</member>

   <member><literal>PUNPCKLBW</literal> would return
    <literal>0x3B3A2B2A1B1A0B0A</literal>.</member>

   <member><literal>PUNPCKLWD</literal> would return
    <literal>0x3B2B3A2A1B0B1A0A</literal>.</member>

   <member><literal>PUNPCKLDQ</literal> would return
    <literal>0x3B2B1B0B3A2A1A0A</literal>.</member>
  </simplelist>
 </sect1>

 <sect1 id="inst-ref-push">
  <title><literal>PUSH</literal>: Push Data on Stack</title>

  <indexterm>
   <primary><literal>PUSH</literal></primary>
  </indexterm>

  <screen>PUSH reg16                    ; o16 50+r             [8086]
PUSH reg32                    ; o32 50+r             [386]

PUSH r/m16                    ; o16 FF /6            [8086]
PUSH r/m32                    ; o32 FF /6            [386]

PUSH CS                       ; 0E                   [8086]
PUSH DS                       ; 1E                   [8086]
PUSH ES                       ; 06                   [8086]
PUSH SS                       ; 16                   [8086]
PUSH FS                       ; 0F A0                [386]
PUSH GS                       ; 0F A8                [386]

PUSH imm8                     ; 6A ib                [286]
PUSH imm16                    ; o16 68 iw            [286]
PUSH imm32                    ; o32 68 id            [386]</screen>

  <para><literal>PUSH</literal> decrements the stack pointer (&reg.sp;
   or &reg.esp;) by 2 or 4, and then stores the given value at
   <literal>[&reg.ss;:&reg.sp;]</literal> or
   <literal>[&reg.ss;:&reg.esp;]</literal>.</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The address-size attribute of the instruction determines
   whether &reg.sp; or &reg.esp; is used as the stack pointer: to
   deliberately override the default given by the
   <literal>BITS</literal> setting, you can use an
   <literal>a16</literal> or <literal>a32</literal> prefix.</para>

  <indexterm>
   <primary><literal>o16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>o32</literal></primary>
  </indexterm>

  <para>The operand-size attribute of the instruction determines
   whether the stack pointer is decremented by 2 or 4: this means that
   segment register pushes in <literal>BITS 32</literal> mode will
   push 4 bytes on the stack, of which the upper two are undefined. If
   you need to override that, you can use an <literal>o16</literal> or
   <literal>o32</literal> prefix.</para>

  <indexterm>
   <primary>register push</primary>
  </indexterm>

  <para>The above opcode listings give two forms for general-purpose
   register push instructions: for example, <literal>PUSH BX</literal>
   has the two forms <literal>53</literal> and <literal>FF
    F3</literal>. NASM will always generate the shorter form when
   given <literal>PUSH BX</literal>.</para>
<![%inst-ref.undoc;[
  <para>Unlike the undocumented and barely supported <literal>POP
    CS</literal>, <literal>PUSH CS</literal> is a perfectly valid and
   sensible instruction, supported on all processors.</para>
]]>
  <para>The instruction <literal>PUSH SP</literal> may be used to
   distinguish an 8086 from later processors: on an 8086, the value of
   &reg.sp; stored is the value it has <emphasis>after</emphasis> the
   push instruction, whereas on later processors it is the value
   <emphasis>before</emphasis> the push instruction.</para>
 </sect1>

 <sect1 id="inst-ref-pusha">
  <title><literal>PUSHAx</literal>: Push All General-Purpose
   Registers</title>

  <indexterm>
   <primary><literal>PUSHAx</literal></primary>
  </indexterm>

  <screen>PUSHA                         ; 60                   [186]
PUSHAD                        ; o32 60               [386]
PUSHAW                        ; o16 60               [186]</screen>

  <para><literal>PUSHAW</literal> pushes, in succession, &reg.ax;,
   &reg.cx;, &reg.dx;, &reg.bx;, &reg.sp;, &reg.bp;, &reg.si; and
   &reg.di; on the stack, decrementing the stack pointer by a total of
   16.</para>

  <para><literal>PUSHAD</literal> pushes, in succession, &reg.eax;,
   &reg.ecx;, &reg.edx;, &reg.ebx;, &reg.esp;, &reg.ebp;, &reg.esi;
   and &reg.edi; on the stack, decrementing the stack pointer by a
   total of 32.</para>

  <para>In both cases, the value of &reg.sp; or &reg.esp; pushed is
   its <emphasis>original</emphasis> value, as it had before the
   instruction was executed.</para>

  <para><literal>PUSHA</literal> is an alias mnemonic for either
   <literal>PUSHAW</literal> or <literal>PUSHAD</literal>, depending
   on the current <literal>BITS</literal> setting.</para>

  <para>Note that the registers are pushed in order of their numeric
   values in opcodes (see <xref
    linkend="inst-ref-opcode-desc-reg-values">).</para>

  <para>See also <literal>POPA</literal> (<xref
    linkend="inst-ref-popa">).</para>
 </sect1>

 <sect1 id="inst-ref-pushf">
  <title><literal>PUSHFx</literal>: Push Flags Register</title>

  <indexterm>
   <primary><literal>PUSHFx</literal></primary>
  </indexterm>

  <screen>PUSHF                         ; 9C                   [186]
PUSHFD                        ; o32 9C               [386]
PUSHFW                        ; o16 9C               [186]</screen>

  <para><literal>PUSHFW</literal> pops a word from the stack and
   stores it in the bottom 16 bits of the flags register (or the whole
   flags register, on processors below a 386).
   <literal>PUSHFD</literal> pops a doubleword and stores it in the
   entire flags register.</para>

  <para><literal>PUSHF</literal> is an alias mnemonic for either
   <literal>PUSHFW</literal> or <literal>PUSHFD</literal>, depending
   on the current <literal>BITS</literal> setting.</para>

  <para>See also <literal>POPF</literal> (<xref
    linkend="inst-ref-popf">).</para>
 </sect1>

 <sect1 id="inst-ref-pxor">
  <title><literal>PXOR</literal>: MMX Bitwise XOR</title>

  <indexterm>
   <primary><literal>PXOR</literal></primary>
  </indexterm>

  <screen>PXOR mmxreg,r/m64             ; 0F EF /r             [PENT,MMX]</screen>

  <para><literal>PXOR</literal> performs a bitwise XOR operation
   between its two operands (i.e. each bit of the result is 1 if and
   only if exactly one of the corresponding bits of the two inputs was
   1), and stores the result in the destination (first)
   operand.</para>
 </sect1>

 <sect1 id="inst-ref-rcl">
  <title><literal>RCL</literal>, <literal>RCR</literal>: Bitwise
   Rotate through Carry Bit</title>

  <indexterm>
   <primary><literal>RCL</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>RCR</literal></primary>
  </indexterm>

  <screen>RCL r/m8,1                    ; D0 /2                [8086]
RCL r/m8,CL                   ; D2 /2                [8086]
RCL r/m8,imm8                 ; C0 /2 ib             [286]
RCL r/m16,1                   ; o16 D1 /2            [8086]
RCL r/m16,CL                  ; o16 D3 /2            [8086]
RCL r/m16,imm8                ; o16 C1 /2 ib         [286]
RCL r/m32,1                   ; o32 D1 /2            [386]
RCL r/m32,CL                  ; o32 D3 /2            [386]
RCL r/m32,imm8                ; o32 C1 /2 ib         [386]

RCR r/m8,1                    ; D0 /3                [8086]
RCR r/m8,CL                   ; D2 /3                [8086]
RCR r/m8,imm8                 ; C0 /3 ib             [286]
RCR r/m16,1                   ; o16 D1 /3            [8086]
RCR r/m16,CL                  ; o16 D3 /3            [8086]
RCR r/m16,imm8                ; o16 C1 /3 ib         [286]
RCR r/m32,1                   ; o32 D1 /3            [386]
RCR r/m32,CL                  ; o32 D3 /3            [386]
RCR r/m32,imm8                ; o32 C1 /3 ib         [386]</screen>

  <para><literal>RCL</literal> and <literal>RCR</literal> perform a
   9-bit, 17-bit or 33-bit bitwise rotation operation, involving the
   given source/destination (first) operand and the carry bit. Thus,
   for example, in the operation <literal>RCL &reg.al;,1</literal>, a
   9-bit rotation is performed in which &reg.al; is shifted left by 1,
   the top bit of &reg.al; moves into the carry flag, and the original
   value of the carry flag is placed in the low bit of
   &reg.al;.</para>

  <para>The number of bits to rotate by is given by the second
   operand. Only the bottom five bits of the rotation count are
   considered by processors above the 8086.</para>

  <para>You can force the longer (286 and upwards, beginning with a
   <literal>C1</literal> byte) form of <literal>RCL foo,1</literal> by
   using a <literal>BYTE</literal> prefix: <literal>RCL foo,BYTE
    1</literal>. Similarly with <literal>RCR</literal>.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insRCPPS} \i<literal>RCPPS</literal>: Packed Single-FP Reciprocal

\c RCPPS xmmreg,memory           ; 0F,53,/r   [KATMAI,SSE] 
\c RCPPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>RCPPS</literal>RCPPS returns an approximation of the reciprocal of the
 SP FP numbers from xmm2/m128. The maximum error for this
 approximation is: Error <=1.5x2-12


\H{insRCPSS} \i<literal>RCPSS</literal>: Scalar Single-FP Reciprocal

\c RCPSS xmmreg,memory           ; F3,0F,53,/r [KATMAI,SSE] 
\c RCPSS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>RCPSS</literal>RCPSS returns an approximation of the reciprocal of the
 lower SP FP number from xmm2/m32; the upper three fields are
 passed through from xmm1. The maximum error for this
 approximation is: |Error| <= 1.5x2-12
]]>
 <sect1 id="inst-ref-rdmsr">
  <title><literal>RDMSR</literal>: Read Model-Specific Registers</title>

  <indexterm>
   <primary><literal>RDMSR</literal></primary>
  </indexterm>

  <screen>RDMSR                         ; 0F 32                [PENT]</screen>

  <para><literal>RDMSR</literal> reads the processor Model-Specific
   Register (MSR) whose index is stored in &reg.ecx;, and stores the
   result in <literal>&reg.edx;:&reg.eax;</literal>. See also
   <literal>WRMSR</literal> (<xref linkend="inst-ref-wrmsr">).</para>
 </sect1>

 <sect1 id="inst-ref-rdpmc">
  <title><literal>RDPMC</literal>: Read Performance-Monitoring
   Counters</title>

  <indexterm>
   <primary><literal>RDPMC</literal></primary>
  </indexterm>

  <screen>RDPMC                         ; 0F 33                [P6]</screen>

  <para><literal>RDPMC</literal> reads the processor
   performance-monitoring counter whose index is stored in &reg.ecx;,
   and stores the result in
   <literal>&reg.edx;:&reg.eax;</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-rdtsc">
  <title><literal>RDTSC</literal>: Read Time-Stamp Counter</title>

  <indexterm>
   <primary><literal>RDTSC</literal></primary>
  </indexterm>

  <screen>RDTSC                         ; 0F 31                [PENT]</screen>

  <para><literal>RDTSC</literal> reads the processor's time-stamp
   counter into <literal>&reg.edx;:&reg.eax;</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-ret">
  <title><literal>RET</literal>, <literal>RETF</literal>,
   <literal>RETN</literal>: Return from Procedure Call</title>

  <indexterm>
   <primary><literal>RET</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>RETF</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>RETN</literal></primary>
  </indexterm>

  <screen>RET                           ; C3                   [8086]
RET imm16                     ; C2 iw                [8086]

RETF                          ; CB                   [8086]
RETF imm16                    ; CA iw                [8086]

RETN                          ; C3                   [8086]
RETN imm16                    ; C2 iw                [8086]</screen>

  <para><literal>RET</literal>, and its exact synonym
   <literal>RETN</literal>, pop <literal>IP</literal> or
   <literal>EIP</literal> from the stack and transfer control to the
   new address. Optionally, if a numeric second operand is provided,
   they increment the stack pointer by a further
   <literal>imm16</literal> bytes after popping the return
   address.</para>

  <para><literal>RETF</literal> executes a far return: after popping
   <literal>IP</literal>/<literal>EIP</literal>, it then pops
   <literal>CS</literal>, and <emphasis>then</emphasis> increments the
   stack pointer by the optional argument if present.</para>
 </sect1>

 <sect1 id="inst-ref-rol">
  <title><literal>ROL</literal>, <literal>ROR</literal>: Bitwise
   Rotate</title>

  <indexterm>
   <primary><literal>ROL</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>ROR</literal></primary>
  </indexterm>

  <screen>ROL r/m8,1                    ; D0 /0                [8086]
ROL r/m8,CL                   ; D2 /0                [8086]
ROL r/m8,imm8                 ; C0 /0 ib             [286]
ROL r/m16,1                   ; o16 D1 /0            [8086]
ROL r/m16,CL                  ; o16 D3 /0            [8086]
ROL r/m16,imm8                ; o16 C1 /0 ib         [286]
ROL r/m32,1                   ; o32 D1 /0            [386]
ROL r/m32,CL                  ; o32 D3 /0            [386]
ROL r/m32,imm8                ; o32 C1 /0 ib         [386]

ROR r/m8,1                    ; D0 /1                [8086]
ROR r/m8,CL                   ; D2 /1                [8086]
ROR r/m8,imm8                 ; C0 /1 ib             [286]
ROR r/m16,1                   ; o16 D1 /1            [8086]
ROR r/m16,CL                  ; o16 D3 /1            [8086]
ROR r/m16,imm8                ; o16 C1 /1 ib         [286]
ROR r/m32,1                   ; o32 D1 /1            [386]
ROR r/m32,CL                  ; o32 D3 /1            [386]
ROR r/m32,imm8                ; o32 C1 /1 ib         [386]</screen>

  <para><literal>ROL</literal> and <literal>ROR</literal> perform a
   bitwise rotation operation on the given source/destination (first)
   operand. Thus, for example, in the operation <literal>ROL
    &reg.al;,1</literal>, an 8-bit rotation is performed in which
   &reg.al; is shifted left by 1 and the original top bit of &reg.al;
   moves round into the low bit.</para>

  <para>The number of bits to rotate by is given by the second
   operand. Only the bottom 3, 4 or 5 bits (depending on the source
   operand size) of the rotation count are considered by processors
   above the 8086.</para>

  <para>You can force the longer (286 and upwards, beginning with a
   <literal>C1</literal> byte) form of <literal>ROL foo,1</literal> by
   using a <literal>BYTE</literal> prefix: <literal>ROL foo,BYTE
    1</literal>. Similarly with <literal>ROR</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-rsm">
  <title><literal>RSM</literal>: Resume from System-Management
   Mode</title>

  <indexterm>
   <primary><literal>RSM</literal></primary>
  </indexterm>

  <screen>RSM                           ; 0F AA                [PENT]</screen>

  <para><literal>RSM</literal> returns the processor to its normal
   operating mode when it was in System-Management Mode.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insRSQRTPS} \i<literal>RSQRTPS</literal>:Packed Single-FP Square Root Reciprocal

\c RSQRTPS xmmreg,memory           ; 0F,52,/r   [KATMAI,SSE] 
\c RSQRTPS xmmreg,xmmreg           ; ??         [KATMAI,SSE] 

<literal>RSQRTPS</literal> RSQRTPS returns an approximation of the reciprocal
 of the square root of the SP FP numbers rom xmm2/m128. The
 maximum error for this approximation is: Error| <= 1.5x2-12


\H{insRSQRTSS} \i<literal>RSQRTSS</literal>:Scalar Single-FP Square Root Reciprocal

\c RSQRTSS xmmreg,memory         ; F3,0F,52,/r  [KATMAI,SSE] 
\c RSQRTSS xmmreg,xmmreg         ; ??           [KATMAI,SSE] 

<literal>RSQRTSS</literal> RSQRTSS returns an approximation of the reciprocal
 of the square root of the lowest SP FP number from xmm2/m32;
 the upper three fields are passed through from xmm1. The maximum
 error for this approximation is: |Error| <= 1.5x2-12
]]>
 <sect1 id="inst-ref-sahf">
  <title><literal>SAHF</literal>: Store AH to Flags</title>

  <indexterm>
   <primary><literal>SAHF</literal></primary>
  </indexterm>

  <screen>SAHF                          ; 9E                   [8086]</screen>

  <para><literal>SAHF</literal> sets the low byte of the flags word
   according to the contents of the &reg.ah; register. See also
   <literal>LAHF</literal> (<xref linkend="inst-ref-lahf">).</para>
 </sect1>

 <sect1 id="inst-ref-sal">
  <title><literal>SAL</literal>, <literal>SAR</literal>: Bitwise
   Arithmetic Shifts</title>

  <indexterm>
   <primary><literal>SAL</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SAR</literal></primary>
  </indexterm>

  <screen>SAL r/m8,1                    ; D0 /4                [8086]
SAL r/m8,CL                   ; D2 /4                [8086]
SAL r/m8,imm8                 ; C0 /4 ib             [286]
SAL r/m16,1                   ; o16 D1 /4            [8086]
SAL r/m16,CL                  ; o16 D3 /4            [8086]
SAL r/m16,imm8                ; o16 C1 /4 ib         [286]
SAL r/m32,1                   ; o32 D1 /4            [386]
SAL r/m32,CL                  ; o32 D3 /4            [386]
SAL r/m32,imm8                ; o32 C1 /4 ib         [386]

SAR r/m8,1                    ; D0 /0                [8086]
SAR r/m8,CL                   ; D2 /0                [8086]
SAR r/m8,imm8                 ; C0 /0 ib             [286]
SAR r/m16,1                   ; o16 D1 /0            [8086]
SAR r/m16,CL                  ; o16 D3 /0            [8086]
SAR r/m16,imm8                ; o16 C1 /0 ib         [286]
SAR r/m32,1                   ; o32 D1 /0            [386]
SAR r/m32,CL                  ; o32 D3 /0            [386]
SAR r/m32,imm8                ; o32 C1 /0 ib         [386]</screen>

  <para><literal>SAL</literal> and <literal>SAR</literal> perform an
   arithmetic shift operation on the given source/destination (first)
   operand. The vacated bits are filled with zero for
   <literal>SAL</literal>, and with copies of the original high bit of
   the source operand for <literal>SAR</literal>.</para>

  <para><literal>SAL</literal> is a synonym for <literal>SHL</literal>
   (see <xref linkend="inst-ref-shl">). NASM will assemble either one
   to the same code, but NDISASM will always disassemble that code as
   <literal>SHL</literal>.</para>

  <para>The number of bits to shift by is given by the second operand.
   Only the bottom 3, 4 or 5 bits (depending on the source operand
   size) of the shift count are considered by processors above the
   8086.</para>

  <para>You can force the longer (286 and upwards, beginning with a
   <literal>C1</literal> byte) form of <literal>SAL foo,1</literal> by
   using a <literal>BYTE</literal> prefix: <literal>SAL foo,BYTE
    1</literal>. Similarly with <literal>SAR</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-salc">
  <title><literal>SALC</literal>: Set AL from Carry Flag</title>

  <indexterm>
   <primary><literal>SALC</literal></primary>
  </indexterm>

  <screen>SALC                          ; D6                  [8086,UNDOC]</screen>

  <para><literal>SALC</literal> is an early undocumented instruction
   similar in concept to <literal>SETcc</literal> (<xref
    linkend="inst-ref-setcc">). Its function is to set &reg.al; to
   zero if the carry flag is clear, or to <literal>0xFF</literal> if
   it is set.</para>
 </sect1>

 <sect1 id="inst-ref-sbb">
  <title><literal>SBB</literal>: Subtract with Borrow</title>

  <indexterm>
   <primary><literal>SBB</literal></primary>
  </indexterm>

  <screen>SBB r/m8,reg8                 ; 18 /r                [8086]
SBB r/m16,reg16               ; o16 19 /r            [8086]
SBB r/m32,reg32               ; o32 19 /r            [386]

SBB reg8,r/m8                 ; 1A /r                [8086]
SBB reg16,r/m16               ; o16 1B /r            [8086]
SBB reg32,r/m32               ; o32 1B /r            [386]

SBB r/m8,imm8                 ; 80 /3 ib             [8086]
SBB r/m16,imm16               ; o16 81 /3 iw         [8086]
SBB r/m32,imm32               ; o32 81 /3 id         [386]

SBB r/m16,imm8                ; o16 83 /3 ib         [8086]
SBB r/m32,imm8                ; o32 83 /3 ib         [8086]

SBB AL,imm8                   ; 1C ib                [8086]
SBB AX,imm16                  ; o16 1D iw            [8086]
SBB EAX,imm32                 ; o32 1D id            [386]</screen>

  <para><literal>SBB</literal> performs integer subtraction: it
   subtracts its second operand, plus the value of the carry flag,
   from its first, and leaves the result in its destination (first)
   operand. The flags are set according to the result of the
   operation: in particular, the carry flag is affected and can be
   used by a subsequent <literal>SBB</literal> instruction.</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>

  <para>To subtract one number from another without also subtracting
   the contents of the carry flag, use <literal>SUB</literal> (<xref
    linkend="inst-ref-sub">).</para>
 </sect1>

 <sect1 id="inst-ref-scasb">
  <title><literal>SCASB</literal>, <literal>SCASW</literal>,
   <literal>SCASD</literal>: Scan String</title>

  <indexterm>
   <primary><literal>SCASB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SCASW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SCASD</literal></primary>
  </indexterm>

  <screen>SCASB                         ; AE                   [8086]
SCASW                         ; o16 AF               [8086]
SCASD                         ; o32 AF               [386]</screen>

  <para><literal>SCASB</literal> compares the byte in &reg.al; with
   the byte at <literal>[&reg.es;:&reg.di;]</literal> or
   <literal>[&reg.es;:&reg.edi;]</literal>, and sets the flags
   accordingly. It then increments or decrements (depending on the
   direction flag: increments if the flag is clear, decrements if it
   is set) &reg.di; (or &reg.edi;).</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The register used is &reg.di; if the address size is 16 bits,
   and &reg.edi; if it is 32 bits. If you need to use an address size
   not equal to the current <literal>BITS</literal> setting, you can
   use an explicit <literal>a16</literal> or <literal>a32</literal>
   prefix.</para>

  <para>Segment override prefixes have no effect for this instruction:
   the use of &reg.es; for the load from <literal>[DI]</literal> or
   <literal>[&reg.edi;]</literal> cannot be overridden.</para>

  <para><literal>SCASW</literal> and <literal>SCASD</literal> work in
   the same way, but they compare a word to &reg.ax; or a doubleword
   to &reg.eax; instead of a byte to &reg.al;, and increment or
   decrement the addressing registers by 2 or 4 instead of 1.</para>

  <para>The <literal>REPE</literal> and <literal>REPNE</literal>
   prefixes (equivalently, <literal>REPZ</literal> and
   <literal>REPNZ</literal>) may be used to repeat the instruction up
   to &reg.cx; (or &reg.ecx; - again, the address size chooses which)
   times until the first unequal or equal byte is found.</para>
 </sect1>

 <sect1 id="inst-ref-setcc">
  <title><literal>SETcc</literal>: Set Register from Condition</title>

  <indexterm>
   <primary><literal>SETcc</literal></primary>
  </indexterm>

  <screen>SETcc r/m8                    ; 0F 90+cc /2          [386]</screen>

  <para><literal>SETcc</literal> sets the given 8-bit operand to zero
   if its condition is not satisfied, and to 1 if it is.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insSFENCE} \i<literal>SFENCE</literal>: Store Fence

\c SFENCE 0,0,0           ; 0F AE /7               [KATMAI] 

<literal>SFENCE</literal> Weakly ordered memory types can enable higher
 performance through such techniques as out-of-order issue,
 write-combining, and write-collapsing. Memory ordering issues
 can arise between a producer and a consumer of data and there
 are a number of common usage models which may be affected by
 weakly ordered stores: 
      1. library functions, which use weakly ordered memory
         to write results 
      2. compiler-generated code, which also benefit from writing
         weakly-ordered results 
      3. hand-written code
 The degree to which a consumer of data knows that the data is
 weakly ordered can vary for these cases. As a result, the SFENCE
 instruction provides a performance-efficient way of ensuring
 ordering between routines that produce weakly-ordered results
 and routines that consume this data. The SFENCE is ordered with
 respect to stores and  other SFENCE instructions. 
    SFENCE uses the following ModRM encoding:
           Mod (7:6) = 11B
           Reg/Opcode (5:3) = 111B
           R/M (2:0) = 000B
 All other ModRM encodings are defined to be reserved, and use
 of these encodings risks incompatibility with future processors.
]]>
 <sect1 id="inst-ref-sgdt">
  <title><literal>SGDT</literal>, <literal>SIDT</literal>,
   <literal>SLDT</literal>: Store Descriptor Table Pointers</title>

  <indexterm>
   <primary><literal>SGDT</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SIDT</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SLDT</literal></primary>
  </indexterm>

  <screen>SGDT mem                      ; 0F 01 /0             [286,PRIV]
SIDT mem                      ; 0F 01 /1             [286,PRIV]
SLDT r/m16                    ; 0F 00 /0             [286,PRIV]</screen>

  <para><literal>SGDT</literal> and <literal>SIDT</literal> both take
   a 6-byte memory area as an operand: they store the contents of the
   GDTR (global descriptor table register) or IDTR (interrupt
   descriptor table register) into that area as a 32-bit linear
   address and a 16-bit size limit from that area (in that order).
   These are the only instructions which directly use
   <emphasis>linear</emphasis> addresses, rather than segment/offset
   pairs.</para>

  <para><literal>SLDT</literal> stores the segment selector
   corresponding to the LDT (local descriptor table) into the given
   operand.</para>

  <para>See also <literal>LGDT</literal>, <literal>LIDT</literal> and
   <literal>LLDT</literal> (<xref linkend="inst-ref-lgdt">).</para>
 </sect1>

 <sect1 id="inst-ref-shl">
  <title><literal>SHL</literal>, <literal>SHR</literal>: Bitwise
   Logical Shifts</title>

  <indexterm>
   <primary><literal>SHL</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SHR</literal></primary>
  </indexterm>

  <screen>SHL r/m8,1                    ; D0 /4                [8086]
SHL r/m8,CL                   ; D2 /4                [8086]
SHL r/m8,imm8                 ; C0 /4 ib             [286]
SHL r/m16,1                   ; o16 D1 /4            [8086]
SHL r/m16,CL                  ; o16 D3 /4            [8086]
SHL r/m16,imm8                ; o16 C1 /4 ib         [286]
SHL r/m32,1                   ; o32 D1 /4            [386]
SHL r/m32,CL                  ; o32 D3 /4            [386]
SHL r/m32,imm8                ; o32 C1 /4 ib         [386]

SHR r/m8,1                    ; D0 /5                [8086]
SHR r/m8,CL                   ; D2 /5                [8086]
SHR r/m8,imm8                 ; C0 /5 ib             [286]
SHR r/m16,1                   ; o16 D1 /5            [8086]
SHR r/m16,CL                  ; o16 D3 /5            [8086]
SHR r/m16,imm8                ; o16 C1 /5 ib         [286]
SHR r/m32,1                   ; o32 D1 /5            [386]
SHR r/m32,CL                  ; o32 D3 /5            [386]
SHR r/m32,imm8                ; o32 C1 /5 ib         [386]</screen>

  <para><literal>SHL</literal> and <literal>SHR</literal> perform a
   logical shift operation on the given source/destination (first)
   operand. The vacated bits are filled with zero.</para>

  <para>A synonym for <literal>SHL</literal> is <literal>SAL</literal>
   (see <xref linkend="inst-ref-sal">).  NASM will assemble either one
   to the same code.</para>

  <para>The number of bits to shift by is given by the second operand.
   Only the bottom 3, 4 or 5 bits (depending on the source operand
   size) of the shift count are considered by processors above the
   8086.</para>

  <para>You can force the longer (286 and upwards, beginning with a
   <literal>C1</literal> byte) form of <literal>SHL foo,1</literal> by
   using a <literal>BYTE</literal> prefix: <literal>SHL foo,BYTE
    1</literal>. Similarly with <literal>SHR</literal>.</para>
 </sect1>

 <sect1 id="inst-ref-shld">
  <title><literal>SHLD</literal>, <literal>SHRD</literal>: Bitwise
   Double-Precision Shifts</title>

  <indexterm>
   <primary><literal>SHLD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>SHRD</literal></primary>
  </indexterm>

  <screen>SHLD r/m16,reg16,imm8         ; o16 0F A4 /r ib      [386]
SHLD r/m16,reg32,imm8         ; o32 0F A4 /r ib      [386]
SHLD r/m16,reg16,CL           ; o16 0F A5 /r         [386]
SHLD r/m16,reg32,CL           ; o32 0F A5 /r         [386]

SHRD r/m16,reg16,imm8         ; o16 0F AC /r ib      [386]
SHRD r/m32,reg32,imm8         ; o32 0F AC /r ib      [386]
SHRD r/m16,reg16,CL           ; o16 0F AD /r         [386]
SHRD r/m32,reg32,CL           ; o32 0F AD /r         [386]</screen>

  <para><literal>SHLD</literal> performs a double-precision left
   shift. It notionally places its second operand to the right of its
   first, then shifts the entire bit string thus generated to the left
   by a number of bits specified in the third operand. It then updates
   only the <emphasis>first</emphasis> operand according to the result
   of this. The second operand is not modified.</para>

  <para><literal>SHRD</literal> performs the corresponding right
   shift: it notionally places the second operand to the
   <emphasis>left</emphasis> of the first, shifts the whole bit string
   right, and updates only the first operand.</para>

  <para>For example, if &reg.eax; holds <literal>0x01234567</literal>
   and &reg.ebx; holds <literal>0x89ABCDEF</literal>, then the
   instruction <literal>SHLD EAX,EBX,4</literal> would update
   &reg.eax; to hold <literal>0x12345678</literal>. Under the same
   conditions, <literal>SHRD EAX,EBX,4</literal> would update
   &reg.eax; to hold <literal>0xF0123456</literal>.</para>

  <para>The number of bits to shift by is given by the third operand.
   Only the bottom 5 bits of the shift count are considered.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insSHUFPS} \i<literal>SHUFPS</literal>: Shuffle Single-FP

\c SHUFPS xmmreg,memory,immediate ; 0F,C6,/r, ib [KATMAI,SSE,SB,AR2]
\c SHUFPS xmmreg,xmmreg,immediate ; ??         [KATMAI,SSE,SB,AR2] 

<literal>SHUFPS</literal> The SHUFPS instruction is able to shuffle any of the
 four SP FP numbers from xmm1 to the lower two destination fields;
 the upper two destination fields are generated from a shuffle of
 any of the four SP FP numbers from xmm2/m128.
]]>
<![%inst-ref.undoc;[
 <sect1 id="inst-ref-smi">
  <title><literal>SMI</literal>: System Management Interrupt</title>

  <indexterm>
   <primary><literal>SMI</literal></primary>
  </indexterm>

  <screen>SMI                           ; F1                   [386,UNDOC]</screen>

  <para>This is an opcode apparently supported by some AMD processors
   (which is why it can generate the same opcode as
   <literal>INT1</literal>), and places the machine into
   system-management mode, a special debugging mode.</para>
 </sect1>
]]>
 <sect1 id="inst-ref-smsw">
  <title><literal>SMSW</literal>: Store Machine Status Word</title>

  <indexterm>
   <primary><literal>SMSW</literal></primary>
  </indexterm>

  <screen>SMSW r/m16                    ; 0F 01 /4             [286,PRIV]</screen>

  <para><literal>SMSW</literal> stores the bottom half of the
   <literal>CR0</literal> control register (or the Machine Status
   Word, on 286 processors) into the destination operand. See also
   <literal>LMSW</literal> (<xref linkend="inst-ref-lmsw">).</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insSQRTPS} \i<literal>SQRTPS</literal>: Packed Single-FP Square Root

\c SQRTPS xmmreg,memory           ; 0F,51,/r    [KATMAI,SSE] 
\c SQRTPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>SQRTPS</literal> The SQRTPS instruction returns the square root of
 the packed SP FP numbers from xmm2/m128.


\H{insSQRTSS} \i<literal>SQRTSS</literal>: Scalar Single-FP Square Root

\c SQRTSS xmmreg,memory           ; F3,0F,51,/r [KATMAI,SSE] 
\c SQRTSS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>SQRTSS</literal> The SQRTSS instructions return the square root of
 the lowest SP FP numbers of their operand.
]]>
 <sect1 id="inst-ref-stc">
  <title><literal>STC</literal>, <literal>STD</literal>,
   <literal>STI</literal>: Set Flags</title>

  <indexterm>
   <primary><literal>STC</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>STD</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>STI</literal></primary>
  </indexterm>

  <screen>STC                           ; F9                   [8086]
STD                           ; FD                   [8086]
STI                           ; FB                   [8086]</screen>

  <para>These instructions set various flags. <literal>STC</literal>
   sets the carry flag; <literal>STD</literal> sets the direction
   flag; and <literal>STI</literal> sets the interrupt flag (thus
   enabling interrupts).</para>

  <para>To clear the carry, direction, or interrupt flags, use the
   <literal>CLC</literal>, <literal>CLD</literal> and
   <literal>CLI</literal> instructions (<xref
    linkend="inst-ref-clc">).  To invert the carry flag, use
   <literal>CMC</literal> (<xref linkend="inst-ref-cmc">).</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insSTMXCSR} \i<literal>STMXCSR</literal>: Store Streaming SIMD Extension
 Control/Status

\c STMXCSR memory           ; 0F,AE,/3       [KATMAI,SSE,SD] 

<literal>STMXCSR</literal> The MXCSR control/status register is used to enable
 masked/unmasked exception handling, to set rounding modes,
 to set flush-to-zero mode, and to view exception status flags.
 Refer to LDMXCSR for a description of the format of MXCSR.
 The linear address corresponds to the address of the
 least-significant byte of the referenced memory data.
 The reserved bits in the MXCSR are stored as zeroes.
]]>
 <sect1 id="inst-ref-stosb">
  <title><literal>STOSB</literal>, <literal>STOSW</literal>,
   <literal>STOSD</literal>: Store Byte to String</title>

  <indexterm>
   <primary><literal>STOSB</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>STOSW</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>STOSD</literal></primary>
  </indexterm>

  <screen>STOSB                         ; AA                   [8086]
STOSW                         ; o16 AB               [8086]
STOSD                         ; o32 AB               [386]</screen>

  <para><literal>STOSB</literal> stores the byte in &reg.al; at
   <literal>[&reg.es;:DI]</literal> or
   <literal>[&reg.es;:&reg.edi;]</literal>, and sets the flags
   accordingly. It then increments or decrements (depending on the
   direction flag: increments if the flag is clear, decrements if it
   is set) &reg.di; (or &reg.edi;).</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The register used is &reg.di; if the address size is 16 bits,
   and &reg.edi; if it is 32 bits. If you need to use an address size
   not equal to the current <literal>BITS</literal> setting, you can
   use an explicit <literal>a16</literal> or <literal>a32</literal>
   prefix.</para>

  <para>Segment override prefixes have no effect for this instruction:
   the use of &reg.es; for the store to <literal>[DI]</literal> or
   <literal>[&reg.edi;]</literal> cannot be overridden.</para>

  <para><literal>STOSW</literal> and <literal>STOSD</literal> work in
   the same way, but they store the word in &reg.ax; or the doubleword
   in &reg.eax; instead of the byte in &reg.al;, and increment or
   decrement the addressing registers by 2 or 4 instead of 1.</para>

  <para>The <literal>REP</literal> prefix may be used to repeat the
   instruction &reg.cx; (or &reg.ecx; - again, the address size
   chooses which) times.</para>
 </sect1>

 <sect1 id="inst-ref-str">
  <title><literal>STR</literal>: Store Task Register</title>

  <indexterm>
   <primary><literal>STR</literal></primary>
  </indexterm>

  <screen>STR r/m16                     ; 0F 00 /1             [286,PRIV]</screen>

  <para><literal>STR</literal> stores the segment selector
   corresponding to the contents of the Task Register into its
   operand.</para>
 </sect1>

 <sect1 id="inst-ref-sub">
  <title><literal>SUB</literal>: Subtract Integers</title>

  <indexterm>
   <primary><literal>SUB</literal></primary>
  </indexterm>

  <screen>SUB r/m8,reg8                 ; 28 /r                [8086]
SUB r/m16,reg16               ; o16 29 /r            [8086]
SUB r/m32,reg32               ; o32 29 /r            [386]

SUB reg8,r/m8                 ; 2A /r                [8086]
SUB reg16,r/m16               ; o16 2B /r            [8086]
SUB reg32,r/m32               ; o32 2B /r            [386]

SUB r/m8,imm8                 ; 80 /5 ib             [8086]
SUB r/m16,imm16               ; o16 81 /5 iw         [8086]
SUB r/m32,imm32               ; o32 81 /5 id         [386]

SUB r/m16,imm8                ; o16 83 /5 ib         [8086]
SUB r/m32,imm8                ; o32 83 /5 ib         [386]

SUB AL,imm8                   ; 2C ib                [8086]
SUB AX,imm16                  ; o16 2D iw            [8086]
SUB EAX,imm32                 ; o32 2D id            [386]</screen>

  <para><literal>SUB</literal> performs integer subtraction: it
   subtracts its second operand from its first, and leaves the result
   in its destination (first) operand. The flags are set according to
   the result of the operation: in particular, the carry flag is
   affected and can be used by a subsequent <literal>SBB</literal>
   instruction (<xref linkend="inst-ref-sbb">).</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insSUBPS} \i<literal>SUBPS</literal>: Packed Single-FP Subtract

\c SUBPS xmmreg,memory           ; 0F,5C,/r    [KATMAI,SSE] 
\c SUBPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>SUBPS</literal>T he SUBPS instruction subtracts the packed SP FP
 numbers of both their operands. 


\H{insSUBSS} \i<literal>SUBSS</literal>: Scalar Single-FP Subtract

\c SUBSS xmmreg,memory           ; F3,0F,5C, /r [KATMAI,SSE] 
\c SUBSS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>SUBSS</literal> The SUBSS instruction subtracts the lower SP FP
 numbers of both their operands.
]]>
 <sect1 id="inst-ref-test">
  <title><literal>TEST</literal>: Test Bits (notional bitwise
   AND)</title>

  <indexterm>
   <primary><literal>TEST</literal></primary>
  </indexterm>

  <screen>TEST r/m8,reg8                ; 84 /r                [8086]
TEST r/m16,reg16              ; o16 85 /r            [8086]
TEST r/m32,reg32              ; o32 85 /r            [386]

TEST r/m8,imm8                ; F6 /7 ib             [8086]
TEST r/m16,imm16              ; o16 F7 /7 iw         [8086]
TEST r/m32,imm32              ; o32 F7 /7 id         [386]

TEST AL,imm8                  ; A8 ib                [8086]
TEST AX,imm16                 ; o16 A9 iw            [8086]
TEST EAX,imm32                ; o32 A9 id            [386]</screen>

  <para><literal>TEST</literal> performs a <quote>mental</quote>
   bitwise AND of its two operands, and affects the flags as if the
   operation had taken place, but does not store the result of the
   operation anywhere.</para>
 </sect1>
<![%inst-ref.katmai;[
 <sect1 id="inst-ref-ucomiss">
\i<literal>UCOMISS</literal>: Unordered Scalar Single-FP compare
 and set EFLAGS

\c UCOMISS xmmreg,memory           ; 0F,2E,/r          [KATMAI,SSE] 
\c UCOMISS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>UCOMISS</literal> The UCOMISS instructions compare the two lowest scalar
 SP FP numbers, and set the ZF,PF,CF bits in the EFLAGS register
 as described above. In addition, the OF, SF, and AF bits in the
 EFLAGS register are zeroed out. The unordered predicate is
 returned if either source operand is a NaN (qNaN or sNaN).
 </sect1>
]]>
<![%inst-ref.undoc;[
 <sect1 id="inst-ref-umov">
  <title><literal>UMOV</literal>: User Move Data</title>

  <indexterm>
   <primary><literal>UMOV</literal></primary>
  </indexterm>

  <screen>UMOV r/m8,reg8                ; 0F 10 /r             [386,UNDOC]
UMOV r/m16,reg16              ; o16 0F 11 /r         [386,UNDOC]
UMOV r/m32,reg32              ; o32 0F 11 /r         [386,UNDOC]

UMOV reg8,r/m8                ; 0F 12 /r             [386,UNDOC]
UMOV reg16,r/m16              ; o16 0F 13 /r         [386,UNDOC]
UMOV reg32,r/m32              ; o32 0F 13 /r         [386,UNDOC]</screen>

  <para>This undocumented instruction is used by in-circuit emulators
   to access user memory (as opposed to host memory). It is used just
   like an ordinary memory/register or register/register
   <literal>MOV</literal> instruction, but accesses user space.</para>
 </sect1>
]]>
<![%inst-ref.katmai;[
\H{insUNPCKHPS} \i<literal>UNPCKHPS</literal>: Unpack High Packed Single-FP Data

\c UNPCKHPS xmmreg,memory           ; 0F,15,/r    [KATMAI,SSE] 
\c UNPCKHPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>UNPCKHPS</literal> The UNPCKHPS instruction performs an interleaved
 unpack of the high-order data elements of XMM1 and XMM2/Mem.
 It ignores the lower half of the sources. 


\H{insUNPCKLPS} \i<literal>UNPCKLPS</literal>: Unpack Low Packed Single-FP Data

\c UNPCKLPS xmmreg,memory           ; 0F,14,/r    [KATMAI,SSE] 
\c UNPCKLPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>UNPCKLPS</literal> The UNPCKLPS instruction performs an interleaved
 unpack of the low-order data elements of XMM1 and XMM2/Mem.
 It ignores the upper half part of the sources. 
]]>
 <sect1 id="inst-ref-verr">
  <title><literal>VERR</literal>, <literal>VERW</literal>: Verify
   Segment Readability/Writability</title>

  <indexterm>
   <primary><literal>VERR</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>VERW</literal></primary>
  </indexterm>

  <screen>VERR r/m16                    ; 0F 00 /4             [286,PRIV]

VERW r/m16                    ; 0F 00 /5             [286,PRIV]</screen>

  <para><literal>VERR</literal> sets the zero flag if the segment
   specified by the selector in its operand can be read from at the
   current privilege level. <literal>VERW</literal> sets the zero flag
   if the segment can be written.</para>
 </sect1>

 <sect1 id="inst-ref-wait">
  <title><literal>WAIT</literal>: Wait for Floating-Point
   Processor</title>

  <indexterm>
   <primary><literal>WAIT</literal></primary>
  </indexterm>

  <screen>WAIT                          ; 9B                   [8086]</screen>

  <para><literal>WAIT</literal>, on 8086 systems with a separate 8087
   FPU, waits for the FPU to have finished any operation it is engaged
   in before continuing main processor operations, so that (for
   example) an FPU store to main memory can be guaranteed to have
   completed before the CPU tries to read the result back out.</para>

  <para>On higher processors, <literal>WAIT</literal> is unnecessary
   for this purpose, and it has the alternative purpose of ensuring
   that any pending unmasked FPU exceptions have happened before
   execution continues.</para>
 </sect1>

 <sect1 id="inst-ref-wbinvd">
  <title><literal>WBINVD</literal>: Write Back and Invalidate Cache</title>

  <indexterm>
   <primary><literal>WBINVD</literal></primary>
  </indexterm>

  <screen>WBINVD                        ; 0F 09                [486]</screen>

  <para><literal>WBINVD</literal> invalidates and empties the
   processor's internal caches, and causes the processor to instruct
   external caches to do the same. It writes the contents of the
   caches back to memory first, so no data is lost. To flush the
   caches quickly without bothering to write the data back first, use
   <literal>INVD</literal> (<xref linkend="inst-ref-invd">).</para>
 </sect1>

 <sect1 id="inst-ref-wrmsr">
  <title><literal>WRMSR</literal>: Write Model-Specific Registers</title>

  <indexterm>
   <primary><literal>WRMSR</literal></primary>
  </indexterm>

  <screen>WRMSR                         ; 0F 30                [PENT]</screen>

  <para><literal>WRMSR</literal> writes the value in
   <literal>&reg.edx;:&reg.eax;</literal> to the processor
   Model-Specific Register (MSR) whose index is stored in &reg.ecx;.
   See also <literal>RDMSR</literal> (<xref
    linkend="inst-ref-rdmsr">).</para>
 </sect1>

 <sect1 id="inst-ref-xadd">
  <title><literal>XADD</literal>: Exchange and Add</title>

  <indexterm>
   <primary><literal>XADD</literal></primary>
  </indexterm>

  <screen>XADD r/m8,reg8                ; 0F C0 /r             [486]
XADD r/m16,reg16              ; o16 0F C1 /r         [486]
XADD r/m32,reg32              ; o32 0F C1 /r         [486]</screen>

  <para><literal>XADD</literal> exchanges the values in its two
   operands, and then adds them together and writes the result into
   the destination (first) operand. This instruction can be used with
   a <literal>LOCK</literal> prefix for multi-processor
   synchronisation purposes.</para>
 </sect1>
<![%inst-ref.undoc;[
 <sect1 id="inst-ref-xbts">
  <title><literal>XBTS</literal>: Extract Bit String</title>

  <indexterm>
   <primary><literal>XBTS</literal></primary>
  </indexterm>

  <screen>XBTS reg16,r/m16              ; o16 0F A6 /r         [386,UNDOC]
XBTS reg32,r/m32              ; o32 0F A6 /r         [386,UNDOC]</screen>

  <para>No clear documentation seems to be available for this
   instruction: the best I've been able to find reads `Takes a string
   of bits from the first operand and puts them in the second
   operand'. It is present only in early 386 processors, and conflicts
   with the opcodes for <literal>CMPXCHG486</literal>. NASM supports
   it only for completeness.  Its counterpart is
   <literal>IBTS</literal> (see <xref
    linkend="inst-ref-ibts">).</para>
 </sect1>
]]>
 <sect1 id="inst-ref-xchg">
  <title><literal>XCHG</literal>: Exchange</title>

  <indexterm>
   <primary><literal>XCHG</literal></primary>
  </indexterm>

  <screen>XCHG reg8,r/m8                ; 86 /r                [8086]
XCHG reg16,r/m8               ; o16 87 /r            [8086]
XCHG reg32,r/m32              ; o32 87 /r            [386]

XCHG r/m8,reg8                ; 86 /r                [8086]
XCHG r/m16,reg16              ; o16 87 /r            [8086]
XCHG r/m32,reg32              ; o32 87 /r            [386]

XCHG AX,reg16                 ; o16 90+r             [8086]
XCHG EAX,reg32                ; o32 90+r             [386]
XCHG reg16,AX                 ; o16 90+r             [8086]
XCHG reg32,EAX                ; o32 90+r             [386]</screen>

  <para><literal>XCHG</literal> exchanges the values in its two
   operands. It can be used with a <literal>LOCK</literal> prefix for
   purposes of multi-processor synchronisation.</para>

  <para><literal>XCHG AX,AX</literal> or <literal>XCHG
    EAX,EAX</literal> (depending on the <literal>BITS</literal>
   setting) generates the opcode <literal>90h</literal>, and so is a
   synonym for <literal>NOP</literal> (<xref
    linkend="inst-ref-nop">).</para>
 </sect1>

 <sect1 id="inst-ref-xlatb">
  <title><literal>XLATB</literal>: Translate Byte in Lookup
   Table</title>

  <indexterm>
   <primary><literal>XLATB</literal></primary>
  </indexterm>

  <screen>XLATB                         ; D7                   [8086]</screen>

  <para><literal>XLATB</literal> adds the value in &reg.al;, treated
   as an unsigned byte, to &reg.bx; or &reg.ebx;, and loads the byte
   from the resulting address (in the segment specified by &reg.ds;)
   back into &reg.al;.</para>

  <indexterm>
   <primary><literal>a16</literal></primary>
  </indexterm>

  <indexterm>
   <primary><literal>a32</literal></primary>
  </indexterm>

  <para>The base register used is &reg.bx; if the address size is 16
   bits, and &reg.ebx; if it is 32 bits. If you need to use an address
   size not equal to the current <literal>BITS</literal> setting, you
   can use an explicit <literal>a16</literal> or
   <literal>a32</literal> prefix.</para>

  <para>The segment register used to load from
   <literal>[&reg.bx;+&reg.al;]</literal> or
   <literal>[&reg.ebx;+&reg.al;]</literal> can be overridden by using
   a segment register name as a prefix (for example, <literal>es
    xlatb</literal>).</para>
 </sect1>

 <sect1 id="inst-ref-xor">
  <title><literal>XOR</literal>: Bitwise Exclusive OR</title>

  <indexterm>
   <primary><literal>XOR</literal></primary>
  </indexterm>

  <screen>XOR r/m8,reg8                 ; 30 /r                [8086]
XOR r/m16,reg16               ; o16 31 /r            [8086]
XOR r/m32,reg32               ; o32 31 /r            [386]

XOR reg8,r/m8                 ; 32 /r                [8086]
XOR reg16,r/m16               ; o16 33 /r            [8086]
XOR reg32,r/m32               ; o32 33 /r            [386]

XOR r/m8,imm8                 ; 80 /6 ib             [8086]
XOR r/m16,imm16               ; o16 81 /6 iw         [8086]
XOR r/m32,imm32               ; o32 81 /6 id         [386]

XOR r/m16,imm8                ; o16 83 /6 ib         [8086]
XOR r/m32,imm8                ; o32 83 /6 ib         [386]

XOR AL,imm8                   ; 34 ib                [8086]
XOR AX,imm16                  ; o16 35 iw            [8086]
XOR EAX,imm32                 ; o32 35 id            [386]</screen>

  <para><literal>XOR</literal> performs a bitwise XOR operation
   between its two operands (i.e. each bit of the result is 1 if and
   only if exactly one of the corresponding bits of the two inputs was
   1), and stores the result in the destination (first)
   operand.</para>

  <para>In the forms with an 8-bit immediate second operand and a
   longer first operand, the second operand is considered to be
   signed, and is sign-extended to the length of the first operand. In
   these cases, the <literal>BYTE</literal> qualifier is necessary to
   force NASM to generate this form of the instruction.</para>

  <para>The MMX instruction <literal>PXOR</literal> (see <xref
    linkend="inst-ref-pxor">) performs the same operation on the
   64-bit MMX registers.</para>
 </sect1>
<![%inst-ref.katmai;[
\H{insXORPS} \i<literal>XORPS</literal>: Bit-wise Logical Xor for Single-FP Data

\c XORPS xmmreg,memory           ; 0F,57,/r    [KATMAI,SSE] 
\c XORPS xmmreg,xmmreg           ; ??          [KATMAI,SSE] 

<literal>XORPS</literal> The XORPS instruction returns a bit-wise logical XOR
 between XMM1 and XMM2/Mem.
]]>
</appendix>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../appendix.decl"
     sgml-indent-data: t
     sgml-indent-step: 1
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "appendix")
     End:
-->
