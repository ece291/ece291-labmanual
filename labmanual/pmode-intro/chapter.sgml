<!--
     ECE 291 Lab Manual

     $IdPath$
-->

<chapter id="pmode-intro">
 <title>Introduction</title>

 <sect1 id="pmode-intro-howto">
  <title>How to Do this Tutorial</title>

  <para>Instead of having a huge reference section, and then a huge
   code description section, this tutorial introduces protected mode a
   little bit at a time.  <quote>Here's how this works.  Now here's
    how the code needs to be written.  Now write the code, and explore
    a little.</quote>  It's probably not worth reading over the whole
   thing before starting.  Just sit down at a computer and go through
   it step by step.  It will take some time to complete this tutorial,
   but you'll learn everything the right way with no <quote>black
    boxes</quote> or mysterious files.  If a file does seem
   mysterious, type it in instead of blindly pasting it in.  Look at
   the references.  Ask questions in the class newsgroup if something
   is puzzling.  This tutorial covers more than just 32-bit protected
   mode itself; it also explains a little about how assemblers,
   compilers, and linkers work, a little about Makefiles, and a little
   about graphics.  So let's begin where every good tutorial should
   begin&ndash;at the end.</para>
 </sect1>

 <sect1 id="pmode-intro-goal">
  <title>The Goal</title>

  <para>The Goal is to learn the basics of protected mode to prepare
   you for later MPs in ECE 291, where you'll be using the tools and
   concepts you learn in this tutorial.  By the end of the tutorial,
   you should be familiar with the following:</para>

  <itemizedlist>
   <listitem>
    <para>The differences between real and protected mode on the x86
     architecture.</para>
   </listitem>

   <listitem>
    <para>The purpose of DPMI, and how to use it from protected
     mode.</para>
   </listitem>

   <listitem>
    <para>How to write a protected mode program in assembler with the
     help of DJGPP.</para>
   </listitem>

   <listitem>
    <para>How to use the PModeLib functions, and how some of them work
     internally.</para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 id="pmode-intro-finalproject">
  <title>Protected Mode and the Final Project</title>

  <para>Advantages:</para>

  <itemizedlist>
   <listitem>
    <para>Better memory management</para>

    <itemizedlist>
     <listitem>
      <para>Can allocate huge (multimegabyte) buffers for high color,
       high resolution images and other data.</para>
     </listitem>

     <listitem>
      <para>Don't have to deal with 64K segment limitations.</para>
     </listitem>
    </itemizedlist>
   </listitem>

   <listitem>
    <para>Better instructions</para>

    <itemizedlist>
     <listitem>
      <para>Take full advantage of advanced instructions.</para>
     </listitem>

     <listitem>
      <para>Reference memory with <emphasis>any</emphasis> register or
       some combinations of registers.</para>
     </listitem>
    </itemizedlist>
   </listitem>

   <listitem>
    <para>High color, high resolution graphics</para>

    <itemizedlist>
     <listitem>
      <para>Final projects look <emphasis>much</emphasis>
       nicer.</para>
     </listitem>

     <listitem>
      <para>No need to manage or match palettes of only 16 or 256
       colors.</para>
     </listitem>
    </itemizedlist>
   </listitem>

   <listitem>
    <para>PModeLib</para>

    <itemizedlist>
     <listitem>
      <para>A big library <emphasis>with</emphasis> source code that
       provides memory allocation, sound, graphics, and networking
       functions.</para>
     </listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>

  <para>Disadvantages:</para>

  <itemizedlist>
   <listitem>
    <para>It's less familiar and more complex than real mode
     (hopefully this tutorial will make it more familiar).</para>
   </listitem>

   <listitem>
    <para>Doing hardware stuff will be slightly more difficult.</para>
   </listitem>

   <listitem>
    <para>Debugging will be <emphasis>much</emphasis> more difficult
     (the debugger is significantly harder to use than Turbo Debugger,
     and doesn't provide source-level debugging).</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-indent-step: 1
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
