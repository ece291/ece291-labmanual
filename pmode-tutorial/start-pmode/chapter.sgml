<!--
     ECE 291 Protected Mode Tutorial

     $IdPath$
-->

<chapter id="start-pmode">
 <title>Starting Protected Mode</title>

 <sect1 id="start-pmode-firstprog">
  <title>Our First Protected Mode Program</title>
  <orderedlist>
   <listitem>
    <para>Make an empty <filename
      class="directory">tutorial</filename> folder.  Make an
     <filename>basic.asm</filename> file.  Type this code into the
     <filename>basic.asm</filename> file:</para>

   <programlisting>
BITS 32              ; Tell NASM we're using 32-bit instructions by default.

GLOBAL  _main        ; Tells the linker about the label called _main

SECTION .text        ; Says that this is the start of the code section.
_main:               ; Code execution will start at the label called _main
        mov eax, 42  ; The simplest program you'll write in this class.
        ret          ; Return to DJGPP's crt0 library startup code</programlisting>
   </listitem>

   <listitem>
    <para>Go into the directory and type <command>nasm -f coff
      basic.asm -l basic.lst</command>.  A quick run of <command>nasm
      -hf</command> shows that this assembles the
     <filename>basic.asm</filename> file and creates
     <filename>basic.o</filename> in the form of a COFF object file.
     (This is the format that the DJGPP linker can read).  The object
     file contains the assembled code and data and information about
     the variable and label names so that the linker can link the
     object file with other object files and the system libraries.
     NASM also creates a list file called
     <filename>basic.lst</filename> which contains the compiled code
     with line numbers, addresses, and data tacked on to it.  Look at
     this file.  What is the opcode for ret? How many bytes were the
     two opcodes in the _main function?  Note how large the constant
     <quote>42</quote> is.</para>
   </listitem>

   <listitem>
    <para>Type <command>objdump --disassemble-all basic.o</command> to
     disassemble the object file that NASM created and print its
     contents to the screen.  (This step doesn't actually do anything,
     it's just to see how NASM works.)  Look at the
     <command>objdump</command> output.  This is the information
     that's in an object file.  Question 3:  How much of the mov
     opcode was actually opcode and how much data?  Hint: find the hex
     value of your data in the opcode.</para>
   </listitem>

   <listitem>
    <para>Type <command>gcc -o basic basic.o</command> which runs gcc,
     which runs the linker to take the <filename>basic.o</filename>
     file and link it with the DJGPP startup code to make it an
     executable.</para>

    <para>A <firstterm>linker</firstterm> takes a bunch of assembled
     object files and sticks them all into one big object (probably
     executable) file.  Object files can call routines or access
     variables in other object files as long as they are declared
     <literal>GLOBAL</literal> in one object file and
     <literal>EXTERN</literal> in the others.  When something is
     declared as <literal>GLOBAL</literal>, NASM will put its name and
     address into the object file it creates.  Other object files,
     with <literal>EXTERN</literal> references to a routine or
     variable, will be assembled into object files with unresolved
     links. The linker takes these object files, matches up the names,
     and puts the the address of the <literal>GLOBAL</literal> routine
     or variable into the code instead of just an unresolved name.
     This is how the LIB291 library code has been matched up with the
     MP code since the beginning of the class.</para>
   </listitem>

   <listitem>
    <para>Type "objdump --disassemble-all basic > out.txt" and look at
     out.txt (which is now huge) to see the dump of the object file it
     created with all the libraries.  Find
     <literal>&lt;_qsort&gt;</literal>.  Find
     <literal>&lt;start&gt;</literal> and
     <literal>&lt;exit&gt;</literal>. <literal>&lt;start&gt;</literal>
     is where protected mode execution actually starts.  It eventually
     calls your <literal>&lt;_main&gt;</literal>.  When
     <literal>&lt;_main&gt;</literal> returns, execution passes into
     the <literal>&lt;exit&gt;</literal> code which calls the
     <literal>&lt;_exit&gt;</literal> code which calls the
     <literal>&lt;__exit&gt;</literal> code, which finally leaves
     protected mode.  This is how C works.  Be afraid.  Be very
     afraid.</para>
   </listitem>

   <listitem>
    <para>Type <command>basic</command> to run the example program.
     Nothing happened?  Good.  Awe at the fact that there's only one
     line of assembly, yet twenty million things had to go on to get
     into and out of protected mode, to load the code, to interact
     with the operating system, to toggle the bits in the
     microprocessor, to manipulate the quantum state of billions and
     billions of electrons, etc, etc...</para>

    <para>If it seems like an excessive amount of work for one line of
     code, it is.  It's possible to do the exact same thing this
     <quote>basic</quote> program did in real mode.  Keep in mind that
     this is only the beginning, and it's good to start simple.</para>
   </listitem>

   <listitem>
    <para>Type <command>cv32 basic</command> to actually see what's
     going on.  This is the best protected mode debugger available in
     ECE 291 at the moment.  Hit <keycap>F8</keycap> a few times to
     step through.  (Go slow, or it's easy to miss the one line of
     code!)  <keycombo>
      <keycap>Alt</keycap>
      <keycap>H</keycap></keycombo> brings up a help screen.
     <keycombo>
      <keycap>Alt</keycap>
      <keycap>X</keycap></keycombo> exits.  CV32 will become more
     useful as the programs get more complex.</para>
   </listitem>
  </orderedlist>
 </sect1>

 <sect1 id="start-pmode-behindscenes">
  <title>Going Behind the Scenes</title>

  <para>The startup of a protected-mode program is far more complex
   than a real-mode program.  First, DOS reads in the real-mode stub
   and executes it.  This real-mode stub checks to see if DPMI is
   available, and then uses it to switch to protected mode.  After
   switching to protected mode, it then asks the operating system to
   allocate memory for the program's code and data segments, loads the
   protected mode image from disk, and then directs processor
   execution into the DJGPP library startup code.  This startup code
   does some dirty work such as reading the command line and
   initializing the standard library, and then (finally) runs
   <function>_main</function>.</para>
<!--
  <para>Yes, this all happens automatically for us; but why don't we
   take a closer look, and see what's <emphasis>really</emphasis>
   happening?  To do this, we'll write a much simplified version of
   this startup code, and switch the processor into protected mode
   ourselves by using DPMI calls directly.  For simplicity, we'll only
   do minimal error checking and handling.  Let's get started!</para>

  <sect2 id="start-pmode-behindscenes-realmode">
   <title>Going Back to Real Mode</title>

   <para>To get into protected mode, we'll first need to start where
    it all began (or at least where we began in ECE 291): real mode.
    However, we'll assume we have a couple things we haven't really
    needed to assume before: a 386 or newer processor, and a DPMI
    provider loaded in memory, either by the operating system or by a
    TSR program such as CWSDPMI.</para>
  </sect2>
-->
 </sect1>
</chapter>

<!--
     Local Variables:
     mode: sgml
     sgml-declaration: "../chapter.decl"
     sgml-indent-data: t
     sgml-indent-step: 1
     sgml-omittag: nil
     sgml-always-quote-attributes: t
     sgml-parent-document: ("../book.sgml" "part" "chapter")
     End:
-->
